//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace bielu.Umbraco.Cdn.Akamai.FastPurge.Interface
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAkamaiFastPurgeClient
    {
        /// <summary>
        /// Delete by CP code
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected CP code for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-cpcode) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> PostDeleteCpcodeAsync(Body body, string accountSwitchKey, Network network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete by CP code
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected CP code for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-cpcode) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> PostDeleteCpcodeAsync(Body body, string accountSwitchKey, Network network, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete by cache tag
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected set of cache tags for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-tag) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> PostDeleteTagAsync(Body2 body, string accountSwitchKey, Network2 network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete by cache tag
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected set of cache tags for the selected `network`. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-tag) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> PostDeleteTagAsync(Body2 body, string accountSwitchKey, Network2 network, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete by URL or ARL
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected URL or ARL  for the selected `network`.  URLs and ARLs can be submitted in the same request. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-url) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PostDeleteUrlAsync(Body3 body, string accountSwitchKey, Network3 network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete by URL or ARL
        /// </summary>
        /// <remarks>
        /// Deletes content on the selected URL or ARL  for the selected `network`.  URLs and ARLs can be submitted in the same request. In most cases, you should [invalidate](https://techdocs.akamai.com/purge-cache/reference/invalidate-url) rather than delete content. Invalidation keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PostDeleteUrlAsync(Body3 body, string accountSwitchKey, Network3 network, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Invalidate by CP code
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected CP code for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful response.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> PostInvalidateCpcodeAsync(Body4 body, string accountSwitchKey, Network4 network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalidate by CP code
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected CP code for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful response.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> PostInvalidateCpcodeAsync(Body4 body, string accountSwitchKey, Network4 network, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Invalidate by cache tag
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected set of cache tags for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> PostInvalidateTagAsync(Body5 body, string accountSwitchKey, Network5 network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalidate by cache tag
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected set of cache tags for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> PostInvalidateTagAsync(Body5 body, string accountSwitchKey, Network5 network, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Invalidate by URL or ARL
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected URL or ARL for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable. URLs and ARLs can be submitted in the same request.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> PostInvalidateUrlAsync(Body6 body, string accountSwitchKey, Network6 network);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalidate by URL or ARL
        /// </summary>
        /// <remarks>
        /// Invalidates content on the selected URL or ARL for the selected `network`. You should consider invalidating content by default. This keeps each object in cache until the version on your origin server is newer. Deletion retrieves the object regardless, which can dramatically increase the load on your origin server and would prevent Akamai from serving the old content if your origin is unreachable. URLs and ARLs can be submitted in the same request.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="network">__Enum__ The network on which you want to invalidate or delete content, either `staging` or the default `production` network. If omitting this optional parameter, also omit any trailing slash from the shortened URL.</param>
        /// <returns>Successful POST of a purge request.</returns>
        /// <exception cref="AkamaiFastPurgeApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> PostInvalidateUrlAsync(Body6 body, string accountSwitchKey, Network6 network, System.Threading.CancellationToken cancellationToken);

    }

    /// <summary>
    /// Specifies a list of CP codes to invalidate or delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// For CP code-based operations, an array of the CP codes you want to purge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Objects { get; set; } = new System.Collections.ObjectModel.Collection<int>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// Specifies a list of cache tags to invalidate or delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {
        /// <summary>
        /// An array of cache tag strings you want to purge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Objects { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// Specifies a list of URLs or ARLs to invalidate or delete. You can submit URLs and ARLs in the same purge request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {
        /// <summary>
        /// Lists URLs or ARLs to purge. Purges content for both `http` and `https` schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Objects { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// Specifies a list of CP codes to invalidate or delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body4
    {
        /// <summary>
        /// For CP code-based operations, an array of the CP codes you want to purge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Objects { get; set; } = new System.Collections.ObjectModel.Collection<int>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// Specifies a list of cache tags to invalidate or delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body5
    {
        /// <summary>
        /// An array of cache tag strings you want to purge.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Objects { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// Specifies a list of URLs or ARLs to invalidate or delete. You can submit URLs and ARLs in the same purge request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body6
    {
        /// <summary>
        /// Lists URLs or ARLs to purge. Purges content for both `http` and `https` schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Objects { get; set; } = new System.Collections.ObjectModel.Collection<string>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Network6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"staging")]
        Staging = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"production")]
        Production = 1,

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// V3 Purge response schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30
    {
        /// <summary>
        /// A URL that describes the API's error response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("describedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescribedBy { get; set; }

        /// <summary>
        /// Detailed information about the HTTP status code returned with the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; }

        /// <summary>
        /// The estimated number of seconds before the purge is to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("estimatedSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EstimatedSeconds { get; set; }

        /// <summary>
        /// The HTTP code that indicates the status of the request to invalidate or purge content. Successful requests yield a `201` code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatus", Required = Newtonsoft.Json.Required.Always)]
        public int HttpStatus { get; set; }

        /// <summary>
        /// Unique identifier for the purge request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purgeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PurgeId { get; set; }

        /// <summary>
        /// Identifier to provide Akamai Technical Support if issues arise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("supportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SupportId { get; set; }

        /// <summary>
        /// Describes the response type, for example, `Rate Limit exceeded`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AkamaiFastPurgeApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AkamaiFastPurgeApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AkamaiFastPurgeApiException<TResult> : AkamaiFastPurgeApiException
    {
        public TResult Result { get; private set; }

        public AkamaiFastPurgeApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625