//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace bielu.Umbraco.Cdn.Akamai.CCU.Interface
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IAkamaiCcuClient
    {
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Returns the ECCU permissions. If the response's `submitEccuRequest` member is enabled, you can run the [Create an ECCU request](https://techdocs.akamai.com/eccu/reference/post-request) operation to invalidate content.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List permissions.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetPermissionsAsync(string accountSwitchKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List permissions
        /// </summary>
        /// <remarks>
        /// Returns the ECCU permissions. If the response's `submitEccuRequest` member is enabled, you can run the [Create an ECCU request](https://techdocs.akamai.com/eccu/reference/post-request) operation to invalidate content.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List permissions.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetPermissionsAsync(string accountSwitchKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List properties
        /// </summary>
        /// <remarks>
        /// Returns the digital properties that you can apply ECCU refresh requests to.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List properties.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> GetPropertiesAsync(string accountSwitchKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List properties
        /// </summary>
        /// <remarks>
        /// Returns the digital properties that you can apply ECCU refresh requests to.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List properties.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> GetPropertiesAsync(string accountSwitchKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create an ECCU request
        /// </summary>
        /// <remarks>
        /// Creates a new ECCU refresh request.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>The operation was successful.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PostRequestAsync(Body body, string accountSwitchKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an ECCU request
        /// </summary>
        /// <remarks>
        /// Creates a new ECCU refresh request.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>The operation was successful.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> PostRequestAsync(Body body, string accountSwitchKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List ECCU requests
        /// </summary>
        /// <remarks>
        /// Returns a summary of submitted  ECCU refresh requests under your account. Use this to view the `status` of all refresh requests.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List ECCU requests.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> GetRequestsAsync(string accountSwitchKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List ECCU requests
        /// </summary>
        /// <remarks>
        /// Returns a summary of submitted  ECCU refresh requests under your account. Use this to view the `status` of all refresh requests.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <returns>List ECCU requests.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> GetRequestsAsync(string accountSwitchKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get an ECCU request
        /// </summary>
        /// <remarks>
        /// Returns a submitted refresh request. Run this operation if you want details on the request's `metadata`. Otherwise, you can run [List ECCU requests](https://techdocs.akamai.com/eccu/reference/get-requests) to check the `status` of all refresh requests.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="requestId">Unique identifier for an ECCU request.</param>
        /// <returns>The operation was successful.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> GetRequestAsync(string accountSwitchKey, int requestId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an ECCU request
        /// </summary>
        /// <remarks>
        /// Returns a submitted refresh request. Run this operation if you want details on the request's `metadata`. Otherwise, you can run [List ECCU requests](https://techdocs.akamai.com/eccu/reference/get-requests) to check the `status` of all refresh requests.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="requestId">Unique identifier for an ECCU request.</param>
        /// <returns>The operation was successful.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> GetRequestAsync(string accountSwitchKey, int requestId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove an ECCU request
        /// </summary>
        /// <remarks>
        /// Removes the refresh request from the  list of submitted requests only. This operation doesn't stop the refresh request from being processed.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="requestId">Unique identifier for an ECCU request.</param>
        /// <returns>Remove an ECCU request.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteRequestAsync(string accountSwitchKey, int requestId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove an ECCU request
        /// </summary>
        /// <remarks>
        /// Removes the refresh request from the  list of submitted requests only. This operation doesn't stop the refresh request from being processed.
        /// </remarks>
        /// <param name="accountSwitchKey">For customers who manage more than one account, this [runs the operation from another account](https://techdocs.akamai.com/developer/docs/manage-many-accounts-with-one-api-client). The Identity and Access Management API provides a [list of available account switch keys](https://techdocs.akamai.com/iam-api/reference/get-client-account-switch-keys).</param>
        /// <param name="requestId">Unique identifier for an ECCU request.</param>
        /// <returns>Remove an ECCU request.</returns>
        /// <exception cref="AkamaiCcuApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteRequestAsync(string accountSwitchKey, int requestId, System.Threading.CancellationToken cancellationToken);

    }

    /// <summary>
    /// Collects all of the data that you need to make an ECCU request for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {
        /// <summary>
        /// Contains tags that define a refresh request based on request parameters such as directory path and file extension. Use only ASCII characters. For more information on the format of an ECCU request file and metadata tag usage, see [Enhanced CCU Request Format](https://techdocs.akamai.com/purge-cache/docs/create-eccu-req-file).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Metadata { get; set; }

        /// <summary>
        /// In addition to the `requestName`, this provides information to help you track the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifies the digital property whose content you want to refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PropertyName { get; set; }

        /// <summary>
        /// Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` doesn't match `www.example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNameExactMatch", Required = Newtonsoft.Json.Required.Always)]
        public bool PropertyNameExactMatch { get; set; }

        /// <summary>
        /// Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BodyPropertyType PropertyType { get; set; }

        /// <summary>
        /// The name that you give to the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string RequestName { get; set; }

        /// <summary>
        /// A list of email addresses to notify when the `status` of the refresh request changes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusUpdateEmails { get; set; }

        /// <summary>
        /// Use this to mark differences in your refresh requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Version { get; set; }

    }

    /// <summary>
    /// Verifies your ECCU permissions. If you have `viewEccuFile` and `submitEccuFile` permissions, all API functionality is available to you.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// Verifies your permission to submit a refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitEccuRequest", Required = Newtonsoft.Json.Required.Always)]
        public bool SubmitEccuRequest { get; set; } = false;

        /// <summary>
        /// Verifies your permission to view a refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewEccuRequest", Required = Newtonsoft.Json.Required.Always)]
        public bool ViewEccuRequest { get; set; } = false;

    }

    /// <summary>
    /// Contains a collection of properties.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2
    {
        /// <summary>
        /// Collects data about each digital property under your account that you need to make an ECCU request for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Properties> Properties { get; set; } = new System.Collections.ObjectModel.Collection<Properties>();

    }

    /// <summary>
    /// Provides information about an ECCU request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {
        /// <summary>
        /// Further detail about the status of a request. Typically there is more information provided for a failed refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedStatusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ExtendedStatusMessage { get; set; }

        /// <summary>
        /// Contains tags that define a refresh request based on request parameters such as directory path and file extension. Use only ASCII characters. For more information on the format of an ECCU request file and metadata tag usage, see [Enhanced CCU Request Format](https://techdocs.akamai.com/eccu/docs/eccu-request-format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Metadata { get; set; }

        /// <summary>
        /// In addition to the `requestName`, this provides information to help you track the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifies the digital property whose content you want to refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PropertyName { get; set; }

        /// <summary>
        /// Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` doesn't match `www.example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNameExactMatch", Required = Newtonsoft.Json.Required.Always)]
        public bool PropertyNameExactMatch { get; set; }

        /// <summary>
        /// Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response3PropertyType PropertyType { get; set; }

        /// <summary>
        /// The time the refresh request was submitted, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset RequestDate { get; set; }

        /// <summary>
        /// A unique identifier for the refresh request. Use this to track issues with the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int RequestId { get; set; }

        /// <summary>
        /// The name that you give to the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string RequestName { get; set; }

        /// <summary>
        /// The username of the person who submitted the request. For example, `john-doe@example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Requestor { get; set; }

        /// <summary>
        /// Specifies the condition of the refresh request. Possible values are `PENDING`, `SUCCEEDED`, `FAILED`, or `IGNORED`. If you form the `metadata` incorrectly, the refresh request will fail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response3Status Status { get; set; }

        /// <summary>
        /// Details about the `status` of the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// The time the refresh request's `status` last changed, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StatusUpdateDate { get; set; }

        /// <summary>
        /// A list of email addresses to notify when the `status` of the refresh request changes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusUpdateEmails { get; set; }

        /// <summary>
        /// Use this to mark differences in your refresh requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Version { get; set; }

    }

    /// <summary>
    /// Contains a collection of ECCU requests.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {
        /// <summary>
        /// Provides information about an ECCU request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requests", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Requests> Requests { get; set; } = new System.Collections.ObjectModel.Collection<Requests>();

    }

    /// <summary>
    /// Provides information about an ECCU request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {
        /// <summary>
        /// Further detail about the status of a request. Typically there is more information provided for a failed refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedStatusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ExtendedStatusMessage { get; set; }

        /// <summary>
        /// Contains tags that define a refresh request based on request parameters such as directory path and file extension. Use only ASCII characters. For more information on the format of an ECCU request file and metadata tag usage, see [Enhanced CCU Request Format](https://techdocs.akamai.com/eccu/docs/eccu-request-format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Metadata { get; set; }

        /// <summary>
        /// In addition to the `requestName`, this provides information to help you track the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifies the digital property whose content you want to refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PropertyName { get; set; }

        /// <summary>
        /// Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` doesn't match `www.example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNameExactMatch", Required = Newtonsoft.Json.Required.Always)]
        public bool PropertyNameExactMatch { get; set; }

        /// <summary>
        /// Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response5PropertyType PropertyType { get; set; }

        /// <summary>
        /// The time the refresh request was submitted, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset RequestDate { get; set; }

        /// <summary>
        /// A unique identifier for the refresh request. Use this to track issues with the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int RequestId { get; set; }

        /// <summary>
        /// The name that you give to the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string RequestName { get; set; }

        /// <summary>
        /// The username of the person who submitted the request. For example, `john-doe@example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Requestor { get; set; }

        /// <summary>
        /// Specifies the condition of the refresh request. Possible values are `PENDING`, `SUCCEEDED`, `FAILED`, or `IGNORED`. If you form the `metadata` incorrectly, the refresh request will fail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response5Status Status { get; set; }

        /// <summary>
        /// Details about the `status` of the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// The time the refresh request's `status` last changed, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset StatusUpdateDate { get; set; }

        /// <summary>
        /// A list of email addresses to notify when the `status` of the refresh request changes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusUpdateEmails { get; set; }

        /// <summary>
        /// Use this to mark differences in your refresh requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Version { get; set; }

    }

    /// <summary>
    /// A problem object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {
        /// <summary>
        /// Specifies more details and indicates the cause of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Detail { get; set; }

        /// <summary>
        /// A nested problem object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Errors { get; set; }

        /// <summary>
        /// Links to the error instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        /// <summary>
        /// Specifies the HTTP status code. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Status { get; set; }

        /// <summary>
        /// Summarizes the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// Non-navigable URI that identifies each error case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A problem object.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {
        /// <summary>
        /// Specifies more details and indicates the cause of the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Detail { get; set; }

        /// <summary>
        /// A nested problem object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Errors { get; set; }

        /// <summary>
        /// Links to the error instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Instance { get; set; }

        /// <summary>
        /// Specifies the HTTP status code. 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Status { get; set; }

        /// <summary>
        /// Summarizes the problem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// Non-navigable URI that identifies each error case.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BodyPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARL_TOKEN")]
        ARL_TOKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOST_HEADER")]
        HOST_HEADER = 1,

    }

    /// <summary>
    /// Collects data about each digital property under your account that you need to make an ECCU request for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {
        /// <summary>
        /// Identifies the digital property whose content you want to refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PropertyName { get; set; }

        /// <summary>
        /// Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` does not match `www.example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNameExactMatch", Required = Newtonsoft.Json.Required.Always)]
        public bool PropertyNameExactMatch { get; set; }

        /// <summary>
        /// Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropertiesPropertyType PropertyType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response3PropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARL_TOKEN")]
        ARL_TOKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOST_HEADER")]
        HOST_HEADER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response3Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IGNORED")]
        IGNORED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCEEDED")]
        SUCCEEDED = 3,

    }

    /// <summary>
    /// Provides information about an ECCU request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Requests
    {
        /// <summary>
        /// Further detail about the status of a request. Typically there is more information provided for a failed refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendedStatusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string ExtendedStatusMessage { get; set; }

        /// <summary>
        /// Contains tags that define a refresh request based on request parameters such as directory path and file extension. Use only ASCII characters. For more information on the format of an ECCU request file and metadata tag usage, see [Create the ECCU request file](https://techdocs.akamai.com/purge-cache/docs/create-eccu-req-file).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Notes { get; set; }

        /// <summary>
        /// Identifies the digital property whose content you want to refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string PropertyName { get; set; }

        /// <summary>
        /// Specifies whether to exactly match the full string of the `propertyName`, or to perform an inexact right hand side (RHS) substring match. For example, with `propertyNameExactMatch` enabled, `example.com` doesn't match `www.example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyNameExactMatch", Required = Newtonsoft.Json.Required.Always)]
        public bool PropertyNameExactMatch { get; set; }

        /// <summary>
        /// Specifies the type of digital property. Either `ARL_TOKEN` or `HOST_HEADER`. This tells the edge network whether the purge information is contained in the ARL, or in a configuration file. The ARL is similar to the URL, but the ARL is specifically defined for objects to be served by the edge network. There are two types of ARLs, v1 and v2. For details, see the [Purge Cache documentation](https://techdocs.akamai.com/purge-cache/docs/digital-props).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestsPropertyType PropertyType { get; set; }

        /// <summary>
        /// The time the refresh request was submitted, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RequestDate { get; set; }

        /// <summary>
        /// A unique identifier for the refresh request. Use this to track issues with the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int RequestId { get; set; }

        /// <summary>
        /// The name that you give to the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string RequestName { get; set; }

        /// <summary>
        /// The username of the person who submitted the request. For example, `john-doe@example.com`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Requestor { get; set; }

        /// <summary>
        /// Specifies the condition of the refresh request. Possible values are `PENDING`, `SUCCEEDED`, `FAILED`, or `IGNORED`. If you form the `metadata` incorrectly, the refresh request fails.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestsStatus Status { get; set; }

        /// <summary>
        /// Details about the `status` of the refresh request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMessage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// The time the refresh request's `status` last changed, in ISO 8601 format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StatusUpdateDate { get; set; }

        /// <summary>
        /// A list of email addresses to notify when the `status` of the refresh request changes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusUpdateEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusUpdateEmails { get; set; }

        /// <summary>
        /// Use this to mark differences in your refresh requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Version { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response5PropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARL_TOKEN")]
        ARL_TOKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOST_HEADER")]
        HOST_HEADER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Response5Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IGNORED")]
        IGNORED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCEEDED")]
        SUCCEEDED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PropertiesPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARL_TOKEN")]
        ARL_TOKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOST_HEADER")]
        HOST_HEADER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestsPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ARL_TOKEN")]
        ARL_TOKEN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HOST_HEADER")]
        HOST_HEADER = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RequestsStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IGNORED")]
        IGNORED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SUCCEEDED")]
        SUCCEEDED = 3,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AkamaiCcuApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public AkamaiCcuApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AkamaiCcuApiException<TResult> : AkamaiCcuApiException
    {
        public TResult Result { get; private set; }

        public AkamaiCcuApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625