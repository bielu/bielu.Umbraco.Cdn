{
  "openapi": "3.0.0",
  "x-generator": "NSwag v13.10.7.0 (NJsonSchema v10.3.9.0 (Newtonsoft.Json v13.0.0.0))",
  "info": {
    "title": "bunny.net API",
    "description": "<img src='https://bunny.net/v2/images/bunnynet-logo-dark.svg' style='width: 200px;' alt='bunny.net Logo'>\n               Learn how to use the [bunny.net](https://bunny.net \"bunny.net - The content delivery platform that truly hops.\") API. Everything that can be done with the control panel can also be achieved with our API documented on this page. To learn how to use the storage API, have a look at our <a href='https://bunnycdnstorage.docs.apiary.io/#'>storage API documentation</a>\n               <h2>Third party API clients:</h2> \n               <br/>\n               We currently do not maintain an official API library, but you can use one of the third party ones provided here:<br/><br/>\n               <a rel='nofollow' href='https://github.com/codewithmark/bunnycdn'>https://github.com/codewithmark/bunnycdn</a> (bunny.net PHP library, thanks to <a rel=\"nofollow\" href='https://codewithmark.com'>Code With Mark</a>)\n               <br/><br/>\n               <i style='font-size: 11px;'><b>Note that third party clients are not maintained or developed by bunny.net so we unfortunately cannot offer support for them.</b></i>",
    "termsOfService": "https://bunny.net/tos",
    "contact": {
      "name": "bunny.net",
      "url": "https://docs.bunny.net",
      "email": "support@bunny.net"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/abusecase": {
      "get": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "List Abuse Cases",
        "operationId": "AbuseCasePublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of all abuse cases on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfAbuseCaseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfAbuseCaseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/dmca/{id}": {
      "get": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "Get Abuse Case",
        "operationId": "AbuseCasePublic_GetAbuseCase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The abuse case was set to pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The abuse case was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/abusecase/{id}": {
      "get": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "Get Abuse Case",
        "operationId": "AbuseCasePublic_GetAbuseCase2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The abuse case was set to pending",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The abuse case was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/dmca/{id}/resolve": {
      "post": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "Resolve Abuse Case",
        "operationId": "AbuseCasePublic_ResolveabuseCase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The abuse case was set to pending"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The abuse case was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/abusecase/{id}/resolve": {
      "post": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "Resolve Abuse Case",
        "operationId": "AbuseCasePublic_ResolveabuseCase2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The abuse case was set to pending"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The abuse case was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/abusecase/{id}/check": {
      "post": {
        "tags": [
          "Abuse Case"
        ],
        "summary": "Check Abuse Case",
        "operationId": "AbuseCasePublic_CheckAbuseCase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The updated abuse case object that was checked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AbuseCaseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The abuse case was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIAbuse",
              "SubuserAbuse"
            ]
          }
        ]
      }
    },
    "/auth/jwt/2fa": {
      "post": {
        "tags": [
          "AuthPublic"
        ],
        "operationId": "AuthPublic_AuthJwt2fa",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JwtTwoFactorModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The login request was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtAuthResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/JwtAuthResultModel"
                }
              }
            }
          },
          "400": {
            "description": "The login was not successful"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": []
          }
        ]
      }
    },
    "/auth/jwt/refresh": {
      "post": {
        "tags": [
          "AuthPublic"
        ],
        "operationId": "AuthPublic_RefreshJwt",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The token refresh was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtAuthResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/JwtAuthResultModel"
                }
              }
            }
          },
          "400": {
            "description": "The token refresh was not successful"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Global Search",
        "operationId": "SearchPublic_GlobalSearch",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "required": true,
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of platfom-wide search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResultsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Get Country List",
        "operationId": "CountriesPublic_GetCountryList",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of countries and tax rates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/billing": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Billing Details",
        "operationId": "BillingPublic_Index",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Get the billing status details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/payment/autorecharge": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Configure Auto Recharge",
        "operationId": "BillingPublic_ConfigureAutoRecharge",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureRechargeUpdateModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The current billing status details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/payment/checkout": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Create Payment Checkout",
        "operationId": "BillingPublic_Checkout",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutRequestModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The current billing status details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BillingModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/payment/prepare-authorization": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Prepare Payment Authorization",
        "operationId": "BillingPublic_PaymentsPrepareAuthorization",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The payment authorization details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAuthorization"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentAuthorization"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/affiliate": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Affiliate Details",
        "operationId": "BillingPublic_AffiliateDetails",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Get the affiliate details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingAffiliateDetailsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BillingAffiliateDetailsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/affiliate/claim": {
      "post": {
        "tags": [
          "Billing"
        ],
        "summary": "Claim Affiliate Credits",
        "operationId": "BillingPublic_AffiliateClaim",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Claim the affiliate credits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingAffiliateClaimResponseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/BillingAffiliateClaimResponseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/coinify/exchangerate": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get The Coinify BTC exchange rate",
        "operationId": "BillingPublic_CoinifyExchangeRate",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Get The Coinify BTC exchange rate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CoinifyExchangeRateModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CoinifyExchangeRateModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/coinify/create": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Crate coinify payment",
        "operationId": "BillingPublic_CreateCoinifyPayment",
        "parameters": [
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "number",
              "format": "decimal"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Billing summary with data report for each Pull Zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillingSummaryItem"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillingSummaryItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/summary": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Billing Summary",
        "operationId": "BillingPublic_Summary",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Get the billing summary with data report for each Pull Zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillingSummaryItem"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillingSummaryItem"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/summary/{billingRecordId}/pdf": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Get Billing Summary PDF",
        "operationId": "BillingPublic_SummaryPdf",
        "parameters": [
          {
            "name": "billingRecordId",
            "in": "path",
            "required": true,
            "description": "The ID of the billing record for which the summary will be generated. This can only be a summary type record ID.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The HTML version of the summary to generate a PDF",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The billing record was not found or was not the correct type"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/billing/applycode": {
      "get": {
        "tags": [
          "Billing"
        ],
        "summary": "Apply Promo Code",
        "operationId": "BillingPublic_ApplyCode",
        "parameters": [
          {
            "name": "CouponCode",
            "in": "query",
            "required": true,
            "description": "The coupon code that will be applied",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Status model with the result of the code applying",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIBilling",
              "SubuserBilling"
            ]
          }
        ]
      }
    },
    "/compute/script": {
      "get": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search term that will be used to filter the results",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of scripts on the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfEdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfEdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_AddScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEdgeScriptModel"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The script was successfuly added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding the script. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}": {
      "get": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that will be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEdgeScriptModel"
              }
            }
          },
          "description": "The configuration that should be applied to the script",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that will be deleted.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The script was successfuly deleted."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the script. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/code": {
      "get": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_GetCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the code for which the script that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The code of the script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_SetCode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the code for which the script that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEdgeScriptCodeModel"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The code of the script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/releases": {
      "get": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_GetReleases",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the code for which the script that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The code of the script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfEdgeScriptReleaseModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfEdgeScriptReleaseModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/publish": {
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Publish",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Publishes the current code as a release",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "description": "The UUID of the script release that will be published",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PublishEdgeScriptModel"
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The code of the script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "400": {
            "description": "The script has no active code."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/publish/{uuid}": {
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_Publish2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Publishes the current code as a release",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "description": "The UUID of the script release that will be published",
            "x-nullable": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PublishEdgeScriptModel"
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The code of the script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "400": {
            "description": "The script has no active code."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/variables/add": {
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_AddVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that will be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEdgeScriptVariableModel"
              }
            }
          },
          "description": "The variable that will be added",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/compute/script/{id}/variables/{variableId}": {
      "post": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_UpdateVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that contains the variable",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "description": "The ID of the Environment Variable that will be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEdgeScriptVariableModel"
              }
            }
          },
          "description": "The variable that will be added",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_GetVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that contains the variable",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "description": "The ID of the Environment Variable that should be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The script with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/EdgeScriptModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Compute"
        ],
        "operationId": "ComputeEdgeScriptPublic_DeleteVariable",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the script that contains the Edge Rule",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "variableId",
            "in": "path",
            "required": true,
            "description": "The ID of the Environment Variable that should be deleted",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The eniromental variable was successfuly deleted."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the environment variable. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The eniromental variable or script with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPICompute",
              "SubuserAPIDns",
              "SubuserCompute",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/apikey": {
      "get": {
        "tags": [
          "API Keys"
        ],
        "summary": "List API Keys",
        "operationId": "ApiKeyPublic_ListApiKeys",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of all API keys on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfApiKeyModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfApiKeyModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User"
            ]
          }
        ]
      }
    },
    "/support/ticket/list": {
      "get": {
        "tags": [
          "Support"
        ],
        "summary": "Get ticket list",
        "operationId": "SupportPublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 100,
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns the list of support tickets for the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfSupportTicketModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfSupportTicketModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPISupport",
              "SubuserSupport"
            ]
          }
        ]
      }
    },
    "/support/ticket/details/{id}": {
      "get": {
        "tags": [
          "Support"
        ],
        "summary": "Get ticket details",
        "operationId": "SupportPublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns the list of region codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The ticket with the given ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPISupport",
              "SubuserSupport"
            ]
          }
        ]
      }
    },
    "/support/ticket/{id}/close": {
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Close ticket",
        "operationId": "SupportPublic_Close",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ticket was closed"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPISupport",
              "SubuserSupport"
            ]
          }
        ]
      }
    },
    "/support/ticket/{id}/reply": {
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Reply ticket",
        "operationId": "SupportPublic_Reply",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketReplyModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "description": "The ticket was closed"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPISupport",
              "SubuserSupport"
            ]
          }
        ]
      }
    },
    "/support/ticket/create": {
      "post": {
        "tags": [
          "Support"
        ],
        "summary": "Create ticket",
        "operationId": "SupportPublic_CreateTicket",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SupportTicketCreateModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The ticket was created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SupportTicketModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPISupport",
              "SubuserSupport"
            ]
          }
        ]
      }
    },
    "/drmcertificate": {
      "get": {
        "tags": [
          "DRM Certificate"
        ],
        "summary": "DRM Certificates",
        "operationId": "DrmCertificatePublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of DRM certificates on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfDrmCertificateModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfDrmCertificateModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/region": {
      "get": {
        "tags": [
          "Region"
        ],
        "summary": "Region list",
        "operationId": "RegionPublic_Index",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns the list of region codes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerZone"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServerZone"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": []
          }
        ]
      }
    },
    "/videolibrary": {
      "get": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "List Video Libraries",
        "operationId": "VideoLibraryPublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 0
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search term that will be used to filter the results",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAccessKey",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of Video Libraries on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfVideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfVideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Add Video Library",
        "operationId": "VideoLibraryPublic_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoLibraryCreateModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}": {
      "get": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Get Video Library",
        "operationId": "VideoLibraryPublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Video Library that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeAccessKey",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The requested video library",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Update Video Library",
        "operationId": "VideoLibraryPublic_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VideoLibraryUpdateModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The requested video library has been successfuly deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Delete Video Library",
        "operationId": "VideoLibraryPublic_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Video Library that should be deleted",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The requested video library has been successfuly deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/languages": {
      "get": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Get Languages",
        "operationId": "VideoLibraryPublic_Index3",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "A list of language information objects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/resetApiKey": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Reset Password",
        "operationId": "VideoLibraryPublic_ResetPassword",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the storage zone that should have the password reset",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The password has been successfuly changed"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/resetApiKey": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Reset Password",
        "operationId": "VideoLibraryPublic_ResetPassword2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the storage zone that should have the password reset",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The password has been successfuly changed"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/watermark": {
      "put": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Add Watermark",
        "operationId": "VideoLibraryPublic_AddWatermark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The watermark has been successfuly uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID does not exist"
          },
          "413": {
            "description": "The uploaded file was too large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Delete Watermark",
        "operationId": "VideoLibraryPublic_DeleteWatermark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "x-nullable": false,
            "description": "The watermark has been successfuly deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/VideoLibraryModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID does not exist"
          },
          "413": {
            "description": "The uploaded file was too large"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/addAllowedReferrer": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Add Allowed Referer",
        "operationId": "VideoLibraryPublic_AddAllowedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddAllowedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The allowed referer was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to add allowed referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/removeAllowedReferrer": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Remove Allowed Referer",
        "operationId": "VideoLibraryPublic_RemoveAllowedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddBlockedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The allowed referer was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove allowed referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/addBlockedReferrer": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Add Blocked Referer",
        "operationId": "VideoLibraryPublic_AddBlockedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RemoveAllowedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The allowed referer was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove allowed referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Video Library with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/videolibrary/{id}/removeBlockedReferrer": {
      "post": {
        "tags": [
          "Stream Video Library"
        ],
        "summary": "Remove Blocked Referer",
        "operationId": "VideoLibraryPublic_RemoveBlockedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Video Library",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBlockedReferrerRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The blocked referer was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove blocked referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStream",
              "SubuserStream",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone": {
      "get": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "List DNS Zones",
        "operationId": "DnsZonePublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 1
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search term that will be used to filter the results",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of DNS Zones on the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfDnsZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfDnsZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Add DNS Zone",
        "operationId": "DnsZonePublic_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DnsZoneAddModel"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "The DNS Zone was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding the DNS Zone. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{id}": {
      "get": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Get DNS Zone",
        "operationId": "DnsZonePublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the DNS Zone that will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The DNS Zone with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Update DNS Zones",
        "operationId": "DnsZonePublic_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the DNS Zone that will be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDnsZoneModel"
              }
            }
          },
          "description": "The configuration that should be applied to the DNS zone",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The DNS Zone with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Delete DNS Zone",
        "operationId": "DnsZonePublic_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID that will be deleted.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The DNS Zone was successfuly deleted."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the DNS Zone. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{id}/export": {
      "get": {
        "tags": [
          "DNS Zone"
        ],
        "operationId": "DnsZonePublic_Export",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{id}/statistics": {
      "get": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Get DNS Query Statistics",
        "operationId": "DnsZonePublic_Statistics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the DNS Zone for which the statistics will be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns the statistics for the DNS Zone with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneStatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneStatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/checkavailability": {
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Check the DNS zone availability",
        "operationId": "DnsZonePublic_CheckAvailability",
        "requestBody": {
          "$ref": "#/components/requestBodies/ZoneAvailabilityRequestModel"
        },
        "responses": {
          "200": {
            "description": "Returns the model determinining if the zone is available or not"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed checking the zone availability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{zoneId}/records": {
      "put": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Add DNS Record",
        "operationId": "DnsZonePublic_AddRecord",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID to which the record will be added.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDnsRecordModel"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The DNS record was successfuly added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsRecordModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DnsRecordModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding the DNS record. Model validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{zoneId}/records/{id}": {
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Update DNS Record",
        "operationId": "DnsZonePublic_UpdateRecord",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID that contains the record.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the DNS record that will be updated.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDnsRecordModel"
              }
            }
          },
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The DNS record was successfuly updated."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed updating the DNS record. Model validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone or DNS Record with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Delete DNS Record",
        "operationId": "DnsZonePublic_DeleteRecord",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID that contains the record.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the DNS record that will be deleted.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The DNS record was successfuly deleted."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the DNS Record. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone or DNS Record with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{id}/recheckdns": {
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Recheck DNS Configuration",
        "operationId": "DnsZonePublic_RecheckDNS",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID that will be checked",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DNS Zone object that is being rechecked."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the DNS Zone. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{id}/dismissnameservercheck": {
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Dismiss DNS Configuration Notice",
        "operationId": "DnsZonePublic_DismissNameserverCheck",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Dismisses the nameserver check",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The DNS Zone object that is being rechecked."
          },
          "400": {
            "x-nullable": false,
            "description": "Failed deleting the DNS Zone. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/dnszone/{zoneId}/import": {
      "post": {
        "tags": [
          "DNS Zone"
        ],
        "summary": "Import DNS Records",
        "operationId": "DnsZonePublic_Import",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "required": true,
            "description": "The DNS Zone ID that should import the data.",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The import operation has finished successfuly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneImportResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DnsZoneImportResultModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed importing data. See error response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The DNS Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIDns",
              "SubuserDns",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "List Pull Zones",
        "operationId": "PullZonePublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 0
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search term that will be used to filter the results",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCertificate",
            "in": "query",
            "description": "Determines if the result hostnames should contain the SSL certificate",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of all the pull zones on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfPullZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfPullZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Pull Zone",
        "operationId": "PullZonePublic_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullZoneAddModel"
              }
            }
          },
          "description": "The Pull Zone that will be added",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "The Pull Zone was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding Pull Zone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Get Pull Zone",
        "operationId": "PullZonePublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that should be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "includeCertificate",
            "in": "query",
            "description": "Determines if the result hostnames should contain the SSL certificate",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The Pull Zone with the requested ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PullZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Update Pull Zone",
        "operationId": "PullZonePublic_UpdatePullZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that should be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullZoneSettingsModel"
              }
            }
          },
          "description": "The Pull Zone update configuration",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The Pull Zone was successfuly updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PullZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PullZoneModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed configuring the Storage Zone. Model validation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Delete Pull Zone",
        "operationId": "PullZonePublic_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that should be deleted",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Pull Zone was successfuly deleted"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/edgerules/{edgeRuleId}": {
      "delete": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Delete Edge Rule",
        "operationId": "PullZonePublic_DeleteEdgeRule",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that contains the Edge Rule",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "edgeRuleId",
            "in": "path",
            "required": true,
            "description": "The ID of the Edge Rule that should be deleted",
            "x-nullable": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Edge Rule was successfuly deleted"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone or Edge Rule with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/edgerules/addOrUpdate": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add/Update Edge Rule",
        "operationId": "PullZonePublic_AddEdgeRule",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone where the Edge Rule will be created",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EdgeRuleV2Model"
              }
            }
          },
          "description": "The Edge Rule that will be added",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "description": "The Edge Rule was successfuly added"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/edgerules/{edgeRuleId}/setEdgeRuleEnabled": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Set Edge Rule Enabled",
        "operationId": "PullZonePublic_SetEdgeRuleEnabled",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that contains the Edge Rule",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "edgeRuleId",
            "in": "path",
            "required": true,
            "description": "The ID of the Edge Rule that should be updated",
            "x-nullable": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToggleRequestModel"
              }
            }
          },
          "description": "The toggle switch model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The Edge Rule was successfuly updated"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed configuring the Edge Rule. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone or Edge Rule with the requested ID does not exist."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/originshield/queuestatistics": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Get Origin Shield Qeue Statistics",
        "operationId": "PullZonePublic_OriginShieldConcurrencyStatistics",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "(Optional) If set, the statistics will be only returned for the given Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "(Optional) If true, the statistics data will be returned in hourly groupping.",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The statistics data for the passed parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OriginShieldConcurrencyStatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OriginShieldConcurrencyStatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/safehop/statistics": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Get SafeHop Statistics",
        "operationId": "PullZonePublic_SafeHopStatistics",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "(Optional) If set, the statistics will be only returned for the given Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "(Optional) If true, the statistics data will be returned in hourly groupping.",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The statistics data for the passed parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafeHopStatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SafeHopStatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{pullZoneId}/optimizer/statistics": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Get Optimizer Statistics",
        "operationId": "PullZonePublic_OptimizerStatistics",
        "parameters": [
          {
            "name": "pullZoneId",
            "in": "path",
            "required": true,
            "description": "(Optional) If set, the statistics will be only returned for the given Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "(Optional) If true, the statistics data will be returned in hourly groupping.",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The statistics data for the passed parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizerStatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OptimizerStatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/loadFreeCertificate": {
      "get": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Load Free Certificate",
        "operationId": "PullZonePublic_LoadFreeCertificate",
        "parameters": [
          {
            "name": "hostname",
            "in": "query",
            "required": true,
            "description": "The hostame that the certificate will be loaded for",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The certificate was successfuly loaded"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed configuring the certificate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The hostname was not found in the account"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/purgeCache": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Purge Cache",
        "operationId": "PullZonePublic_PurgeCachePostByTag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Pull Zone that should be cleared",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PullZonePurgeModel"
              }
            }
          },
          "description": "The ID of the Pull Zone that should be cleared",
          "x-nullable": true
        },
        "responses": {
          "204": {
            "description": "The cache was successfuly purged"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/checkavailability": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Check the pull zone availability",
        "operationId": "PullZonePublic_CheckAvailability",
        "requestBody": {
          "$ref": "#/components/requestBodies/ZoneAvailabilityRequestModel"
        },
        "responses": {
          "200": {
            "description": "Returns the model determinining if the zone is available or not"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed checking the zone availability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/addCertificate": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Custom Certificate",
        "operationId": "PullZonePublic_AddCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCertificateRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The certificate was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding the certificate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/removeCertificate": {
      "delete": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Remove Certificate",
        "operationId": "PullZonePublic_RemoveCertificate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCertificateRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The certificate was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed removing certificate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/addHostname": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Custom Hostname",
        "operationId": "PullZonePublic_AddHostname",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddHostnameRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The hostname was successfuly added"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/removeHostname": {
      "delete": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Remove Custom Hostname",
        "operationId": "PullZonePublic_RemoveHostname",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveHostnameRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The hostname was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed removing hostname",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/setForceSSL": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Set Force SSL",
        "operationId": "PullZonePublic_SetForceSSL",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForceSSLRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "Force SSL was successfully updated"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to configure Force SSL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/resetSecurityKey": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Reset Token Key",
        "operationId": "PullZonePublic_ResetSecurityKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The key was successfuly reset"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to reset the security key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/addAllowedReferrer": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Allowed Referer",
        "operationId": "PullZonePublic_AddAllowedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddAllowedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The allowed referer was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to configure allowed referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/removeAllowedReferrer": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Remove Allowed Referer",
        "operationId": "PullZonePublic_RemoveAllowedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RemoveAllowedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The allowed referer was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove allowed referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/addBlockedReferrer": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Blocked Referer",
        "operationId": "PullZonePublic_AddBlockedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddBlockedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The blocked referer was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to configure blocked referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/removeBlockedReferrer": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Remove Blocked Referer",
        "operationId": "PullZonePublic_RemoveBlockedReferrer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RemoveAllowedReferrerRequestModel"
        },
        "responses": {
          "204": {
            "description": "The blocked referer was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove blocked referer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/addBlockedIp": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Add Blocked IP",
        "operationId": "PullZonePublic_AddBlockedIp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBlockedIpRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The blocked IP was successfuly added"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to configure blocked IP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/pullzone/{id}/removeBlockedIp": {
      "post": {
        "tags": [
          "Pull Zone"
        ],
        "summary": "Remove Blocked IP",
        "operationId": "PullZonePublic_RemoveBlockedIp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveBlockedIpRequestModel"
              }
            }
          },
          "description": "Request model",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The blocked IP was successfuly removed"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed to remove blocked IP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Pull Zone with the requested ID was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/purge": {
      "post": {
        "tags": [
          "Purge"
        ],
        "summary": "Purge URL",
        "operationId": "PurgePublic_IndexPost",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "description": "The URL that will be purged from cache.",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "(Optional) Determines if the call should wait for the purge logic to complete",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The purge request was successfully processed."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "InternalApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Purge"
        ],
        "summary": "Purge URL",
        "operationId": "PurgePublic_Index",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": true,
            "description": "The URL that will be purged from cache.",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerName",
            "in": "query",
            "description": "(Optional) The header name that will be sent as part of the purge request. Only use this with advanced caching options.",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headerValue",
            "in": "query",
            "description": "(Optional) The header value that will be sent as part of the purge request. Only use this with advanced caching options.",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "async",
            "in": "query",
            "description": "(Optional) Determines if the call should wait for the purge logic to complete",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The purge request was successfully processed."
          },
          "400": {
            "x-nullable": false,
            "description": "Purging failed. The URL was not a valid Bunny CDN URL.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "InternalApi",
              "SubuserAPIPullZones",
              "SubuserPullZones",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/statistics": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Get Statistics",
        "operationId": "StatisticsPublic_Index",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "pullZone",
            "in": "query",
            "description": "(Optional) If set, the statistics will be only returned for the given Pull Zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": -1
            }
          },
          {
            "name": "serverZoneId",
            "in": "query",
            "description": "(Optional) If set, the statistics will be only returned for the given region ID",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": -1
            }
          },
          {
            "name": "loadErrors",
            "in": "query",
            "description": "(Optional) If set, the respose will contain the non-2xx response",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "hourly",
            "in": "query",
            "description": "(Optional) If true, the statistics data will be returned in hourly groupping.",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The statistics data for the passed parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStatistics",
              "SubuserStatistics",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone": {
      "get": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "List Storage Zones",
        "operationId": "StorageZonePublic_Index",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647,
              "default": 0
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 5,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "x-nullable": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "The search term that will be used to filter the results",
            "x-nullable": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of storage zones on the account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfStorageZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaginationListModelOfStorageZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Add Storage Zone",
        "operationId": "StorageZonePublic_Add",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageZoneModelAdd"
              }
            }
          },
          "description": "The storage zone that will be added",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "201": {
            "x-nullable": false,
            "description": "The storage zone that was added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StorageZoneModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed adding the Storage Zone. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/checkavailability": {
      "post": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Check the storage zone availability",
        "operationId": "StorageZonePublic_CheckAvailability",
        "requestBody": {
          "$ref": "#/components/requestBodies/ZoneAvailabilityRequestModel"
        },
        "responses": {
          "200": {
            "description": "Returns the model determinining if the zone is available or not"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed checking the zone availability",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/{id}": {
      "get": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Get Storage Zone",
        "operationId": "StorageZonePublic_Index2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Storage Zone that should be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The Storage Zone with the given ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageZoneModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/StorageZoneModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Update Storage Zone",
        "operationId": "StorageZonePublic_Update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the storage zone that should be updated",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StorageZoneSettingsModel"
              }
            }
          },
          "description": "The configuration that should be applied to the storage zone",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "204": {
            "description": "The storage zone was successfuly updated"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed configuring the Storage Zone. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Delete Storage Zone",
        "operationId": "StorageZonePublic_Delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The Storage Zone ID that should be deleted",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Storage Zone was successfuly deleted"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/{id}/connections": {
      "get": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Get Storage Zone Connections",
        "operationId": "StorageZonePublic_Connections",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the Storage Zone that should be returned",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of connections linked to this storage zone",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageZonePullZoneConnection"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageZonePullZoneConnection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/{id}/statistics": {
      "get": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Get Storage Zone Statistics",
        "operationId": "StorageZonePublic_StorageZoneStatistics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the storage zone",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.",
            "x-nullable": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The statistics data for the passed parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafeHopStatisticsModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SafeHopStatisticsModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/{id}/resetPassword": {
      "post": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Reset Password",
        "operationId": "StorageZonePublic_ResetPassword",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the storage zone that should have the password reset",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The password has been successfuly changed"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/storagezone/resetReadOnlyPassword": {
      "post": {
        "tags": [
          "Storage Zone"
        ],
        "summary": "Reset Read-Only Password",
        "operationId": "StorageZonePublic_ResetReadOnlyPassword",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "description": "The ID of the storage zone that should have the read-only password reset",
            "x-nullable": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The read-only password has been successfuly changed."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "404": {
            "description": "The Storage Zone with the requested ID does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "SubuserAPIStorage",
              "SubuserStorage",
              "SubuserManage",
              "SubuserAPIManage"
            ]
          }
        ]
      }
    },
    "/user/homefeed": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Home Feed",
        "operationId": "UserPublic_HomeFeed",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Returns the home feed for the currently logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewPageFeed"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewPageFeed"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/notifications": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Notifications",
        "operationId": "UserPublic_NotificationsList",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of all the notification for the currently logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User Details",
        "operationId": "UserPublic_Index",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The details about the currently authorized user account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update User Details",
        "operationId": "UserPublic_UpdateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateModel"
              }
            }
          },
          "description": "The configuration that should be applied to account",
          "required": true,
          "x-nullable": false
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The details about the currently authorized user account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed updating the user. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/resend-email-confirmation": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Resend Email Confirmation",
        "operationId": "UserPublic_ResendEmailConfirmation",
        "responses": {
          "204": {
            "description": "The email confirmation was successfuly sent"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/resetApiKey": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset API Key",
        "operationId": "UserPublic_ResetApiKey",
        "responses": {
          "204": {
            "description": "The key was successfuly reset"
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/closeaccount/reasons-list": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List the close account reasons",
        "operationId": "UserPublic_ListCloseAccountReasons",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The key was successfuly reset",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCloseReason"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountCloseReason"
                  }
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Failed updating the user. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/closeaccount": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Close the account",
        "operationId": "UserPublic_CloseAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloseAccountRequestModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "204": {
            "description": "The key was successfuly reset"
          },
          "400": {
            "x-nullable": false,
            "description": "Failed updating the user. Model validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorData"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/dpa": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get DPA Details",
        "operationId": "UserPublic_Dpa",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The details about the currently authorized user account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/UserModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/dpa/accept": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Accept DPA",
        "operationId": "UserPublic_DpaAccept",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The DPA was successfuly accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpaAcceptResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DpaAcceptResult"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "The DPA accept failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DpaAcceptResult"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DpaAcceptResult"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/dpa/pdfhtml": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get DPA Details (HTML)",
        "operationId": "UserPublic_DpaPdfHhtml",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The HTML version of the DPA",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/setNotificationsOpened": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Set Notifications Opened",
        "operationId": "UserPublic_SetNotificationsOpened",
        "responses": {
          "200": {
            "description": "The notifications were set as opened."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/whatsnew": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get What's New Items",
        "operationId": "UserPublic_WhatsNew",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The list of What's new Items for the currently logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsNewModel"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WhatsNewModel"
                  }
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/whatsnew/reset": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset What's New",
        "operationId": "UserPublic_WhatsNewReset",
        "responses": {
          "200": {
            "description": "The What's New list was set as opened and the count was reset."
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/2fa/generate-verification": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Generate 2FA Verification",
        "operationId": "UserPublic_TwoFactorGenerateVerification",
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "The two factor code details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "UserApi",
              "Subuser"
            ]
          }
        ]
      }
    },
    "/user/2fa/disable": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Disable 2FA",
        "operationId": "UserPublic_TwoFactorDisable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorDisableRequestModel"
              }
            }
          },
          "x-nullable": true
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Two factor authentication was successfuly disabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Disabling two factor authentication failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "Agent",
              "Admin",
              "Subuser",
              "UserApi"
            ]
          }
        ]
      }
    },
    "/user/2fa/enable": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Enable 2FA",
        "operationId": "UserPublic_TwoFactorEnable",
        "requestBody": {
          "$ref": "#/components/requestBodies/TwoFactorVerifyModel"
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Two factor authentication was successfuly enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Two factor authentication was not successfuly enabled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorEnableResultModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "Agent",
              "Admin",
              "Subuser",
              "UserApi"
            ]
          }
        ]
      }
    },
    "/user/2fa/verify": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Verify 2FA Code",
        "operationId": "UserPublic_TwoFactorVerify",
        "requestBody": {
          "$ref": "#/components/requestBodies/TwoFactorVerifyModel"
        },
        "responses": {
          "200": {
            "x-nullable": false,
            "description": "Two factor authentication verification was successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorVerifyResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorVerifyResultModel"
                }
              }
            }
          },
          "400": {
            "x-nullable": false,
            "description": "Two factor authentication verification was not successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorVerifyResultModel"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorVerifyResultModel"
                }
              }
            }
          },
          "401": {
            "description": "The request authorization failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "AccessKey": [
              "User",
              "Agent",
              "Admin",
              "Subuser",
              "UserApi"
            ]
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Abuse Case"
    },
    {
      "name": "Search"
    },
    {
      "name": "Countries"
    },
    {
      "name": "Billing"
    },
    {
      "name": "Compute"
    },
    {
      "name": "API Keys"
    },
    {
      "name": "Support"
    },
    {
      "name": "DRM Certificate"
    },
    {
      "name": "Region"
    },
    {
      "name": "Stream Video Library"
    },
    {
      "name": "DNS Zone"
    },
    {
      "name": "Pull Zone"
    },
    {
      "name": "Purge"
    },
    {
      "name": "Statistics"
    },
    {
      "name": "Storage Zone"
    },
    {
      "name": "User"
    }
  ],
  "servers": [
    {
      "url": "https://api.bunny.net"
    }
  ],
  "components": {
    "requestBodies": {
      "TwoFactorVerifyModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwoFactorVerifyModel"
            }
          }
        },
        "x-nullable": true
      },
      "PublishEdgeScriptModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PublishEdgeScriptModel"
            }
          }
        },
        "required": true,
        "x-nullable": false
      },
      "AddAllowedReferrerRequestModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddAllowedReferrerRequestModel"
            }
          }
        },
        "description": "Request model",
        "required": true,
        "x-nullable": false
      },
      "AddBlockedReferrerRequestModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AddBlockedReferrerRequestModel"
            }
          }
        },
        "description": "Request model",
        "required": true,
        "x-nullable": false
      },
      "RemoveAllowedReferrerRequestModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RemoveAllowedReferrerRequestModel"
            }
          }
        },
        "description": "Request model",
        "required": true,
        "x-nullable": false
      },
      "ZoneAvailabilityRequestModel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ZoneAvailabilityRequestModel"
            }
          }
        },
        "description": "The zone that will be checked",
        "required": true,
        "x-nullable": false
      }
    },
    "securitySchemes": {
      "AccessKey": {
        "type": "apiKey",
        "description": "API key passed through the AcessKey header",
        "name": "AccessKey",
        "in": "header"
      }
    },
    "schemas": {
      "PaginationListModelOfAbuseCaseModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbuseCaseModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "AbuseCaseModel": {
        "type": "object",
        "required": [
          "Id",
          "DateCreated",
          "DateUpdated",
          "Deadline",
          "PullZoneId",
          "Status"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "ActualUrl": {
            "type": "string"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "Deadline": {
            "type": "string",
            "format": "date-time"
          },
          "PullZoneId": {
            "type": "integer",
            "format": "int64"
          },
          "PullZoneName": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Status": {
            "description": "Determines if the Pull Zone is currently enabled, active and running",
            "allOf": [
              {
                "$ref": "#/components/schemas/AbuseCaseStatus"
              }
            ]
          },
          "Urls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbuseCaseUrlModel"
            }
          }
        }
      },
      "AbuseCaseStatus": {
        "type": "integer",
        "description": "0 = Pending\n1 = Reviewing\n2 = Resolved\n3 = AccessBlocked\n4 = Appealed",
        "x-enumNames": [
          "Pending",
          "Reviewing",
          "Resolved",
          "AccessBlocked",
          "Appealed"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4
        ]
      },
      "AbuseCaseUrlModel": {
        "type": "object",
        "required": [
          "Status"
        ],
        "properties": {
          "Url": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/AbuseUrlStatus"
          }
        }
      },
      "AbuseUrlStatus": {
        "type": "integer",
        "description": "0 = NotResolved\n1 = Resolved\n2 = Unknown",
        "x-enumNames": [
          "NotResolved",
          "Resolved",
          "Unknown"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "JwtAuthResultModel": {
        "type": "object",
        "required": [
          "AuthStatus"
        ],
        "properties": {
          "Token": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "AuthStatus": {
            "$ref": "#/components/schemas/AuthStatus"
          }
        }
      },
      "AuthStatus": {
        "type": "integer",
        "description": "0 = Failure\n1 = Authenticated\n2 = TwoFactorRequired\n3 = LockedOut",
        "x-enumNames": [
          "Failure",
          "Authenticated",
          "TwoFactorRequired",
          "LockedOut"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "JwtTwoFactorModel": {
        "type": "object",
        "required": [
          "Code"
        ],
        "properties": {
          "Code": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "SearchResultsModel": {
        "type": "object",
        "required": [
          "Total",
          "From",
          "Size"
        ],
        "properties": {
          "Query": {
            "type": "string",
            "description": "The input query for the search request"
          },
          "Total": {
            "type": "integer",
            "description": "The total number of search results found matching the query",
            "format": "int32"
          },
          "From": {
            "type": "integer",
            "description": "The number of results skipped in the search query",
            "format": "int32"
          },
          "Size": {
            "type": "integer",
            "description": "The size of the result set",
            "format": "int32"
          },
          "SearchResults": {
            "type": "array",
            "description": "The list of search results found for the query",
            "items": {
              "$ref": "#/components/schemas/SearchResultItemModel"
            }
          }
        }
      },
      "SearchResultItemModel": {
        "type": "object",
        "required": [
          "Id"
        ],
        "properties": {
          "Type": {
            "type": "string",
            "description": "The type of the search result item. Possible values: cdn, storage, dns, script, stream"
          },
          "Id": {
            "type": "integer",
            "description": "The ID of the search result item linked object",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "The name of the object found"
          }
        }
      },
      "EdgeScriptModel": {
        "type": "object",
        "required": [
          "Id",
          "LastModified",
          "ScriptType",
          "CurrentReleaseId",
          "Deleted"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "LastModified": {
            "type": "string",
            "format": "date-time"
          },
          "ScriptType": {
            "$ref": "#/components/schemas/EdgeScriptTypes"
          },
          "CurrentReleaseId": {
            "type": "integer",
            "format": "int64"
          },
          "EdgeScriptVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeScriptVariableModel"
            }
          },
          "Deleted": {
            "type": "boolean"
          }
        }
      },
      "EdgeScriptTypes": {
        "type": "integer",
        "description": "0 = DNS\n1 = CDN",
        "x-enumNames": [
          "DNS",
          "CDN"
        ],
        "enum": [
          0,
          1
        ]
      },
      "EdgeScriptVariableModel": {
        "type": "object",
        "required": [
          "Id",
          "Required"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "Required": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string"
          }
        }
      },
      "BillingModel": {
        "type": "object",
        "required": [
          "Balance",
          "ThisMonthCharges",
          "MonthlyChargesStorage",
          "MonthlyChargesEUTraffic",
          "MonthlyChargesUSTraffic",
          "MonthlyChargesASIATraffic",
          "MonthlyChargesAFTraffic",
          "MonthlyChargesSATraffic",
          "MonthlyBandwidthUsed",
          "MonthlyChargesOptimizer",
          "MonthlyChargesExtraPullZones",
          "BillingEnabled",
          "MinimumMonthlyCommit",
          "AutomaticPaymentAmount",
          "AutomaticRechargeTreshold",
          "AutomaticRechargeEnabled",
          "AutomaticPaymentFailureCount",
          "VATRate",
          "EUUSDiscount",
          "SouthAmericaDiscount",
          "AfricaDiscount",
          "AsiaOceaniaDiscount",
          "LastRechargeBalance"
        ],
        "properties": {
          "Balance": {
            "type": "number",
            "description": "The current account balance",
            "format": "double"
          },
          "ThisMonthCharges": {
            "type": "number",
            "description": "The current account charges of the running month",
            "format": "double"
          },
          "BillingRecords": {
            "type": "array",
            "description": "The list of billing records for this account",
            "items": {
              "$ref": "#/components/schemas/BillingRecordModel"
            }
          },
          "MonthlyChargesStorage": {
            "type": "number",
            "description": "The total charges this month paid for Edge Storage",
            "format": "double"
          },
          "MonthlyChargesEUTraffic": {
            "type": "number",
            "description": "The total charges this month paid for European traffic",
            "format": "double"
          },
          "MonthlyChargesUSTraffic": {
            "type": "number",
            "description": "The total charges this month paid for North American traffic",
            "format": "double"
          },
          "MonthlyChargesASIATraffic": {
            "type": "number",
            "description": "The total charges this month paid for Asian and Oceanian traffic",
            "format": "double"
          },
          "MonthlyChargesAFTraffic": {
            "type": "number",
            "description": "The total charges this month paid for African traffic",
            "format": "double"
          },
          "MonthlyChargesSATraffic": {
            "type": "number",
            "description": "The total charges this month paid for South American traffic",
            "format": "double"
          },
          "BillingHistoryChart": {
            "type": "object",
            "description": "The constructed billing history chart data",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "MonthlyBandwidthUsed": {
            "type": "integer",
            "description": "The total bandwidth used by the account during this month.",
            "format": "int64"
          },
          "MonthlyChargesOptimizer": {
            "type": "number",
            "description": "The monthly charges caused by optimizer.",
            "format": "double"
          },
          "MonthlyChargesExtraPullZones": {
            "type": "number",
            "description": "The monthly charges caused by extra pull zones.",
            "format": "double"
          },
          "BillingEnabled": {
            "type": "boolean",
            "description": "Determines if billing is currently enabled for this user."
          },
          "MinimumMonthlyCommit": {
            "type": "number",
            "description": "Determines the minimim monthly commit of the user.",
            "format": "double"
          },
          "AutomaticPaymentImageUrl": {
            "type": "string",
            "description": "If an automatic payment method is configured, this will contain the image url of the payment method"
          },
          "AutomaticPaymentCardType": {
            "type": "string",
            "description": "If an automatic payment method is configured with a credit card, this will contain the name of the payment credit card"
          },
          "AutomaticPaymentIdentifier": {
            "type": "string",
            "description": "If an automatic payment method is configured, this will contain the identifier of the payment method"
          },
          "AutomaticPaymentAmount": {
            "type": "number",
            "description": "If an automatic payments are configured, this contains the payment amount that will be made during an automatic recharge",
            "format": "decimal"
          },
          "AutomaticRechargeTreshold": {
            "type": "number",
            "description": "If an automatic payments are configured, this contains the account balance amount that will trigger an automatic recharge",
            "format": "decimal"
          },
          "AutomaticRechargeEnabled": {
            "type": "boolean",
            "description": "Determines if automatic recharge is currently enabled."
          },
          "AutomaticPaymentFailureCount": {
            "type": "integer",
            "description": "Determines the number of failed automatic recharges that the system made since the last successful payment.",
            "format": "int32"
          },
          "SavedPaymentMethods": {
            "type": "array",
            "description": "Contains the list of saved payment methods on the user's account",
            "items": {
              "$ref": "#/components/schemas/BillingSavedPaymentMethod"
            }
          },
          "VATRate": {
            "type": "number",
            "description": "The VAT rate for the user's account.",
            "format": "decimal"
          },
          "EUUSDiscount": {
            "type": "integer",
            "description": "The account wide pricing discount for EU and US region.",
            "format": "int32"
          },
          "SouthAmericaDiscount": {
            "type": "integer",
            "description": "The account wide pricing discount for South America region.",
            "format": "int32"
          },
          "AfricaDiscount": {
            "type": "integer",
            "description": "The account wide pricing discount for Africa region.",
            "format": "int32"
          },
          "AsiaOceaniaDiscount": {
            "type": "integer",
            "description": "The account wide pricing discount for Asia & Oceania region.",
            "format": "int32"
          },
          "LastRechargeBalance": {
            "type": "number",
            "description": "Last recharge amount balanec",
            "format": "double"
          }
        }
      },
      "BillingRecordModel": {
        "type": "object",
        "required": [
          "Id",
          "Amount",
          "Timestamp",
          "Type",
          "InvoiceAvailable"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ID of the billing record",
            "format": "int64"
          },
          "PaymentId": {
            "type": "string",
            "description": "The external ID of the payment"
          },
          "Amount": {
            "type": "number",
            "description": "The amount linked to the record model",
            "format": "double"
          },
          "Payer": {
            "type": "string",
            "description": "The payer reference that sent the payment"
          },
          "Timestamp": {
            "type": "string",
            "description": "The date and time when the billing record was created",
            "format": "date-time"
          },
          "Type": {
            "description": "The type of the billing record. PayPal = 0, Bitcoin = 1, CreditCard = 2, MonthlyUsage = 3, Refund = 4, CouponCode = 5, BankTransfer = 6, AffiliateCredits = 7",
            "allOf": [
              {
                "$ref": "#/components/schemas/BillingRecordType"
              }
            ]
          },
          "InvoiceAvailable": {
            "type": "boolean",
            "description": "Determines if an invoice is available"
          },
          "DocumentDownloadUrl": {
            "type": "string",
            "description": "The URL where the invoice or document can be downloaded. Null if this is not available."
          }
        }
      },
      "BillingRecordType": {
        "type": "integer",
        "description": "0 = PayPal\n1 = Bitcoin\n2 = CreditCard\n3 = MonthlyUsage\n4 = Refund\n5 = CouponCode\n6 = BankTransfer\n7 = AffiliateCredits",
        "x-enumNames": [
          "PayPal",
          "Bitcoin",
          "CreditCard",
          "MonthlyUsage",
          "Refund",
          "CouponCode",
          "BankTransfer",
          "AffiliateCredits"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ]
      },
      "BillingSavedPaymentMethod": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string"
          },
          "ImageUrl": {
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string"
          },
          "LastFour": {
            "type": "string"
          },
          "Email": {
            "type": "string"
          }
        }
      },
      "ConfigureRechargeUpdateModel": {
        "type": "object",
        "properties": {
          "AutoRechargeEnabled": {
            "type": "boolean",
            "description": "Sets the payment amount that will be made during an automatic recharge"
          },
          "PaymentMethodToken": {
            "type": "string",
            "description": "Determines the payment method token for the payment instrument that will be used for automatic recharges"
          },
          "PaymentAmount": {
            "type": "number",
            "description": "Sets the payment amount that will be made during an automatic recharge",
            "format": "decimal",
            "maximum": 2000,
            "minimum": 10
          },
          "RechargeTreshold": {
            "type": "number",
            "description": "Sets the account balance amount that will trigger an automatic recharge",
            "format": "decimal",
            "maximum": 2000,
            "minimum": 2
          }
        }
      },
      "CheckoutRequestModel": {
        "type": "object",
        "required": [
          "RechargeAmount",
          "PaymentAmount",
          "Nonce"
        ],
        "properties": {
          "RechargeAmount": {
            "type": "number",
            "format": "decimal",
            "maximum": 10000,
            "minimum": 10
          },
          "PaymentAmount": {
            "type": "number",
            "format": "decimal",
            "maximum": 10000,
            "minimum": 10
          },
          "PaymentRequestId": {
            "type": "integer",
            "format": "int64"
          },
          "Nonce": {
            "type": "string",
            "minLength": 2
          }
        }
      },
      "PaymentAuthorization": {
        "type": "object",
        "properties": {
          "AuthorizationKey": {
            "type": "string"
          }
        }
      },
      "BillingAffiliateDetailsModel": {
        "type": "object",
        "required": [
          "AffiliateBalance"
        ],
        "properties": {
          "AffiliateBalance": {
            "type": "number",
            "description": "The amount of affiliate credits on the account",
            "format": "decimal"
          },
          "AffiliateUrl": {
            "type": "string",
            "description": "The affiliate URL for the currently authenticated user"
          },
          "AffiliateClicksChart": {
            "type": "object",
            "description": "The constructed affiliate click history chart data",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "AffiliateSignupsChart": {
            "type": "object",
            "description": "The constructed affiliate signup history chart data",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "BillingAffiliateClaimResponseModel": {
        "type": "object",
        "required": [
          "AmountClaimed"
        ],
        "properties": {
          "AmountClaimed": {
            "type": "number",
            "description": "The amount of affiliate credits that was claimed",
            "format": "decimal"
          }
        }
      },
      "CoinifyExchangeRateModel": {
        "type": "object",
        "required": [
          "ExchangeRate"
        ],
        "properties": {
          "ExchangeRate": {
            "type": "number",
            "description": "The current exchange rate from Coinify ",
            "format": "double"
          }
        }
      },
      "BillingSummaryItem": {
        "type": "object",
        "required": [
          "PullZoneId",
          "MonthlyUsage",
          "MonthlyBandwidthUsed"
        ],
        "properties": {
          "PullZoneId": {
            "type": "integer",
            "description": "The ID of the pull zone",
            "format": "int64"
          },
          "MonthlyUsage": {
            "type": "number",
            "description": "The total credit amount used in this month by the Pull Zone",
            "format": "decimal"
          },
          "MonthlyBandwidthUsed": {
            "type": "integer",
            "description": "The total monthly bandwidth used by the pull zone",
            "format": "int64"
          }
        }
      },
      "UserModel": {
        "type": "object",
        "required": [
          "ReceiveNotificationEmails",
          "ReceivePromotionalEmails",
          "Balance",
          "BillingFreeUntilDate",
          "DateJoined",
          "TrialBandwidthLimit",
          "TotalBandwidthUsed",
          "TwoFactorAuthenticationEnabled",
          "EmailVerified",
          "UnreadSupportTicketCount",
          "DpaAccepted",
          "DpaVersionAccepted",
          "DpaDateAccepted",
          "Suspended",
          "PaymentsDisabled",
          "BillingType",
          "IsSsoAccount"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "description": "The Id of the user"
          },
          "Email": {
            "type": "string",
            "description": "The email of the user"
          },
          "BillingEmail": {
            "type": "string",
            "description": "The email where the invoices and billing messages will be sent"
          },
          "FirstName": {
            "type": "string",
            "description": "The first name of the user"
          },
          "LastName": {
            "type": "string",
            "description": "The last name of the user"
          },
          "StreetAddress": {
            "type": "string",
            "description": "The street address of the user"
          },
          "City": {
            "type": "string",
            "description": "The address zip code of the user"
          },
          "ZipCode": {
            "type": "string",
            "description": "The address zip code of the user"
          },
          "Country": {
            "type": "string",
            "description": "The Alpha2 country code that the user is from"
          },
          "CompanyName": {
            "type": "string",
            "description": "The company name billing detail of the account"
          },
          "VATNumber": {
            "type": "string",
            "description": "The billing VAT number of the account"
          },
          "ReceiveNotificationEmails": {
            "type": "boolean",
            "description": "Determines if the account should receive notification emails from bunny.net"
          },
          "ReceivePromotionalEmails": {
            "type": "boolean",
            "description": "Determines if the account should receive promotional emails from bunny.net"
          },
          "Balance": {
            "type": "number",
            "description": "The remaining balance on the user's account",
            "format": "double"
          },
          "BillingFreeUntilDate": {
            "type": "string",
            "description": "The end date of the account's free trial. If this is in the past, the free trial has expired.",
            "format": "date-time"
          },
          "DateJoined": {
            "type": "string",
            "description": "The date when the user joined bunny.net",
            "format": "date-time"
          },
          "TrialBandwidthLimit": {
            "type": "integer",
            "description": "The total free trial bandwidth limit for this account",
            "format": "int64"
          },
          "TotalBandwidthUsed": {
            "type": "integer",
            "description": "The total bandwidth used by the account.",
            "format": "int64"
          },
          "TwoFactorAuthenticationEnabled": {
            "type": "boolean",
            "description": "Determines if the account has 2FA enabled"
          },
          "EmailVerified": {
            "type": "boolean",
            "description": "Determines if the account's email has been successfuly verified"
          },
          "UnreadSupportTicketCount": {
            "type": "integer",
            "description": "Returns the number of unead tickets on the user's account",
            "format": "int32"
          },
          "DpaAccepted": {
            "type": "boolean",
            "description": "Determines if the DPA was accepted by the user or not"
          },
          "DpaVersionAccepted": {
            "type": "integer",
            "description": "Determines which version of the DPA was accepted",
            "format": "int32"
          },
          "DpaDateAccepted": {
            "type": "string",
            "description": "Determines the date on which the DPA was accepted",
            "format": "date-time"
          },
          "Roles": {
            "type": "array",
            "description": "Determines the roles that the user belongs to",
            "items": {
              "type": "string"
            }
          },
          "Suspended": {
            "type": "boolean",
            "description": "Determines if the user's account is suspended"
          },
          "EnabledPaymentTypes": {
            "type": "array",
            "description": "Contains the list of available payment types for this account",
            "items": {
              "type": "string"
            }
          },
          "PaymentsDisabled": {
            "type": "boolean",
            "description": "Determines if the payments are disabled on this account"
          },
          "FeatureFlags": {
            "type": "array",
            "description": "The list of features that the user has enabled",
            "items": {
              "type": "string"
            }
          },
          "BillingType": {
            "description": "The current billing type of the user",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserModelBillingType"
              }
            ]
          },
          "IsSsoAccount": {
            "type": "boolean",
            "description": "Determines whether the user used a Single Sign On account"
          }
        }
      },
      "UserModelBillingType": {
        "type": "integer",
        "description": "0 = FreeTrial\n1 = PayAsYouGo\n2 = PostPaidPayAsYouGo\n3 = MonthlyPlan",
        "x-enumNames": [
          "FreeTrial",
          "PayAsYouGo",
          "PostPaidPayAsYouGo",
          "MonthlyPlan"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "ApiErrorData": {
        "type": "object",
        "properties": {
          "ErrorKey": {
            "type": "string"
          },
          "Field": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          }
        }
      },
      "PaginationListModelOfEdgeScriptModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeScriptModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "PaginationListModelOfEdgeScriptReleaseModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeScriptReleaseModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "EdgeScriptReleaseModel": {
        "type": "object",
        "required": [
          "Id",
          "Deleted",
          "Status",
          "DateReleased",
          "DatePublished"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Deleted": {
            "type": "boolean"
          },
          "Code": {
            "type": "string"
          },
          "Uuid": {
            "type": "string"
          },
          "Note": {
            "type": "string"
          },
          "Author": {
            "type": "string"
          },
          "AuthorEmail": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EdgeScriptReleaseStatus"
          },
          "DateReleased": {
            "type": "string",
            "format": "date-time"
          },
          "DatePublished": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EdgeScriptReleaseStatus": {
        "type": "integer",
        "description": "0 = Archived\n1 = Live",
        "x-enumNames": [
          "Archived",
          "Live"
        ],
        "enum": [
          0,
          1
        ]
      },
      "PublishEdgeScriptModel": {
        "type": "object",
        "properties": {
          "Note": {
            "type": "string"
          }
        }
      },
      "UpdateEdgeScriptCodeModel": {
        "type": "object",
        "properties": {
          "Code": {
            "type": "string"
          }
        }
      },
      "UpdateEdgeScriptModel": {
        "type": "object",
        "required": [
          "ScriptType"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "maxLength": 100
          },
          "ScriptType": {
            "$ref": "#/components/schemas/EdgeScriptTypes"
          }
        }
      },
      "AddEdgeScriptVariableModel": {
        "type": "object",
        "required": [
          "Name",
          "Required"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1
          },
          "Required": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string",
            "maxLength": 256
          }
        }
      },
      "UpdateEdgeScriptVariableModel": {
        "type": "object",
        "properties": {
          "DefaultValue": {
            "type": "string",
            "maxLength": 256
          },
          "Required": {
            "type": "boolean"
          }
        }
      },
      "PaginationListModelOfApiKeyModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKeyModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "ApiKeyModel": {
        "type": "object",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Key": {
            "type": "string"
          },
          "Roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PaginationListModelOfSupportTicketModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "SupportTicketModel": {
        "type": "object",
        "required": [
          "Id",
          "CreatedAt",
          "LastUpdatedAt"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Status": {
            "type": "string"
          },
          "Comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketCommentModel"
            }
          },
          "Subject": {
            "type": "string"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "LastUpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SupportTicketCommentModel": {
        "type": "object",
        "required": [
          "Id",
          "Public",
          "AuthorId",
          "CreatedAt"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Type": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "HtmlBody": {
            "type": "string"
          },
          "Public": {
            "type": "boolean"
          },
          "AuthorId": {
            "type": "integer",
            "format": "int64"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "User": {
            "$ref": "#/components/schemas/SupportTicketUserModel"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketAttachmentModel"
            }
          }
        }
      },
      "SupportTicketUserModel": {
        "type": "object",
        "required": [
          "Verified"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "ExternalId": {
            "type": "string"
          },
          "Alias": {
            "type": "string"
          },
          "Verified": {
            "type": "boolean"
          },
          "Signature": {
            "type": "string"
          },
          "Role": {
            "type": "string"
          },
          "PhotoUrl": {
            "type": "string"
          }
        }
      },
      "SupportTicketAttachmentModel": {
        "type": "object",
        "required": [
          "Size",
          "Id"
        ],
        "properties": {
          "ContentUrl": {
            "type": "string"
          },
          "ContentType": {
            "type": "string"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          },
          "Thumbnails": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "FileName": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SupportTicketReplyModel": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketUploadAttachmentModel"
            }
          }
        }
      },
      "SupportTicketUploadAttachmentModel": {
        "type": "object",
        "properties": {
          "Body": {
            "type": "string",
            "format": "byte"
          },
          "FileName": {
            "type": "string"
          },
          "ContentType": {
            "type": "string"
          }
        }
      },
      "SupportTicketCreateModel": {
        "type": "object",
        "properties": {
          "Subject": {
            "type": "string"
          },
          "LinkedPullZone": {
            "type": "integer",
            "format": "int64"
          },
          "LinkedVideoLibrary": {
            "type": "integer",
            "format": "int64"
          },
          "LinkedDnsZone": {
            "type": "integer",
            "format": "int64"
          },
          "Message": {
            "type": "string"
          },
          "LinkedStorageZone": {
            "type": "integer",
            "format": "int64"
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportTicketUploadAttachmentModel"
            }
          }
        }
      },
      "PaginationListModelOfDrmCertificateModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrmCertificateModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "DrmCertificateModel": {
        "type": "object",
        "required": [
          "Id",
          "ExpirationDate",
          "CertificateType",
          "DateModified",
          "DateCreated"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "PrivateKey": {
            "type": "string"
          },
          "SecretKey": {
            "type": "string"
          },
          "Certificate": {
            "type": "string"
          },
          "Provider": {
            "type": "string"
          },
          "ExpirationDate": {
            "type": "string",
            "format": "date-time"
          },
          "CertificateType": {
            "$ref": "#/components/schemas/CertificateType"
          },
          "DateModified": {
            "type": "string",
            "format": "date-time"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CertificateType": {
        "type": "integer",
        "description": "0 = FairPlay\n1 = Widevine",
        "x-enumNames": [
          "FairPlay",
          "Widevine"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ServerZone": {
        "type": "object",
        "required": [
          "Id",
          "Longitude",
          "PricePerByte",
          "PricePerByteOver50tb",
          "PricePerByteOver100tb",
          "PricePerByteOver500tb",
          "PricePerByteOver1000tb",
          "PricePerOptimizedRequest",
          "ResellerPricePerOptimizedRequest",
          "Latitude",
          "StatusMapLocationX",
          "StatusMapLocationY",
          "DisplayStatus",
          "MinimumCacheQuality",
          "IsPrimaryPoP",
          "IsRoutingGroupPrimary",
          "SplitCacheSize",
          "DisableStorageRouting",
          "AllowLatencyRouting"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          },
          "PricePerByte": {
            "type": "number",
            "format": "double"
          },
          "PricePerByteOver50tb": {
            "type": "number",
            "format": "double",
            "default": 0
          },
          "PricePerByteOver100tb": {
            "type": "number",
            "format": "double"
          },
          "PricePerByteOver500tb": {
            "type": "number",
            "format": "double"
          },
          "PricePerByteOver1000tb": {
            "type": "number",
            "format": "double"
          },
          "PricePerOptimizedRequest": {
            "type": "number",
            "format": "double"
          },
          "ResellerPricePerOptimizedRequest": {
            "type": "number",
            "format": "double"
          },
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "DisplayColor": {
            "type": "string"
          },
          "ZoneCode": {
            "type": "string"
          },
          "DnsRegion": {
            "type": "string"
          },
          "ContinentZoneCode": {
            "type": "string"
          },
          "StatusMapLocationX": {
            "type": "integer",
            "format": "int32"
          },
          "StatusMapLocationY": {
            "type": "integer",
            "format": "int32"
          },
          "AlternateLongitude": {
            "type": "number",
            "format": "double"
          },
          "AlternateLatitude": {
            "type": "number",
            "format": "double"
          },
          "AlternatePointsJson": {
            "type": "string"
          },
          "AlternatePointsBudgetJson": {
            "type": "string"
          },
          "DisplayStatus": {
            "type": "boolean"
          },
          "EdgeServers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeServer"
            }
          },
          "DnsServers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsServer"
            }
          },
          "CountryCode": {
            "type": "string"
          },
          "MinimumCacheQuality": {
            "type": "integer",
            "format": "int32"
          },
          "IsPrimaryPoP": {
            "type": "boolean"
          },
          "RoutingGroup": {
            "type": "string"
          },
          "IsRoutingGroupPrimary": {
            "type": "boolean"
          },
          "RoutableCountries": {
            "type": "string"
          },
          "VolumeRoutableCountries": {
            "type": "string"
          },
          "OverrideRoutableCountries": {
            "type": "string"
          },
          "OverrideVolumeRoutableCountries": {
            "type": "string"
          },
          "DisabledASNs": {
            "type": "string"
          },
          "DisabledVolumeASNs": {
            "type": "string"
          },
          "EnabledASNs": {
            "type": "string"
          },
          "EnabledVolumeASNs": {
            "type": "string"
          },
          "OverrideASNs": {
            "type": "string"
          },
          "SplitCacheSize": {
            "type": "integer",
            "format": "int32"
          },
          "EdgeStorageRoutePriorities": {
            "type": "string"
          },
          "DisableStorageRouting": {
            "type": "boolean"
          },
          "AcceptedFilters": {
            "type": "string"
          },
          "AllowLatencyRouting": {
            "type": "boolean"
          }
        }
      },
      "EdgeServer": {
        "type": "object",
        "required": [
          "Id",
          "Status",
          "WorkerCount",
          "LastManagementActivity",
          "LastPullZoneConfiguration",
          "MonitorTestId",
          "ServesBudgetZones",
          "ServesSmallFileZones",
          "ServesLiveStream",
          "MaximumNetworkMbitUsage",
          "MaximumCpuUsage",
          "MaximumRamUsage",
          "MaximumDiskIoWait",
          "CurrentDiskIoWait",
          "CurrentCpuUsage",
          "CurrentRamUsage",
          "CurrentNetworkMbitUsage",
          "CurrentRequestsPerSecond",
          "IsOriginServer",
          "RoutingWeight",
          "IsLoadBalancer",
          "ProxyCacheMinUses",
          "IsOriginShield",
          "EnableNewProxy",
          "VlanCount",
          "ServerGroupId",
          "UserNewClusters",
          "ServePerfops"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "ServerIp": {
            "type": "string"
          },
          "RoutableIp": {
            "type": "string"
          },
          "PullZoneIPv4RoutableIps": {
            "type": "string"
          },
          "PullZoneIPv6RoutableIps": {
            "type": "string"
          },
          "PrivateIp": {
            "type": "string"
          },
          "ServerIPv6": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Hostname": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/EdgeServerStatus"
          },
          "AccessKey": {
            "type": "string"
          },
          "WorkerCount": {
            "type": "integer",
            "format": "int32"
          },
          "ManagementLockGuid": {
            "type": "string"
          },
          "LastManagementActivity": {
            "type": "string",
            "format": "date-time"
          },
          "LastPullZoneConfiguration": {
            "type": "string",
            "format": "date-time"
          },
          "EdgeServerDeploymentJobId": {
            "type": "string"
          },
          "EdgeServerProxyDeploymentJobId": {
            "type": "string"
          },
          "MonitorTestId": {
            "type": "integer",
            "format": "int64"
          },
          "NodepingMonitorTestId": {
            "type": "string"
          },
          "SetupStepJobId": {
            "type": "string"
          },
          "DeactivationJobId": {
            "type": "string"
          },
          "EdgeServerDeploymentId": {
            "type": "integer",
            "format": "int64"
          },
          "ServesBudgetZones": {
            "type": "boolean"
          },
          "ServesSmallFileZones": {
            "type": "boolean"
          },
          "ServesLiveStream": {
            "type": "boolean"
          },
          "EdgeServerDeployment": {
            "$ref": "#/components/schemas/EdgeServerDeployment"
          },
          "EdgeServerProxyDeploymentId": {
            "type": "integer",
            "format": "int64"
          },
          "EdgeServerProxyDeployment": {
            "$ref": "#/components/schemas/EdgeServerProxyDeployment"
          },
          "MaximumNetworkMbitUsage": {
            "type": "integer",
            "format": "int32"
          },
          "MaximumCpuUsage": {
            "type": "integer",
            "format": "int32"
          },
          "MaximumRamUsage": {
            "type": "integer",
            "format": "int32"
          },
          "MaximumDiskIoWait": {
            "type": "integer",
            "format": "int32"
          },
          "CurrentDiskIoWait": {
            "type": "number",
            "format": "double"
          },
          "CurrentCpuUsage": {
            "type": "number",
            "format": "double"
          },
          "CurrentRamUsage": {
            "type": "number",
            "format": "double"
          },
          "CurrentNetworkMbitUsage": {
            "type": "number",
            "format": "double"
          },
          "CurrentRequestsPerSecond": {
            "type": "number",
            "format": "double"
          },
          "IsOriginServer": {
            "type": "boolean"
          },
          "RoutingWeight": {
            "type": "integer",
            "format": "int32"
          },
          "OverrideRoutableCountries": {
            "type": "string"
          },
          "DisabledCountries": {
            "type": "string"
          },
          "EnabledCountries": {
            "type": "string"
          },
          "EnabledPullZonesPremium": {
            "type": "string"
          },
          "EnabledPullZonesVolume": {
            "type": "string"
          },
          "DiskList": {
            "type": "string"
          },
          "NicConfiguration": {
            "type": "string"
          },
          "NginxAffinity": {
            "type": "string"
          },
          "Disks": {
            "type": "string"
          },
          "NetworkInterfaces": {
            "type": "string"
          },
          "PrivateNetworkInterfaces": {
            "type": "string"
          },
          "PremiumDisabledCountries": {
            "type": "string"
          },
          "UpstreamIPs": {
            "type": "string"
          },
          "DisabledASNs": {
            "type": "string"
          },
          "IsLoadBalancer": {
            "type": "boolean"
          },
          "LoadBalancedServers": {
            "type": "string"
          },
          "ProxyCacheMinUses": {
            "type": "integer",
            "format": "int32"
          },
          "IsOriginShield": {
            "type": "boolean"
          },
          "EnableNewProxy": {
            "type": "boolean"
          },
          "ExtraIPs": {
            "type": "string"
          },
          "SupplierName": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "VlanCount": {
            "type": "integer",
            "format": "int32"
          },
          "Vlan1IP": {
            "type": "string"
          },
          "Vlan1Neighbour": {
            "type": "string"
          },
          "Vlan2IP": {
            "type": "string"
          },
          "Vlan2Neighbour": {
            "type": "string"
          },
          "ServerZoneId": {
            "type": "integer",
            "format": "int64"
          },
          "ServerZone": {
            "$ref": "#/components/schemas/ServerZone"
          },
          "ServerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "ServerGroup": {
            "$ref": "#/components/schemas/ServerGroup"
          },
          "UserNewClusters": {
            "type": "boolean"
          },
          "EdgeServerCacheDiskConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeServerCacheDiskConfiguration"
            }
          },
          "ServePerfops": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "EdgeServerStatus": {
        "type": "integer",
        "description": "1 = Ready\n2 = Active\n3 = Installing\n4 = Offline\n5 = Down",
        "x-enumNames": [
          "Ready",
          "Active",
          "Installing",
          "Offline",
          "Down"
        ],
        "enum": [
          1,
          2,
          3,
          4,
          5
        ]
      },
      "EdgeServerDeployment": {
        "type": "object",
        "required": [
          "Id",
          "Active",
          "DateUpdated"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "DeploymentFile": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EdgeServerProxyDeployment": {
        "type": "object",
        "required": [
          "Id",
          "Active",
          "DateUpdated"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "DeploymentFile": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ServerGroup": {
        "type": "object",
        "required": [
          "Id",
          "DefaultCacheTime",
          "MinimumCacheTime",
          "MaximumFileSize"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "DefaultCacheTime": {
            "type": "integer",
            "format": "int64"
          },
          "MinimumCacheTime": {
            "type": "integer",
            "format": "int64"
          },
          "MaximumFileSize": {
            "type": "integer",
            "format": "int64"
          },
          "Servers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EdgeServer"
            }
          }
        }
      },
      "EdgeServerCacheDiskConfiguration": {
        "type": "object",
        "required": [
          "Id",
          "FileKeysCacheSize",
          "MaxCacheSize",
          "EdgeServerId",
          "Threads",
          "IsOffline"
        ],
        "properties": {
          "EdgeServer": {
            "$ref": "#/components/schemas/EdgeServer"
          },
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Path": {
            "type": "string"
          },
          "FileKeysCacheSize": {
            "type": "integer",
            "format": "int32"
          },
          "MaxCacheSize": {
            "type": "number",
            "format": "double"
          },
          "EdgeServerId": {
            "type": "integer",
            "format": "int64"
          },
          "Threads": {
            "type": "integer",
            "format": "int32"
          },
          "IsOffline": {
            "type": "boolean"
          }
        }
      },
      "DnsServer": {
        "type": "object",
        "required": [
          "Id",
          "LastManagementActivity",
          "LastRecordConfiguration",
          "TheoreticalMbitConnectivity",
          "UdpWorkerCount",
          "TcpWorkerCount",
          "MonitorTestId",
          "Status",
          "BGPMultiHopSetting",
          "ServerGroupId"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "NetworkInterfaceName": {
            "type": "string"
          },
          "ServerIp": {
            "type": "string"
          },
          "DnsListenerServerIp": {
            "type": "string"
          },
          "DnsListenerSecondaryIP": {
            "type": "string"
          },
          "Username": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Hostname": {
            "type": "string"
          },
          "AccessKey": {
            "type": "string"
          },
          "LastManagementActivity": {
            "type": "string",
            "format": "date-time"
          },
          "LastRecordConfiguration": {
            "type": "string",
            "format": "date-time"
          },
          "TheoreticalMbitConnectivity": {
            "type": "integer",
            "format": "int32"
          },
          "DnsServerDeploymentJobId": {
            "type": "string"
          },
          "UdpWorkerCount": {
            "type": "integer",
            "format": "int32"
          },
          "TcpWorkerCount": {
            "type": "integer",
            "format": "int32"
          },
          "MonitorTestId": {
            "type": "integer",
            "format": "int64"
          },
          "SetupStepJobId": {
            "type": "string"
          },
          "Status": {
            "$ref": "#/components/schemas/DnsServerStatus"
          },
          "DnsServerDeploymentId": {
            "type": "integer",
            "format": "int64"
          },
          "DnsServerDeployment": {
            "$ref": "#/components/schemas/DnsServerDeployment"
          },
          "ServerZoneId": {
            "type": "integer",
            "format": "int64"
          },
          "ServerZone": {
            "$ref": "#/components/schemas/ServerZone"
          },
          "BGPAsNumber": {
            "type": "string"
          },
          "BGPNeighbour": {
            "type": "string"
          },
          "BGPMultiHopSetting": {
            "type": "integer",
            "format": "int32"
          },
          "BGPSubnet": {
            "type": "string"
          },
          "BGPInternalAs": {
            "type": "string"
          },
          "BGPPassword": {
            "type": "string"
          },
          "Communities": {
            "type": "string"
          },
          "ServerGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "ServerGroup": {
            "$ref": "#/components/schemas/ServerGroup"
          }
        }
      },
      "DnsServerStatus": {
        "type": "integer",
        "description": "0 = Active\n1 = Installing\n2 = Offline",
        "x-enumNames": [
          "Active",
          "Installing",
          "Offline"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "DnsServerDeployment": {
        "type": "object",
        "required": [
          "Id",
          "Active",
          "DateUpdated"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "DeploymentFile": {
            "type": "string"
          },
          "Active": {
            "type": "boolean"
          },
          "DateUpdated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaginationListModelOfVideoLibraryModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VideoLibraryModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "VideoLibraryModel": {
        "type": "object",
        "required": [
          "Id",
          "VideoCount",
          "TrafficUsage",
          "StorageUsage",
          "DateCreated",
          "HasWatermark",
          "WatermarkPositionLeft",
          "WatermarkPositionTop",
          "WatermarkWidth",
          "PullZoneId",
          "StorageZoneId",
          "WatermarkHeight",
          "CaptionsFontSize",
          "PlayerTokenAuthenticationEnabled",
          "BlockNoneReferrer",
          "EnableMP4Fallback",
          "KeepOriginalFiles",
          "AllowDirectPlay",
          "EnableDRM",
          "Bitrate240p",
          "Bitrate360p",
          "Bitrate480p",
          "Bitrate720p",
          "Bitrate1080p",
          "Bitrate1440p",
          "Bitrate2160p",
          "ShowHeatmap",
          "EnableContentTagging",
          "PullZoneType",
          "WatermarkVersion",
          "EnableTranscribing",
          "EnableTranscribingTitleGeneration",
          "EnableTranscribingDescriptionGeneration"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "The name of the Video Library."
          },
          "VideoCount": {
            "type": "integer",
            "description": "The number of videos in the video library",
            "format": "int64"
          },
          "TrafficUsage": {
            "type": "integer",
            "description": "The amount of traffic usage this month",
            "format": "int64"
          },
          "StorageUsage": {
            "type": "integer",
            "description": "The total amount of storage used by the library",
            "format": "int64"
          },
          "DateCreated": {
            "type": "string",
            "description": "The date when the video library was created",
            "format": "date-time"
          },
          "ReplicationRegions": {
            "type": "array",
            "description": "The geo-replication regions of the underlying storage zone",
            "items": {
              "type": "string"
            }
          },
          "ApiKey": {
            "type": "string",
            "description": "The API key used for authenticating with the video library"
          },
          "ReadOnlyApiKey": {
            "type": "string",
            "description": "The read-only API key used for authenticating with the video library"
          },
          "HasWatermark": {
            "type": "boolean",
            "description": "Determines if the video library has a watermark configured"
          },
          "WatermarkPositionLeft": {
            "type": "integer",
            "description": "The left offset of the watermark position (in %)",
            "format": "int32"
          },
          "WatermarkPositionTop": {
            "type": "integer",
            "description": "The top offset of the watermark position (in %)",
            "format": "int32"
          },
          "WatermarkWidth": {
            "type": "integer",
            "description": "The width of the watermark (in %)",
            "format": "int32"
          },
          "PullZoneId": {
            "type": "integer",
            "description": "The ID of the connected underlying pull zone",
            "format": "int64"
          },
          "StorageZoneId": {
            "type": "integer",
            "description": "The ID of the connected underlying storage zone",
            "format": "int64"
          },
          "WatermarkHeight": {
            "type": "integer",
            "description": "The height of the watermark (in %)",
            "format": "int32"
          },
          "EnabledResolutions": {
            "type": "string",
            "description": "The comma separated list of enabled resolutions"
          },
          "ViAiPublisherId": {
            "type": "string",
            "description": "The vi.ai publisher id for advertising configuration"
          },
          "VastTagUrl": {
            "type": "string",
            "description": "The URL of the VAST tag endpoint for advertising configuration"
          },
          "WebhookUrl": {
            "type": "string",
            "description": "The webhook URL of the video library"
          },
          "CaptionsFontSize": {
            "type": "integer",
            "description": "The captions display font size",
            "format": "int32"
          },
          "CaptionsFontColor": {
            "type": "string",
            "description": "The captions display font color"
          },
          "CaptionsBackground": {
            "type": "string",
            "description": "The captions display background color"
          },
          "UILanguage": {
            "type": "string",
            "description": "The UI language of the player"
          },
          "AllowEarlyPlay": {
            "type": "boolean",
            "description": "Determines if the Early-Play feature is enabled"
          },
          "PlayerTokenAuthenticationEnabled": {
            "type": "boolean",
            "description": "Determines if the player token authentication is enabled"
          },
          "AllowedReferrers": {
            "type": "array",
            "description": "The list of allowed referrer domains allowed to access the library",
            "items": {
              "type": "string"
            }
          },
          "BlockedReferrers": {
            "type": "array",
            "description": "The list of blocked referrer domains blocked from accessing the library",
            "items": {
              "type": "string"
            }
          },
          "BlockNoneReferrer": {
            "type": "boolean",
            "description": "Determines if the requests without a referrer are blocked"
          },
          "EnableMP4Fallback": {
            "type": "boolean",
            "description": "Determines if the MP4 fallback feature is enabled"
          },
          "KeepOriginalFiles": {
            "type": "boolean",
            "description": "Determines if the original video files should be stored after encoding"
          },
          "AllowDirectPlay": {
            "type": "boolean",
            "description": "Determines direct play URLs are enabled for the library"
          },
          "EnableDRM": {
            "type": "boolean",
            "description": "Determines if the MediaCage basic DRM is enabled"
          },
          "Bitrate240p": {
            "type": "integer",
            "description": "The bitrate used for encoding 240p videos",
            "format": "int32"
          },
          "Bitrate360p": {
            "type": "integer",
            "description": "The bitrate used for encoding 360p videos",
            "format": "int32"
          },
          "Bitrate480p": {
            "type": "integer",
            "description": "The bitrate used for encoding 480p videos",
            "format": "int32"
          },
          "Bitrate720p": {
            "type": "integer",
            "description": "The bitrate used for encoding 720p videos",
            "format": "int32"
          },
          "Bitrate1080p": {
            "type": "integer",
            "description": "The bitrate used for encoding 1080p videos",
            "format": "int32"
          },
          "Bitrate1440p": {
            "type": "integer",
            "description": "The bitrate used for encoding 1440p videos",
            "format": "int32"
          },
          "Bitrate2160p": {
            "type": "integer",
            "description": "The bitrate used for encoding 2160p videos",
            "format": "int32"
          },
          "ApiAccessKey": {
            "type": "string",
            "description": "The API access key for the library. Only added when the includeAccessKey parameter is set."
          },
          "ShowHeatmap": {
            "type": "boolean",
            "description": "Determines if the video watch heatmap should be displayed in the player."
          },
          "EnableContentTagging": {
            "type": "boolean",
            "description": "Determines if content tagging should be enabled for this library."
          },
          "PullZoneType": {
            "description": "The type of the pull zone attached. Premium = 0, Volume = 1",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneType"
              }
            ]
          },
          "CustomHTML": {
            "type": "string",
            "description": "The custom HTMl that is added into the head of the HTML player."
          },
          "Controls": {
            "type": "string",
            "description": "The list of controls on the video player."
          },
          "PlayerKeyColor": {
            "type": "string",
            "description": "The key color of the player."
          },
          "FontFamily": {
            "type": "string",
            "description": "The captions font family."
          },
          "WatermarkVersion": {
            "type": "integer",
            "format": "int64"
          },
          "EnableTranscribing": {
            "type": "boolean",
            "description": "Determines if the automatic audio transcribing is currently enabled for this zone."
          },
          "EnableTranscribingTitleGeneration": {
            "type": "boolean",
            "description": "Determines if automatic transcribing title generation is currently enabled."
          },
          "EnableTranscribingDescriptionGeneration": {
            "type": "boolean",
            "description": "Determines if automatic transcribing description generation is currently enabled."
          },
          "TranscribingCaptionLanguages": {
            "type": "array",
            "description": "The list of languages that the captions will be automatically transcribed to.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PullZoneType": {
        "type": "integer",
        "description": "0 = Premium\n1 = Volume",
        "x-enumNames": [
          "Premium",
          "Volume"
        ],
        "enum": [
          0,
          1
        ]
      },
      "VideoLibraryCreateModel": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the Video Library.",
            "minLength": 1
          },
          "ReplicationRegions": {
            "type": "array",
            "description": "The geo-replication regions of the underlying storage zone",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VideoLibraryUpdateModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "(Optional) Sets name of the video library"
          },
          "CustomHTML": {
            "type": "string",
            "description": "(Optional) Sets the player custom HTML code"
          },
          "PlayerKeyColor": {
            "type": "string",
            "description": "(Optional) Sets the player key control color"
          },
          "EnableTokenAuthentication": {
            "type": "boolean",
            "description": "(Optional) Determines if the token authentication should be enabled"
          },
          "EnableTokenIPVerification": {
            "type": "boolean",
            "description": "(Optional) Determines if the token IP verification should be enabled"
          },
          "ResetToken": {
            "type": "boolean",
            "description": "(Optional) Set to true to reset the CDN and embed view token key"
          },
          "WatermarkPositionLeft": {
            "type": "integer",
            "description": "(Optional) Sets the left offset of the watermark position (in %)",
            "format": "int32"
          },
          "WatermarkPositionTop": {
            "type": "integer",
            "description": "(Optional) Sets the top offset of the watermark position (in %)",
            "format": "int32"
          },
          "WatermarkWidth": {
            "type": "integer",
            "description": "(Optional) Sets the width of the watermark (in %)",
            "format": "int32"
          },
          "WatermarkHeight": {
            "type": "integer",
            "description": "(Optional) Sets the height of the watermark (in %)",
            "format": "int32"
          },
          "EnabledResolutions": {
            "type": "string",
            "description": "(Optional) Sets the enabled resolutions for the transcoding. At least one resolution should be enabled. Possible values: 240p, 360p, 480p, 720p, 1080p, 1440p, 2160p"
          },
          "ViAiPublisherId": {
            "type": "string",
            "description": "(Optional) Sets the vi.ai publisher ID"
          },
          "VastTagUrl": {
            "type": "string",
            "description": "(Optional) Sets the Vast tag URL"
          },
          "WebhookUrl": {
            "type": "string",
            "description": "(Optional) Sets the webhook API url"
          },
          "CaptionsFontSize": {
            "type": "integer",
            "description": "(Optional) Sets the captions display font size",
            "format": "int32"
          },
          "CaptionsFontColor": {
            "type": "string",
            "description": "(Optional) Sets the captions display font color"
          },
          "CaptionsBackground": {
            "type": "string",
            "description": "(Optional) Sets the captions display background color"
          },
          "UILanguage": {
            "type": "string",
            "description": "(Optional) Sets the UI language of the video player."
          },
          "AllowEarlyPlay": {
            "type": "boolean",
            "description": "(Optional) Determines if the Early-Play feature should be enabled."
          },
          "PlayerTokenAuthenticationEnabled": {
            "type": "boolean",
            "description": "(Optional) Determines if the token authentication should be enabled."
          },
          "BlockNoneReferrer": {
            "type": "boolean",
            "description": "(Optional) Determines if requests without a referer should be blocked."
          },
          "EnableMP4Fallback": {
            "type": "boolean",
            "description": "(Optional) Determines if MP4 fallback should be enabled for this library."
          },
          "KeepOriginalFiles": {
            "type": "boolean",
            "description": "(Optional) Determines if the original file should be kept after the video is processed."
          },
          "AllowDirectPlay": {
            "type": "boolean",
            "description": "(Optional) Determines if direct play URLs should be enabled for the library"
          },
          "EnableDRM": {
            "type": "boolean",
            "description": "(Optional) Determines if MediaCage basic DRM should be enabled for this library"
          },
          "Controls": {
            "type": "string",
            "description": "(Optional) The comma separated list of controls that will be displayed in the video player. Possible values: play-large, play, progress, current-time, mute, volume, captions, settings, pip, airplay, fullscreen."
          },
          "Bitrate240p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 240p videos",
            "format": "int32"
          },
          "Bitrate360p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 360p videos",
            "format": "int32"
          },
          "Bitrate480p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 480p videos",
            "format": "int32"
          },
          "Bitrate720p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 720p videos",
            "format": "int32"
          },
          "Bitrate1080p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 1080p videos",
            "format": "int32"
          },
          "Bitrate1440p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 1440p videos",
            "format": "int32"
          },
          "Bitrate2160p": {
            "type": "integer",
            "description": "(Optional) The bitrate used for encoding 2160p videos",
            "format": "int32"
          },
          "ShowHeatmap": {
            "type": "boolean",
            "description": "Determines if the video watch heatmap should be displayed in the player."
          },
          "EnableContentTagging": {
            "type": "boolean",
            "description": "Determines if content tagging should be enabled for this library."
          },
          "FontFamily": {
            "type": "string",
            "description": "The captions font family."
          },
          "EnableTranscribing": {
            "type": "boolean",
            "description": "(Optional) Determines if the automatic audio transcribing is currently enabled for this zone."
          },
          "EnableTranscribingTitleGeneration": {
            "type": "boolean",
            "description": "(Optional) Determines if automatic transcribing title generation is currently enabled."
          },
          "EnableTranscribingDescriptionGeneration": {
            "type": "boolean",
            "description": "(Optional) Determines if automatic transcribing description generation is currently enabled."
          },
          "TranscribingCaptionLanguages": {
            "type": "array",
            "description": "(Optional) The list of languages that the captions will be automatically transcribed to.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AddAllowedReferrerRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be added as an allowed referer",
            "minLength": 1
          }
        }
      },
      "AddBlockedReferrerRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be added as a blocked referer",
            "minLength": 1
          }
        }
      },
      "RemoveAllowedReferrerRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be removed as an allowed referer",
            "minLength": 1
          }
        }
      },
      "RemoveBlockedReferrerRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be removed as a blocked referer",
            "minLength": 1
          }
        }
      },
      "PaginationListModelOfDnsZoneModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsZoneModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "DnsZoneModel": {
        "type": "object",
        "required": [
          "Id",
          "DateModified",
          "DateCreated",
          "NameserversDetected",
          "CustomNameserversEnabled",
          "NameserversNextCheck",
          "LoggingEnabled",
          "LoggingIPAnonymizationEnabled"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Domain": {
            "type": "string"
          },
          "Records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsRecordModel"
            }
          },
          "DateModified": {
            "type": "string",
            "format": "date-time"
          },
          "DateCreated": {
            "type": "string",
            "format": "date-time"
          },
          "NameserversDetected": {
            "type": "boolean"
          },
          "CustomNameserversEnabled": {
            "type": "boolean"
          },
          "Nameserver1": {
            "type": "string"
          },
          "Nameserver2": {
            "type": "string"
          },
          "SoaEmail": {
            "type": "string"
          },
          "NameserversNextCheck": {
            "type": "string",
            "format": "date-time"
          },
          "LoggingEnabled": {
            "type": "boolean"
          },
          "LoggingIPAnonymizationEnabled": {
            "type": "boolean",
            "description": "Determines if the TLS 1 is enabled on the DNS Zone"
          },
          "LogAnonymizationType": {
            "description": "Sets the log anonymization type for this zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogAnonymizationType"
              }
            ]
          }
        }
      },
      "DnsRecordModel": {
        "type": "object",
        "required": [
          "Id",
          "Type",
          "Ttl",
          "Weight",
          "Priority",
          "Port",
          "Flags",
          "Accelerated",
          "AcceleratedPullZoneId",
          "MonitorStatus",
          "MonitorType",
          "GeolocationLatitude",
          "GeolocationLongitude",
          "SmartRoutingType",
          "Disabled"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Type": {
            "$ref": "#/components/schemas/DnsRecordTypes"
          },
          "Ttl": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Weight": {
            "type": "integer",
            "format": "int32"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "Flags": {
            "type": "integer",
            "format": "byte"
          },
          "Tag": {
            "type": "string"
          },
          "Accelerated": {
            "type": "boolean"
          },
          "AcceleratedPullZoneId": {
            "type": "integer",
            "format": "int64"
          },
          "LinkName": {
            "type": "string"
          },
          "IPGeoLocationInfo": {
            "$ref": "#/components/schemas/GeoDnsLocationModel"
          },
          "GeolocationInfo": {
            "$ref": "#/components/schemas/DnsRecordGeoLocationInfo"
          },
          "MonitorStatus": {
            "$ref": "#/components/schemas/DnsMonitoringStatus"
          },
          "MonitorType": {
            "$ref": "#/components/schemas/DnsMonitoringType"
          },
          "GeolocationLatitude": {
            "type": "number",
            "format": "double"
          },
          "GeolocationLongitude": {
            "type": "number",
            "format": "double"
          },
          "EnviromentalVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsRecordEnviromentalVariableModel"
            }
          },
          "LatencyZone": {
            "type": "string"
          },
          "SmartRoutingType": {
            "$ref": "#/components/schemas/DnsSmartRoutingType"
          },
          "Disabled": {
            "type": "boolean"
          },
          "Comment": {
            "type": "string"
          }
        }
      },
      "DnsRecordTypes": {
        "type": "integer",
        "description": "0 = A\n1 = AAAA\n2 = CNAME\n3 = TXT\n4 = MX\n5 = Redirect\n6 = Flatten\n7 = PullZone\n8 = SRV\n9 = CAA\n10 = PTR\n11 = Script\n12 = NS",
        "x-enumNames": [
          "A",
          "AAAA",
          "CNAME",
          "TXT",
          "MX",
          "Redirect",
          "Flatten",
          "PullZone",
          "SRV",
          "CAA",
          "PTR",
          "Script",
          "NS"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ]
      },
      "GeoDnsLocationModel": {
        "type": "object",
        "required": [
          "ASN"
        ],
        "properties": {
          "CountryCode": {
            "type": "string",
            "description": "The ISO country code of the location"
          },
          "Country": {
            "type": "string",
            "description": "The name of the country of the location"
          },
          "ASN": {
            "type": "integer",
            "description": "The ASN of the IP organization",
            "format": "int64"
          },
          "OrganizationName": {
            "type": "string",
            "description": "The mame of the organization that owns the IP"
          },
          "City": {
            "type": "string",
            "description": "The name of the city of the location"
          }
        }
      },
      "DnsRecordGeoLocationInfo": {
        "type": "object",
        "required": [
          "Latitude",
          "Longitude"
        ],
        "properties": {
          "Country": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "DnsMonitoringStatus": {
        "type": "integer",
        "description": "0 = Unknown\n1 = Online\n2 = Offline",
        "x-enumNames": [
          "Unknown",
          "Online",
          "Offline"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "DnsMonitoringType": {
        "type": "integer",
        "description": "0 = None\n1 = Ping\n2 = Http\n3 = Monitor",
        "x-enumNames": [
          "None",
          "Ping",
          "Http",
          "Monitor"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "DnsRecordEnviromentalVariableModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "DnsSmartRoutingType": {
        "type": "integer",
        "description": "0 = None\n1 = Latency\n2 = Geolocation",
        "x-enumNames": [
          "None",
          "Latency",
          "Geolocation"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "LogAnonymizationType": {
        "type": "integer",
        "description": "0 = OneDigit\n1 = Drop",
        "x-enumNames": [
          "OneDigit",
          "Drop"
        ],
        "enum": [
          0,
          1
        ]
      },
      "UpdateDnsZoneModel": {
        "type": "object",
        "properties": {
          "CustomNameserversEnabled": {
            "type": "boolean"
          },
          "Nameserver1": {
            "type": "string"
          },
          "Nameserver2": {
            "type": "string"
          },
          "SoaEmail": {
            "type": "string"
          },
          "LoggingEnabled": {
            "type": "boolean"
          },
          "LogAnonymizationType": {
            "description": "Gets the log anonymization type for this zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogAnonymizationType"
              }
            ]
          },
          "LoggingIPAnonymizationEnabled": {
            "type": "boolean",
            "description": "Determines if the log anonoymization should be enabled"
          }
        }
      },
      "DnsZoneStatisticsModel": {
        "type": "object",
        "required": [
          "TotalQueriesServed"
        ],
        "properties": {
          "TotalQueriesServed": {
            "type": "integer",
            "format": "int64"
          },
          "QueriesServedChart": {
            "type": "object",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "QueriesByTypeChart": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ZoneAvailabilityRequestModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Determines the name of the zone that we are checking"
          }
        }
      },
      "DnsZoneAddModel": {
        "type": "object",
        "required": [
          "Domain"
        ],
        "properties": {
          "Domain": {
            "type": "string",
            "description": "The domain that will be added.",
            "minLength": 1
          }
        }
      },
      "AddDnsRecordModel": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/DnsRecordTypes"
          },
          "Ttl": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Weight": {
            "type": "integer",
            "format": "int32"
          },
          "Priority": {
            "type": "integer",
            "format": "int32"
          },
          "Flags": {
            "type": "integer",
            "format": "byte"
          },
          "Tag": {
            "type": "string"
          },
          "Port": {
            "type": "integer",
            "format": "int32"
          },
          "PullZoneId": {
            "type": "integer",
            "format": "int64"
          },
          "ScriptId": {
            "type": "integer",
            "format": "int64"
          },
          "Accelerated": {
            "type": "boolean"
          },
          "MonitorType": {
            "$ref": "#/components/schemas/DnsMonitoringType"
          },
          "GeolocationLatitude": {
            "type": "number",
            "format": "double"
          },
          "GeolocationLongitude": {
            "type": "number",
            "format": "double"
          },
          "LatencyZone": {
            "type": "string"
          },
          "SmartRoutingType": {
            "$ref": "#/components/schemas/DnsSmartRoutingType"
          },
          "Disabled": {
            "type": "boolean"
          },
          "EnviromentalVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DnsRecordEnviromentalVariableModel"
            }
          },
          "Comment": {
            "type": "string"
          }
        }
      },
      "UpdateDnsRecordModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddDnsRecordModel"
          },
          {
            "type": "object",
            "required": [
              "Id"
            ],
            "properties": {
              "Id": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "DnsZoneImportResultModel": {
        "type": "object",
        "required": [
          "RecordsSuccessful",
          "RecordsFailed",
          "RecordsSkipped"
        ],
        "properties": {
          "RecordsSuccessful": {
            "type": "integer",
            "format": "int32"
          },
          "RecordsFailed": {
            "type": "integer",
            "format": "int32"
          },
          "RecordsSkipped": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PaginationListModelOfPullZoneModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PullZoneModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "PullZoneModel": {
        "type": "object",
        "required": [
          "Id",
          "Enabled",
          "StorageZoneId",
          "EdgeScriptId",
          "EnableGeoZoneUS",
          "EnableGeoZoneEU",
          "EnableGeoZoneASIA",
          "EnableGeoZoneSA",
          "EnableGeoZoneAF",
          "ZoneSecurityEnabled",
          "ZoneSecurityIncludeHashRemoteIP",
          "IgnoreQueryStrings",
          "MonthlyBandwidthLimit",
          "MonthlyBandwidthUsed",
          "MonthlyCharges",
          "AddHostHeader",
          "Type",
          "EnableAccessControlOriginHeader",
          "DisableCookies",
          "EnableOriginShield",
          "CacheControlMaxAgeOverride",
          "CacheControlPublicMaxAgeOverride",
          "BurstSize",
          "RequestLimit",
          "BlockRootPathAccess",
          "BlockPostRequests",
          "LimitRatePerSecond",
          "LimitRateAfter",
          "ConnectionLimitPerIPCount",
          "PriceOverride",
          "AddCanonicalHeader",
          "EnableLogging",
          "EnableCacheSlice",
          "EnableSmartCache",
          "EnableWebPVary",
          "EnableAvifVary",
          "EnableCountryCodeVary",
          "EnableMobileVary",
          "EnableCookieVary",
          "EnableHostnameVary",
          "AWSSigningEnabled",
          "LoggingIPAnonymizationEnabled",
          "EnableTLS1",
          "EnableTLS1_1",
          "VerifyOriginSSL",
          "ErrorPageEnableCustomCode",
          "ErrorPageEnableStatuspageWidget",
          "ErrorPageWhitelabel",
          "LogForwardingEnabled",
          "LogForwardingPort",
          "LogForwardingProtocol",
          "LoggingSaveToStorage",
          "LoggingStorageZoneId",
          "FollowRedirects",
          "VideoLibraryId",
          "DnsRecordId",
          "DnsZoneId",
          "OptimizerEnabled",
          "OptimizerDesktopMaxWidth",
          "OptimizerMobileMaxWidth",
          "OptimizerImageQuality",
          "OptimizerMobileImageQuality",
          "OptimizerEnableWebP",
          "OptimizerEnableManipulationEngine",
          "OptimizerMinifyCSS",
          "OptimizerMinifyJavaScript",
          "OptimizerWatermarkEnabled",
          "OptimizerWatermarkPosition",
          "OptimizerWatermarkOffset",
          "OptimizerWatermarkMinImageSize",
          "OptimizerAutomaticOptimizationEnabled",
          "PermaCacheStorageZoneId",
          "OriginRetries",
          "OriginConnectTimeout",
          "OriginResponseTimeout",
          "UseStaleWhileUpdating",
          "UseStaleWhileOffline",
          "OriginRetry5XXResponses",
          "OriginRetryConnectionTimeout",
          "OriginRetryResponseTimeout",
          "OriginRetryDelay",
          "OriginShieldEnableConcurrencyLimit",
          "OriginShieldMaxConcurrentRequests",
          "EnableSafeHop",
          "CacheErrorResponses",
          "OriginShieldQueueMaxWaitTime",
          "OriginShieldMaxQueuedRequests",
          "OptimizerForceClasses",
          "UseBackgroundUpdate",
          "EnableAutoSSL",
          "EnableQueryStringOrdering",
          "LogAnonymizationType",
          "LogFormat",
          "LogForwardingFormat",
          "ShieldDDosProtectionType",
          "ShieldDDosProtectionEnabled",
          "OriginType",
          "EnableRequestCoalescing",
          "RequestCoalescingTimeout",
          "DisableLetsEncrypt",
          "EnableBunnyImageAi",
          "PreloadingScreenEnabled",
          "PreloadingScreenCodeEnabled",
          "PreloadingScreenTheme",
          "PreloadingScreenDelay",
          "EUUSDiscount",
          "SouthAmericaDiscount",
          "AfricaDiscount",
          "AsiaOceaniaDiscount"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique ID of the pull zone.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "The name of the pull zone."
          },
          "OriginUrl": {
            "type": "string",
            "description": "The origin URL of the pull zone where the files are fetched from."
          },
          "Enabled": {
            "type": "boolean",
            "description": "Determines if the Pull Zone is currently enabled, active and running"
          },
          "Hostnames": {
            "type": "array",
            "description": "The list of hostnames linked to this Pull Zone",
            "items": {
              "$ref": "#/components/schemas/HostnameModel"
            }
          },
          "StorageZoneId": {
            "type": "integer",
            "description": "The ID of the storage zone that the pull zone is linked to",
            "format": "int64"
          },
          "EdgeScriptId": {
            "type": "integer",
            "description": "The ID of the edge script that the pull zone is linked to",
            "format": "int64"
          },
          "AllowedReferrers": {
            "type": "array",
            "description": "The list of referrer hostnames that are allowed to access the pull zone.Requests containing the header Referer: hostname that is not on the list will be rejected.If empty, all the referrers are allowed",
            "items": {
              "type": "string"
            }
          },
          "BlockedReferrers": {
            "type": "array",
            "description": "The list of referrer hostnames that are allowed to access the pull zone. Requests containing the header Referer: hostname that is not on the list will be rejected. If empty, all the referrers are allowed",
            "items": {
              "type": "string"
            }
          },
          "BlockedIps": {
            "type": "array",
            "description": "The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed",
            "items": {
              "type": "string"
            }
          },
          "EnableGeoZoneUS": {
            "type": "boolean",
            "description": "Determines if the delivery from the North American region is enabled for this pull zone"
          },
          "EnableGeoZoneEU": {
            "type": "boolean",
            "description": "Determines if the delivery from the European region is enabled for this pull zone"
          },
          "EnableGeoZoneASIA": {
            "type": "boolean",
            "description": "Determines if the delivery from the Asian / Oceanian region is enabled for this pull zone"
          },
          "EnableGeoZoneSA": {
            "type": "boolean",
            "description": "Determines if the delivery from the South American region is enabled for this pull zone"
          },
          "EnableGeoZoneAF": {
            "type": "boolean",
            "description": "Determines if the delivery from the Africa region is enabled for this pull zone"
          },
          "ZoneSecurityEnabled": {
            "type": "boolean",
            "description": "True if the URL secure token authentication security is enabled"
          },
          "ZoneSecurityKey": {
            "type": "string",
            "description": "The security key used for secure URL token authentication"
          },
          "ZoneSecurityIncludeHashRemoteIP": {
            "type": "boolean",
            "description": "True if the zone security hash should include the remote IP"
          },
          "IgnoreQueryStrings": {
            "type": "boolean",
            "description": "True if the Pull Zone is ignoring query strings when serving cached objects"
          },
          "MonthlyBandwidthLimit": {
            "type": "integer",
            "description": "The monthly limit of bandwidth in bytes that the pullzone is allowed to use",
            "format": "int64"
          },
          "MonthlyBandwidthUsed": {
            "type": "integer",
            "description": "The amount of bandwidth in bytes that the pull zone used this month",
            "format": "int64"
          },
          "MonthlyCharges": {
            "type": "number",
            "description": "The total monthly charges for this so zone so far",
            "format": "decimal"
          },
          "AddHostHeader": {
            "type": "boolean",
            "description": "Determines if the Pull Zone should forward the current hostname to the origin"
          },
          "OriginHostHeader": {
            "type": "string",
            "description": "Determines the host header that will be sent to the origin"
          },
          "Type": {
            "description": "The type of the pull zone. Premium = 0, Volume = 1",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneType"
              }
            ]
          },
          "AccessControlOriginHeaderExtensions": {
            "type": "array",
            "description": "The list of extensions that will return the CORS headers",
            "items": {
              "type": "string"
            }
          },
          "EnableAccessControlOriginHeader": {
            "type": "boolean",
            "description": "Determines if the CORS headers should be enabled"
          },
          "DisableCookies": {
            "type": "boolean",
            "description": "Determines if the cookies are disabled for the pull zone"
          },
          "BudgetRedirectedCountries": {
            "type": "array",
            "description": "The list of budget redirected countries with the two-letter Alpha2 ISO codes",
            "items": {
              "type": "string"
            }
          },
          "BlockedCountries": {
            "type": "array",
            "description": "The list of blocked countries with the two-letter Alpha2 ISO codes",
            "items": {
              "type": "string"
            }
          },
          "EnableOriginShield": {
            "type": "boolean",
            "description": "If true the server will use the origin shield feature"
          },
          "CacheControlMaxAgeOverride": {
            "type": "integer",
            "description": "The override cache time for the pull zone",
            "format": "int64"
          },
          "CacheControlPublicMaxAgeOverride": {
            "type": "integer",
            "description": "The override cache time for the pull zone for the end client",
            "format": "int64"
          },
          "BurstSize": {
            "type": "integer",
            "description": "Excessive requests are delayed until their number exceeds the maximum burst size.",
            "format": "int32"
          },
          "RequestLimit": {
            "type": "integer",
            "description": "Max number of requests per IP per second",
            "format": "int32"
          },
          "BlockRootPathAccess": {
            "type": "boolean",
            "description": "If true, access to root path will return a 403 error"
          },
          "BlockPostRequests": {
            "type": "boolean",
            "description": "If true, POST requests to the zone will be blocked"
          },
          "LimitRatePerSecond": {
            "type": "number",
            "description": "The maximum rate at which the zone will transfer data in kb/s. 0 for unlimited",
            "format": "double"
          },
          "LimitRateAfter": {
            "type": "number",
            "description": "The amount of data after the rate limit will be activated",
            "format": "double"
          },
          "ConnectionLimitPerIPCount": {
            "type": "integer",
            "description": "The number of connections limited per IP for this zone",
            "format": "int32"
          },
          "PriceOverride": {
            "type": "number",
            "description": "The custom price override for this zone",
            "format": "decimal"
          },
          "AddCanonicalHeader": {
            "type": "boolean",
            "description": "Determines if the Add Canonical Header is enabled for this Pull Zone"
          },
          "EnableLogging": {
            "type": "boolean",
            "description": "Determines if the logging is enabled for this Pull Zone"
          },
          "EnableCacheSlice": {
            "type": "boolean",
            "description": "Determines if the cache slice (Optimize for video) feature is enabled for the Pull Zone"
          },
          "EnableSmartCache": {
            "type": "boolean",
            "description": "Determines if smart caching is enabled for this zone"
          },
          "EdgeRules": {
            "type": "array",
            "description": "The list of edge rules on this Pull Zone",
            "items": {
              "$ref": "#/components/schemas/EdgeRuleV2Model"
            }
          },
          "EnableWebPVary": {
            "type": "boolean",
            "description": "Determines if the WebP Vary feature is enabled."
          },
          "EnableAvifVary": {
            "type": "boolean",
            "description": "Determines if the AVIF Vary feature is enabled."
          },
          "EnableCountryCodeVary": {
            "type": "boolean",
            "description": "Determines if the Country Code Vary feature is enabled."
          },
          "EnableMobileVary": {
            "type": "boolean",
            "description": "Determines if the Mobile Vary feature is enabled."
          },
          "EnableCookieVary": {
            "type": "boolean",
            "description": "Determines if the Cookie Vary feature is enabled."
          },
          "CookieVaryParameters": {
            "type": "array",
            "description": "Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.",
            "items": {
              "type": "string"
            }
          },
          "EnableHostnameVary": {
            "type": "boolean",
            "description": "Determines if the Hostname Vary feature is enabled."
          },
          "CnameDomain": {
            "type": "string",
            "description": "The CNAME domain of the pull zone for setting up custom hostnames"
          },
          "AWSSigningEnabled": {
            "type": "boolean",
            "description": "Determines if the AWS Signing is enabled"
          },
          "AWSSigningKey": {
            "type": "string",
            "description": "The AWS Signing region key"
          },
          "AWSSigningSecret": {
            "type": "string",
            "description": "The AWS Signing region secret"
          },
          "AWSSigningRegionName": {
            "type": "string",
            "description": "The AWS Signing region name"
          },
          "LoggingIPAnonymizationEnabled": {
            "type": "boolean",
            "description": "Determines if the TLS 1 is enabled on the Pull Zone"
          },
          "EnableTLS1": {
            "type": "boolean",
            "description": "Determines if the TLS 1 is enabled on the Pull Zone"
          },
          "EnableTLS1_1": {
            "type": "boolean",
            "description": "Determines if the TLS 1.1 is enabled on the Pull Zone"
          },
          "VerifyOriginSSL": {
            "type": "boolean",
            "description": "Determines if the Pull Zone should verify the origin SSL certificate"
          },
          "ErrorPageEnableCustomCode": {
            "type": "boolean",
            "description": "Determines if custom error page code should be enabled."
          },
          "ErrorPageCustomCode": {
            "type": "string",
            "description": "Contains the custom error page code that will be returned"
          },
          "ErrorPageEnableStatuspageWidget": {
            "type": "boolean",
            "description": "Determines if the statuspage widget should be displayed on the error pages"
          },
          "ErrorPageStatuspageCode": {
            "type": "string",
            "description": "The statuspage code that will be used to build the status widget"
          },
          "ErrorPageWhitelabel": {
            "type": "boolean",
            "description": "Determines if the error pages should be whitelabel or not"
          },
          "OriginShieldZoneCode": {
            "type": "string",
            "description": "The zone code of the origin shield"
          },
          "LogForwardingEnabled": {
            "type": "boolean",
            "description": "Determines if the log forawrding is enabled"
          },
          "LogForwardingHostname": {
            "type": "string",
            "description": "The log forwarding hostname"
          },
          "LogForwardingPort": {
            "type": "integer",
            "description": "The log forwarding port",
            "format": "int32"
          },
          "LogForwardingToken": {
            "type": "string",
            "description": "The log forwarding token value"
          },
          "LogForwardingProtocol": {
            "description": "Determines the log forwarding protocol type",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneLogForwarderProtocolType"
              }
            ]
          },
          "LoggingSaveToStorage": {
            "type": "boolean",
            "description": "Determines if the permanent logging feature is enabled"
          },
          "LoggingStorageZoneId": {
            "type": "integer",
            "description": "The ID of the logging storage zone that is configured for this Pull Zone",
            "format": "int64"
          },
          "FollowRedirects": {
            "type": "boolean",
            "description": "Determines if the zone will follow origin redirects"
          },
          "VideoLibraryId": {
            "type": "integer",
            "description": "The ID of the video library that the zone is linked to",
            "format": "int64"
          },
          "DnsRecordId": {
            "type": "integer",
            "description": "The ID of the DNS record tied to this pull zone",
            "format": "int64"
          },
          "DnsZoneId": {
            "type": "integer",
            "description": "The ID of the DNS zone tied to this pull zone",
            "format": "int64"
          },
          "DnsRecordValue": {
            "type": "string",
            "description": "The cached version of the DNS record value"
          },
          "OptimizerEnabled": {
            "type": "boolean",
            "description": "Determines if the optimizer should be enabled for this zone"
          },
          "OptimizerDesktopMaxWidth": {
            "type": "integer",
            "description": "Determines the maximum automatic image size for desktop clients",
            "format": "int32",
            "maximum": 5000,
            "minimum": 0
          },
          "OptimizerMobileMaxWidth": {
            "type": "integer",
            "description": "Determines the maximum automatic image size for mobile clients",
            "format": "int32",
            "maximum": 5000,
            "minimum": 0
          },
          "OptimizerImageQuality": {
            "type": "integer",
            "description": "Determines the image quality for desktop clients",
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "OptimizerMobileImageQuality": {
            "type": "integer",
            "description": "Determines the image quality for mobile clients",
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "OptimizerEnableWebP": {
            "type": "boolean",
            "description": "Determines if the WebP optimization should be enabled"
          },
          "OptimizerEnableManipulationEngine": {
            "type": "boolean",
            "description": "Determines the image manipulation should be enabled"
          },
          "OptimizerMinifyCSS": {
            "type": "boolean",
            "description": "Determines if the CSS minifcation should be enabled"
          },
          "OptimizerMinifyJavaScript": {
            "type": "boolean",
            "description": "Determines if the JavaScript minifcation should be enabled"
          },
          "OptimizerWatermarkEnabled": {
            "type": "boolean",
            "description": "Determines if image watermarking should be enabled"
          },
          "OptimizerWatermarkUrl": {
            "type": "string",
            "description": "Sets the URL of the watermark image"
          },
          "OptimizerWatermarkPosition": {
            "description": "Sets the position of the watermark image",
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizerWatermarkPosition"
              }
            ]
          },
          "OptimizerWatermarkOffset": {
            "type": "number",
            "description": "Sets the offset of the watermark image",
            "format": "double"
          },
          "OptimizerWatermarkMinImageSize": {
            "type": "integer",
            "description": "Sets the minimum image size to which the watermark will be added",
            "format": "int32"
          },
          "OptimizerAutomaticOptimizationEnabled": {
            "type": "boolean",
            "description": "Determines if the automatic image optimization should be enabled"
          },
          "PermaCacheStorageZoneId": {
            "type": "integer",
            "description": "The IP of the storage zone used for Perma-Cache",
            "format": "int64"
          },
          "OriginRetries": {
            "type": "integer",
            "description": "The number of retries to the origin server",
            "format": "int32"
          },
          "OriginConnectTimeout": {
            "type": "integer",
            "description": "The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.",
            "format": "int32"
          },
          "OriginResponseTimeout": {
            "type": "integer",
            "description": "The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.",
            "format": "int32"
          },
          "UseStaleWhileUpdating": {
            "type": "boolean",
            "description": "Determines if we should use stale cache while cache is updating"
          },
          "UseStaleWhileOffline": {
            "type": "boolean",
            "description": "Determines if we should use stale cache while the origin is offline"
          },
          "OriginRetry5XXResponses": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a 5XX response."
          },
          "OriginRetryConnectionTimeout": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a connection timeout."
          },
          "OriginRetryResponseTimeout": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a response timeout."
          },
          "OriginRetryDelay": {
            "type": "integer",
            "description": "Determines the amount of time that the CDN should wait before retrying an origin request.",
            "format": "int32"
          },
          "QueryStringVaryParameters": {
            "type": "array",
            "description": "Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key",
            "items": {
              "type": "string"
            }
          },
          "OriginShieldEnableConcurrencyLimit": {
            "type": "boolean",
            "description": "Determines if the origin shield concurrency limit is enabled."
          },
          "OriginShieldMaxConcurrentRequests": {
            "type": "integer",
            "description": "Determines the number of maximum concurrent requests allowed to the origin.",
            "format": "int32"
          },
          "EnableSafeHop": {
            "type": "boolean"
          },
          "CacheErrorResponses": {
            "type": "boolean",
            "description": "Determines if bunny.net should be caching error responses"
          },
          "OriginShieldQueueMaxWaitTime": {
            "type": "integer",
            "description": "Determines the max queue wait time",
            "format": "int32"
          },
          "OriginShieldMaxQueuedRequests": {
            "type": "integer",
            "description": "Determines the max number of origin requests that will remain in the queu",
            "format": "int32"
          },
          "OptimizerClasses": {
            "type": "array",
            "description": "Contains the list of optimizer classes",
            "items": {
              "$ref": "#/components/schemas/OptimizerClassModel"
            }
          },
          "OptimizerForceClasses": {
            "type": "boolean",
            "description": "Determines if the optimizer class list should be enforced"
          },
          "UseBackgroundUpdate": {
            "type": "boolean",
            "description": "Determines if cache update is performed in the background."
          },
          "EnableAutoSSL": {
            "type": "boolean",
            "description": "If set to true, any hostnames added to this Pull Zone will automatically enable SSL."
          },
          "EnableQueryStringOrdering": {
            "type": "boolean",
            "description": "If set to true the query string ordering property is enabled."
          },
          "LogAnonymizationType": {
            "description": "Gets the log anonymization type for this pull zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogAnonymizationType"
              }
            ]
          },
          "LogFormat": {
            "$ref": "#/components/schemas/PullZoneLogFormat"
          },
          "LogForwardingFormat": {
            "$ref": "#/components/schemas/PullZoneLogFormat"
          },
          "ShieldDDosProtectionType": {
            "$ref": "#/components/schemas/ShieldDDosProtectionType"
          },
          "ShieldDDosProtectionEnabled": {
            "type": "boolean"
          },
          "OriginType": {
            "description": "The type of the origin for this Pull Zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneOriginType"
              }
            ]
          },
          "EnableRequestCoalescing": {
            "type": "boolean",
            "description": "Determines if request coalescing is currently enabled."
          },
          "RequestCoalescingTimeout": {
            "type": "integer",
            "description": "Determines the lock time for coalesced requests.",
            "format": "int32"
          },
          "OriginLinkValue": {
            "type": "string",
            "description": "Returns the link short preview value for the pull zone origin connection."
          },
          "DisableLetsEncrypt": {
            "type": "boolean",
            "description": "If true, the built-in let's encrypt is disabled and requests are passed to the origin."
          },
          "EnableBunnyImageAi": {
            "type": "boolean"
          },
          "BunnyAiImageBlueprints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BunnyAiImageBlueprintModel"
            }
          },
          "PreloadingScreenEnabled": {
            "type": "boolean",
            "description": "Determines if the preloading screen is currently enabled"
          },
          "PreloadingScreenCode": {
            "type": "string",
            "description": "The custom preloading screen code"
          },
          "PreloadingScreenLogoUrl": {
            "type": "string",
            "description": "The preloading screen logo URL"
          },
          "PreloadingScreenCodeEnabled": {
            "type": "boolean",
            "description": "Determines if the custom preloader screen is enabled"
          },
          "PreloadingScreenTheme": {
            "description": "The currently configured preloading screem theme. (0 - Light, 1 - Dark)",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreloadingScreenTheme"
              }
            ]
          },
          "PreloadingScreenDelay": {
            "type": "integer",
            "description": "The delay in miliseconds after which the preloading screen will be desplayed",
            "format": "int32"
          },
          "EUUSDiscount": {
            "type": "integer",
            "description": "The Pull Zone specific pricing discount for EU and US region.",
            "format": "int32"
          },
          "SouthAmericaDiscount": {
            "type": "integer",
            "description": "The Pull Zone specific pricing discount for South America region.",
            "format": "int32"
          },
          "AfricaDiscount": {
            "type": "integer",
            "description": "The Pull Zone specific pricing discount for Africa region.",
            "format": "int32"
          },
          "AsiaOceaniaDiscount": {
            "type": "integer",
            "description": "The Pull Zone specific pricing discount for Asia & Oceania region.",
            "format": "int32"
          },
          "RoutingFilters": {
            "type": "array",
            "description": "The list of routing filters enabled for this zone",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "HostnameModel": {
        "type": "object",
        "required": [
          "Id",
          "ForceSSL",
          "IsSystemHostname",
          "HasCertificate"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique ID of the hostname",
            "format": "int64"
          },
          "Value": {
            "type": "string",
            "description": "The hostname value for the domain name"
          },
          "ForceSSL": {
            "type": "boolean",
            "description": "Determines if the Force SSL feature is enabled"
          },
          "IsSystemHostname": {
            "type": "boolean",
            "description": "Determines if this is a system hostname controlled by bunny.net"
          },
          "HasCertificate": {
            "type": "boolean",
            "description": "Determines if the hostname has an SSL certificate configured"
          },
          "Certificate": {
            "type": "string",
            "description": "Contains the Base64Url encoded certificate for the hostname"
          },
          "CertificateKey": {
            "type": "string",
            "description": "Contains the Base64Url encoded certificate key for the hostname"
          }
        }
      },
      "EdgeRuleV2Model": {
        "type": "object",
        "required": [
          "ActionType",
          "TriggerMatchingType",
          "Enabled"
        ],
        "properties": {
          "Guid": {
            "type": "string",
            "description": "The unique GUID of the edge rule"
          },
          "ActionType": {
            "description": "The action type of the edge rule. ForceSSL = 0, Redirect = 1, OriginUrl = 2, OverrideCacheTime = 3, BlockRequest = 4, SetResponseHeader = 5, SetRequestHeader = 6, ForceDownload = 7, DisableTokenAuthentication = 8, EnableTokenAuthentication = 9, OverrideCacheTimePublic = 10, IgnoreQueryString = 11, DisableOptimizer = 12, ForceCompression = 13, SetStatusCode = 14, BypassPermaCache = 15, OverrideBrowserCacheTime = 16",
            "allOf": [
              {
                "$ref": "#/components/schemas/EdgeRuleActionType"
              }
            ]
          },
          "ActionParameter1": {
            "type": "string",
            "description": "The Action parameter 1. The value depends on other parameters of the edge rule."
          },
          "ActionParameter2": {
            "type": "string",
            "description": "The Action parameter 2. The value depends on other parameters of the edge rule."
          },
          "Triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trigger"
            }
          },
          "TriggerMatchingType": {
            "description": "The trigger matching type. MatchAny = 0, MatchAll = 1, MatchNone = 2",
            "allOf": [
              {
                "$ref": "#/components/schemas/TriggerMatchingTypes"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "The description of the edge rule"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Determines if the edge rule is currently enabled or not"
          }
        }
      },
      "EdgeRuleActionType": {
        "type": "integer",
        "description": "0 = ForceSSL\n1 = Redirect\n2 = OriginUrl\n3 = OverrideCacheTime\n4 = BlockRequest\n5 = SetResponseHeader\n6 = SetRequestHeader\n7 = ForceDownload\n8 = DisableTokenAuthentication\n9 = EnableTokenAuthentication\n10 = OverrideCacheTimePublic\n11 = IgnoreQueryString\n12 = DisableOptimizer\n13 = ForceCompression\n14 = SetStatusCode\n15 = BypassPermaCache\n16 = OverrideBrowserCacheTime\n17 = OriginStorage\n18 = SetNetworkRateLimit\n19 = SetConnectionLimit\n20 = SetRequestsPerSecondLimit",
        "x-enumNames": [
          "ForceSSL",
          "Redirect",
          "OriginUrl",
          "OverrideCacheTime",
          "BlockRequest",
          "SetResponseHeader",
          "SetRequestHeader",
          "ForceDownload",
          "DisableTokenAuthentication",
          "EnableTokenAuthentication",
          "OverrideCacheTimePublic",
          "IgnoreQueryString",
          "DisableOptimizer",
          "ForceCompression",
          "SetStatusCode",
          "BypassPermaCache",
          "OverrideBrowserCacheTime",
          "OriginStorage",
          "SetNetworkRateLimit",
          "SetConnectionLimit",
          "SetRequestsPerSecondLimit"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20
        ]
      },
      "Trigger": {
        "type": "object",
        "required": [
          "Type",
          "PatternMatchingType"
        ],
        "properties": {
          "Type": {
            "description": "The type of the trigger. Url = 0, RequestHeader = 1, ResponseHeader = 2, UrlExtension = 3, CountryCode = 4, RemoteIP = 5, UrlQueryString = 6, RandomChance = 7",
            "allOf": [
              {
                "$ref": "#/components/schemas/TriggerTypes"
              }
            ]
          },
          "PatternMatches": {
            "type": "array",
            "description": "The list of pattern matches that will trigger the edge rule",
            "items": {
              "type": "string"
            }
          },
          "PatternMatchingType": {
            "description": "The type of pattern matching. MatchAny = 0, MatchAll = 1, MatchNone = 2",
            "allOf": [
              {
                "$ref": "#/components/schemas/PatternMatchingTypes"
              }
            ]
          },
          "Parameter1": {
            "type": "string",
            "description": "The trigger parameter 1. The value depends on the type of trigger."
          }
        }
      },
      "TriggerTypes": {
        "type": "integer",
        "description": "0 = Url\n1 = RequestHeader\n2 = ResponseHeader\n3 = UrlExtension\n4 = CountryCode\n5 = RemoteIP\n6 = UrlQueryString\n7 = RandomChance\n8 = StatusCode\n9 = RequestMethod\n10 = CookieValue\n11 = CountryStateCode",
        "x-enumNames": [
          "Url",
          "RequestHeader",
          "ResponseHeader",
          "UrlExtension",
          "CountryCode",
          "RemoteIP",
          "UrlQueryString",
          "RandomChance",
          "StatusCode",
          "RequestMethod",
          "CookieValue",
          "CountryStateCode"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ]
      },
      "PatternMatchingTypes": {
        "type": "integer",
        "description": "0 = MatchAny\n1 = MatchAll\n2 = MatchNone",
        "x-enumNames": [
          "MatchAny",
          "MatchAll",
          "MatchNone"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "TriggerMatchingTypes": {
        "type": "integer",
        "description": "0 = MatchAny\n1 = MatchAll\n2 = MatchNone",
        "x-enumNames": [
          "MatchAny",
          "MatchAll",
          "MatchNone"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PullZoneLogForwarderProtocolType": {
        "type": "integer",
        "description": "0 = UDP\n1 = TCP\n2 = TCPEncrypted\n3 = DataDog",
        "x-enumNames": [
          "UDP",
          "TCP",
          "TCPEncrypted",
          "DataDog"
        ],
        "enum": [
          0,
          1,
          2,
          3
        ]
      },
      "OptimizerWatermarkPosition": {
        "type": "integer",
        "description": "0 = BottomLeft\n1 = BottomRight\n2 = TopLeft\n3 = TopRight\n4 = Center\n5 = CenterStretch",
        "x-enumNames": [
          "BottomLeft",
          "BottomRight",
          "TopLeft",
          "TopRight",
          "Center",
          "CenterStretch"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ]
      },
      "OptimizerClassModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PullZoneLogFormat": {
        "type": "integer",
        "description": "0 = Plain\n1 = JSON",
        "x-enumNames": [
          "Plain",
          "JSON"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ShieldDDosProtectionType": {
        "type": "integer",
        "description": "0 = DetectOnly\n1 = ActiveStandard\n2 = ActiveAggressive",
        "x-enumNames": [
          "DetectOnly",
          "ActiveStandard",
          "ActiveAggressive"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "PullZoneOriginType": {
        "type": "integer",
        "description": "0 = OriginUrl\n1 = DnsAccelerate\n2 = StorageZone\n3 = LoadBalancer\n4 = EdgeScript\n5 = MagicContainers\n6 = PushZone",
        "x-enumNames": [
          "OriginUrl",
          "DnsAccelerate",
          "StorageZone",
          "LoadBalancer",
          "EdgeScript",
          "MagicContainers",
          "PushZone"
        ],
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ]
      },
      "BunnyAiImageBlueprintModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "PreloadingScreenTheme": {
        "type": "integer",
        "description": "0 = Light\n1 = Dark",
        "x-enumNames": [
          "Light",
          "Dark"
        ],
        "enum": [
          0,
          1
        ]
      },
      "ToggleRequestModel": {
        "type": "object",
        "required": [
          "Id",
          "Value"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Value": {
            "type": "boolean"
          }
        }
      },
      "PullZoneSettingsModel": {
        "type": "object",
        "properties": {
          "OriginUrl": {
            "type": "string",
            "description": "Sets the origin URL of the Pull Zone"
          },
          "AllowedReferrers": {
            "type": "array",
            "description": "Sets the list of referrer hostnames that are allowed to access the pull zone. Requests containing the header Referer: hostname that is not on the list will be rejected. If empty, all the referrers are allowed",
            "items": {
              "type": "string"
            }
          },
          "BlockedReferrers": {
            "type": "array",
            "description": "Sets the list of referrer hostnames that are blocked from accessing the pull zone.",
            "items": {
              "type": "string"
            }
          },
          "BlockedIps": {
            "type": "array",
            "description": "Sets the list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed",
            "items": {
              "type": "string"
            }
          },
          "EnableGeoZoneUS": {
            "type": "boolean",
            "description": "Determines if the delivery from the North America region should be enabled for this pull zone"
          },
          "EnableGeoZoneEU": {
            "type": "boolean",
            "description": "Determines if the delivery from the Europe region should be enabled for this pull zone"
          },
          "EnableGeoZoneASIA": {
            "type": "boolean",
            "description": "Determines if the delivery from the Asia / Oceania regions should be enabled for this pull zone"
          },
          "EnableGeoZoneSA": {
            "type": "boolean",
            "description": "Determines if the delivery from the South America region should be enabled for this pull zone"
          },
          "EnableGeoZoneAF": {
            "type": "boolean",
            "description": "Determines if the delivery from the Africa region should be enabled for this pull zone"
          },
          "BlockRootPathAccess": {
            "type": "boolean",
            "description": "Determines if the zone should block requests to the root of the zone."
          },
          "BlockPostRequests": {
            "type": "boolean",
            "description": "Determines if the POST requests to this zone should be rejected."
          },
          "EnableQueryStringOrdering": {
            "type": "boolean",
            "description": "Determines if the query string ordering should be enabled."
          },
          "EnableWebpVary": {
            "type": "boolean",
            "description": "Determines if the WebP Vary feature should be enabled."
          },
          "EnableAvifVary": {
            "type": "boolean",
            "description": "Determines if the AVIF Vary feature should be enabled."
          },
          "EnableMobileVary": {
            "type": "boolean",
            "description": "Determines if the Mobile Vary feature is enabled."
          },
          "EnableCountryCodeVary": {
            "type": "boolean",
            "description": "Determines if the Country Code Vary feature should be enabled."
          },
          "EnableHostnameVary": {
            "type": "boolean",
            "description": "Determines if the Hostname Vary feature should be enabled."
          },
          "EnableCacheSlice": {
            "type": "boolean",
            "description": "Determines if cache slicing (Optimize for video) should be enabled for this zone"
          },
          "ZoneSecurityEnabled": {
            "type": "boolean",
            "description": "Determines if the zone token authentication security should be enabled"
          },
          "ZoneSecurityIncludeHashRemoteIP": {
            "type": "boolean",
            "description": "Determines if the token authentication IP validation should be enabled"
          },
          "IgnoreQueryStrings": {
            "type": "boolean",
            "description": "Determines if the Pull Zone should ignore query strings when serving cached objects (Vary by Query String)"
          },
          "MonthlyBandwidthLimit": {
            "type": "integer",
            "description": "Sets the monthly limit of bandwidth in bytes that the pullzone is allowed to use",
            "format": "int64"
          },
          "AccessControlOriginHeaderExtensions": {
            "type": "array",
            "description": "Sets the list of extensions that will return the CORS headers",
            "items": {
              "type": "string"
            }
          },
          "EnableAccessControlOriginHeader": {
            "type": "boolean",
            "description": "Determines if CORS headers should be enabled"
          },
          "DisableCookies": {
            "type": "boolean",
            "description": "Determines if the Pull Zone should automatically remove cookies from the responses"
          },
          "BudgetRedirectedCountries": {
            "type": "array",
            "description": "Sets the list of two letter Alpha2 country codes that will be redirected to the cheapest possible region",
            "items": {
              "type": "string"
            }
          },
          "BlockedCountries": {
            "type": "array",
            "description": "Sets the list of two letter Alpha2 country codes that will be blocked from accessing the zone",
            "items": {
              "type": "string"
            }
          },
          "CacheControlMaxAgeOverride": {
            "type": "integer",
            "description": "Sets the cache control override setting for this zone",
            "format": "int64"
          },
          "CacheControlPublicMaxAgeOverride": {
            "type": "integer",
            "description": "Sets the browser cache control override setting for this zone",
            "format": "int64"
          },
          "CacheControlBrowserMaxAgeOverride": {
            "type": "integer",
            "description": "(Deprecated) Sets the browser cache control override setting for this zone",
            "format": "int64"
          },
          "AddHostHeader": {
            "type": "boolean",
            "description": "Determines if the zone should forward the requested host header to the origin"
          },
          "AddCanonicalHeader": {
            "type": "boolean",
            "description": "Determines if the canonical header should be added by this zone"
          },
          "EnableLogging": {
            "type": "boolean",
            "description": "Determines if the logging should be enabled for this zone"
          },
          "LoggingIPAnonymizationEnabled": {
            "type": "boolean",
            "description": "Determines if the log anonoymization should be enabled"
          },
          "PermaCacheStorageZoneId": {
            "type": "integer",
            "description": "The ID of the storage zone that should be used as the Perma-Cache",
            "format": "int64"
          },
          "AWSSigningEnabled": {
            "type": "boolean",
            "description": "Determines if the AWS signing should be enabled or not"
          },
          "AWSSigningKey": {
            "type": "string",
            "description": "Sets the AWS signing key"
          },
          "AWSSigningRegionName": {
            "type": "string",
            "description": "Sets the AWS signing region name"
          },
          "AWSSigningSecret": {
            "type": "string",
            "description": "Sets the AWS signing secret key"
          },
          "EnableOriginShield": {
            "type": "boolean",
            "description": "Determines if the origin shield should be enabled"
          },
          "OriginShieldZoneCode": {
            "type": "string",
            "description": "Determines the zone code where the origin shield should be set up"
          },
          "EnableTLS1": {
            "type": "boolean",
            "description": "Determines if the TLS 1 should be enabled on this zone"
          },
          "EnableTLS1_1": {
            "type": "boolean",
            "description": "Determines if the TLS 1.1 should be enabled on this zone"
          },
          "CacheErrorResponses": {
            "type": "boolean",
            "description": "Determines if the cache error responses should be enabled on the zone"
          },
          "VerifyOriginSSL": {
            "type": "boolean",
            "description": "Determines if the SSL certificate should be verified when connecting to the origin"
          },
          "LogForwardingEnabled": {
            "type": "boolean",
            "description": "Sets the log forwarding token for the zone"
          },
          "LogForwardingHostname": {
            "type": "string",
            "description": "Sets the log forwarding destination hostname for the zone"
          },
          "LogForwardingPort": {
            "type": "integer",
            "description": "Sets the log forwarding port for the zone",
            "format": "int32"
          },
          "LogForwardingToken": {
            "type": "string",
            "description": "Sets the log forwarding token for the zone"
          },
          "LogForwardingProtocol": {
            "description": "Sets the log forwarding protocol type",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneLogForwarderProtocolType"
              }
            ]
          },
          "LoggingSaveToStorage": {
            "type": "boolean",
            "description": "Determines if the logging permanent storage should be enabled"
          },
          "LoggingStorageZoneId": {
            "type": "integer",
            "description": "Sets the Storage Zone id that should contain the logs from this Pull Zone",
            "format": "int64"
          },
          "FollowRedirects": {
            "type": "boolean",
            "description": "Determines if the zone should follow redirects return by the oprigin and cache the response"
          },
          "ConnectionLimitPerIPCount": {
            "type": "integer",
            "description": "Determines the maximum number of connections per IP that will be allowed to connect to this Pull Zone",
            "format": "int32"
          },
          "RequestLimit": {
            "type": "integer",
            "description": "Determines the maximum number of requests per second that will be allowed to connect to this Pull Zone",
            "format": "int32"
          },
          "LimitRateAfter": {
            "type": "number",
            "description": "Determines the amount of traffic transferred before the client is limited",
            "format": "double"
          },
          "LimitRatePerSecond": {
            "type": "integer",
            "description": "Determines the maximum number of requests per second coming from a single IP before it is blocked.",
            "format": "int32"
          },
          "BurstSize": {
            "type": "integer",
            "description": "Determines the maximum burst requests before an IP is blocked",
            "format": "int32"
          },
          "WAFEnabled": {
            "type": "boolean",
            "description": "Determines if WAF should be enabled on the zone"
          },
          "WAFDisabledRuleGroups": {
            "type": "array",
            "description": "Determines the enabled WAF rule groups",
            "items": {
              "type": "string"
            }
          },
          "WAFDisabledRules": {
            "type": "array",
            "description": "Determines the disabled WAF rules",
            "items": {
              "type": "string"
            }
          },
          "WAFEnableRequestHeaderLogging": {
            "type": "boolean",
            "description": "Determines if WAF should enable request headers logging"
          },
          "WAFRequestHeaderIgnores": {
            "type": "array",
            "description": "Determines the list of headers that will be ignored in the WAF logs",
            "items": {
              "type": "string"
            }
          },
          "ErrorPageEnableCustomCode": {
            "type": "boolean",
            "description": "Determines if custom error page code should be enabled."
          },
          "ErrorPageCustomCode": {
            "type": "string",
            "description": "Contains the custom error page code that will be returned"
          },
          "ErrorPageEnableStatuspageWidget": {
            "type": "boolean",
            "description": "Determines if the statuspage widget should be displayed on the error pages"
          },
          "ErrorPageStatuspageCode": {
            "type": "string",
            "description": "The statuspage code that will be used to build the status widget"
          },
          "ErrorPageWhitelabel": {
            "type": "boolean",
            "description": "Determines if the error pages should be whitelabel or not"
          },
          "OptimizerEnabled": {
            "type": "boolean",
            "description": "Determines if the optimizer should be enabled for this zone"
          },
          "OptimizerDesktopMaxWidth": {
            "type": "integer",
            "description": "Determines the maximum automatic image size for desktop clients",
            "format": "int32",
            "maximum": 5000,
            "minimum": 0
          },
          "OptimizerMobileMaxWidth": {
            "type": "integer",
            "description": "Determines the maximum automatic image size for mobile clients",
            "format": "int32",
            "maximum": 5000,
            "minimum": 0
          },
          "OptimizerImageQuality": {
            "type": "integer",
            "description": "Determines the image quality for desktop clients",
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "OptimizerMobileImageQuality": {
            "type": "integer",
            "description": "Determines the image quality for mobile clients",
            "format": "int32",
            "maximum": 100,
            "minimum": 1
          },
          "OptimizerEnableWebP": {
            "type": "boolean",
            "description": "Determines if the WebP optimization should be enabled"
          },
          "OptimizerEnableManipulationEngine": {
            "type": "boolean",
            "description": "Determines the image manipulation should be enabled"
          },
          "OptimizerMinifyCSS": {
            "type": "boolean",
            "description": "Determines if the CSS minifcation should be enabled"
          },
          "OptimizerMinifyJavaScript": {
            "type": "boolean",
            "description": "Determines if the JavaScript minifcation should be enabled"
          },
          "OptimizerWatermarkEnabled": {
            "type": "boolean",
            "description": "Determines if image watermarking should be enabled"
          },
          "OptimizerWatermarkUrl": {
            "type": "string",
            "description": "Sets the URL of the watermark image"
          },
          "OptimizerWatermarkPosition": {
            "description": "Sets the position of the watermark image",
            "allOf": [
              {
                "$ref": "#/components/schemas/OptimizerWatermarkPosition"
              }
            ]
          },
          "OptimizerWatermarkOffset": {
            "type": "number",
            "description": "Sets the offset of the watermark image",
            "format": "double"
          },
          "OptimizerWatermarkMinImageSize": {
            "type": "integer",
            "description": "Sets the minimum image size to which the watermark will be added",
            "format": "int32"
          },
          "OptimizerAutomaticOptimizationEnabled": {
            "type": "boolean",
            "description": "Determines if the automatic image optimization should be enabled"
          },
          "OptimizerClasses": {
            "type": "array",
            "description": "Determines the list of optimizer classes",
            "items": {
              "$ref": "#/components/schemas/PullZoneOptimizerClassModel"
            }
          },
          "OptimizerForceClasses": {
            "type": "boolean",
            "description": "Determines if the optimizer classes should be forced"
          },
          "Type": {
            "description": "The type of the pull zone. Premium = 0, Volume = 1",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneType"
              }
            ]
          },
          "OriginRetries": {
            "type": "integer",
            "description": "The number of retries to the origin server",
            "format": "int32"
          },
          "OriginConnectTimeout": {
            "type": "integer",
            "description": "The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.",
            "format": "int32"
          },
          "OriginResponseTimeout": {
            "type": "integer",
            "description": "The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.",
            "format": "int32"
          },
          "UseStaleWhileUpdating": {
            "type": "boolean",
            "description": "Determines if we should use stale cache while cache is updating"
          },
          "UseStaleWhileOffline": {
            "type": "boolean",
            "description": "Determines if we should use stale cache while the origin is offline"
          },
          "OriginRetry5XXResponses": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a 5XX response."
          },
          "OriginRetryConnectionTimeout": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a connection timeout."
          },
          "OriginRetryResponseTimeout": {
            "type": "boolean",
            "description": "Determines if we should retry the request in case of a response timeout."
          },
          "OriginRetryDelay": {
            "type": "integer",
            "description": "Determines the amount of time that the CDN should wait before retrying an origin request.",
            "format": "int32"
          },
          "DnsOriginPort": {
            "type": "integer",
            "description": "Determines the origin port of the pull zone.",
            "format": "int32"
          },
          "DnsOriginScheme": {
            "type": "string",
            "description": "Determines the origin scheme of the pull zone."
          },
          "QueryStringVaryParameters": {
            "type": "array",
            "description": "Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key",
            "items": {
              "type": "string"
            }
          },
          "OriginShieldEnableConcurrencyLimit": {
            "type": "boolean",
            "description": "Determines if the origin shield concurrency limit is enabled."
          },
          "OriginShieldMaxConcurrentRequests": {
            "type": "integer",
            "description": "Determines the number of maximum concurrent requests allowed to the origin.",
            "format": "int32",
            "maximum": 10000,
            "minimum": 1
          },
          "EnableCookieVary": {
            "type": "boolean",
            "description": "Determines if the Cookie Vary feature is enabled."
          },
          "CookieVaryParameters": {
            "type": "array",
            "description": "Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.",
            "items": {
              "type": "string"
            }
          },
          "EnableSafeHop": {
            "type": "boolean"
          },
          "OriginShieldQueueMaxWaitTime": {
            "type": "integer",
            "description": "Determines the max queue wait time",
            "format": "int32"
          },
          "OriginShieldMaxQueuedRequests": {
            "type": "integer",
            "description": "Determines the max number of origin requests that will remain in the queue",
            "format": "int32",
            "maximum": 30000,
            "minimum": 0
          },
          "UseBackgroundUpdate": {
            "type": "boolean",
            "description": "Determines if cache update is performed in the background."
          },
          "EnableAutoSSL": {
            "type": "boolean",
            "description": "If set to true, any hostnames added to this Pull Zone will automatically enable SSL."
          },
          "LogAnonymizationType": {
            "description": "Sets the log anonymization type for this pull zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/LogAnonymizationType"
              }
            ]
          },
          "StorageZoneId": {
            "type": "integer",
            "description": "The ID of the storage zone that will be used as the origin",
            "format": "int64"
          },
          "EdgeScriptId": {
            "type": "integer",
            "description": "The ID of the edge script that will be used as the origin",
            "format": "int64"
          },
          "OriginType": {
            "description": "Determine the type of the origin for this Pull Zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneOriginType"
              }
            ]
          },
          "MagicContainersAppId": {
            "type": "string"
          },
          "LogFormat": {
            "$ref": "#/components/schemas/PullZoneLogFormat"
          },
          "LogForwardingFormat": {
            "$ref": "#/components/schemas/PullZoneLogFormat"
          },
          "ShieldDDosProtectionType": {
            "$ref": "#/components/schemas/ShieldDDosProtectionType"
          },
          "ShieldDDosProtectionEnabled": {
            "type": "boolean"
          },
          "OriginHostHeader": {
            "type": "string",
            "description": "Sets the host header that will be sent to the origin"
          },
          "EnableSmartCache": {
            "type": "boolean"
          },
          "EnableRequestCoalescing": {
            "type": "boolean",
            "description": "Determines if request coalescing is currently enabled."
          },
          "RequestCoalescingTimeout": {
            "type": "integer",
            "description": "Determines the lock time for coalesced requests.",
            "format": "int32"
          },
          "DisableLetsEncrypt": {
            "type": "boolean",
            "description": "If set to true, the built-in let's encrypt will be disabled and requests are passed to the origin."
          },
          "EnableBunnyImageAi": {
            "type": "boolean"
          },
          "BunnyAiImageBlueprints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BunnyAiImageBlueprintModel"
            }
          },
          "PreloadingScreenEnabled": {
            "type": "boolean",
            "description": "Determines if the preloading screen is currently enabled"
          },
          "PreloadingScreenCode": {
            "type": "string",
            "description": "The custom preloading screen coed"
          },
          "PreloadingScreenLogoUrl": {
            "type": "string",
            "description": "The preloading screen logo URL"
          },
          "PreloadingScreenTheme": {
            "description": "The currently configured preloading screem theme. (0 - Light, 1 - Dark)",
            "allOf": [
              {
                "$ref": "#/components/schemas/PreloadingScreenTheme"
              }
            ]
          },
          "PreloadingScreenCodeEnabled": {
            "type": "boolean",
            "description": "Determines if the custom preloader screen should be enabled"
          },
          "PreloadingScreenDelay": {
            "type": "integer",
            "description": "The delay in miliseconds after which the preloading screen will be displayed (0 - 10000ms)",
            "format": "int32",
            "maximum": 10000,
            "minimum": 0
          },
          "RoutingFilters": {
            "type": "array",
            "description": "The list of routing filters enabled for this zone",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PullZoneOptimizerClassModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the optimizer class that will be used in the query string"
          },
          "Properties": {
            "type": "object",
            "description": "The list of settings and values the class will send to the optimizer",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "OriginShieldConcurrencyStatisticsModel": {
        "type": "object",
        "properties": {
          "ConcurrentRequestsChart": {
            "type": "object",
            "description": "The constructed chart of origin shield concurrent requests",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "QueuedRequestsChart": {
            "type": "object",
            "description": "The constructed chart of origin shield requests chart",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SafeHopStatisticsModel": {
        "type": "object",
        "required": [
          "TotalRequestsRetried",
          "TotalRequestsSaved"
        ],
        "properties": {
          "RequestsRetriedChart": {
            "type": "object",
            "description": "The constructed chart of requests retried",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "RequestsSavedChart": {
            "type": "object",
            "description": "The constructed chart of requests saved",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "TotalRequestsRetried": {
            "type": "number",
            "description": "The total number of retried requests",
            "format": "double"
          },
          "TotalRequestsSaved": {
            "type": "number",
            "description": "The total number of saved requests",
            "format": "double"
          }
        }
      },
      "OptimizerStatisticsModel": {
        "type": "object",
        "required": [
          "TotalRequestsOptimized",
          "TotalTrafficSaved",
          "AverageProcessingTime",
          "AverageCompressionRatio"
        ],
        "properties": {
          "RequestsOptimizedChart": {
            "type": "object",
            "description": "The constructed chart of optimized requests",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "AverageCompressionChart": {
            "type": "object",
            "description": "Average compression chart of the responses",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "TrafficSavedChart": {
            "type": "object",
            "description": "The constructed chart of saved traffic",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "AverageProcessingTimeChart": {
            "type": "object",
            "description": "The constructed chart of saved traffic",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "TotalRequestsOptimized": {
            "type": "number",
            "description": "The total number of optimized requests",
            "format": "double"
          },
          "TotalTrafficSaved": {
            "type": "number",
            "description": "The total requests saved",
            "format": "double"
          },
          "AverageProcessingTime": {
            "type": "number",
            "description": "The average processing time of each request",
            "format": "double"
          },
          "AverageCompressionRatio": {
            "type": "number",
            "description": "The average compression ratio of CDN responses",
            "format": "double"
          }
        }
      },
      "PullZonePurgeModel": {
        "type": "object",
        "properties": {
          "CacheTag": {
            "type": "string"
          }
        }
      },
      "PullZoneAddModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PullZoneSettingsModel"
          },
          {
            "type": "object",
            "required": [
              "Name"
            ],
            "properties": {
              "Name": {
                "type": "string",
                "description": "The name of the pull zone.",
                "minLength": 1
              }
            }
          }
        ]
      },
      "AddCertificateRequestModel": {
        "type": "object",
        "required": [
          "Hostname",
          "Certificate",
          "CertificateKey"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname to which the hostname will be added",
            "minLength": 1
          },
          "Certificate": {
            "type": "string",
            "description": "The Base64Url encoded binary data of the certificate file",
            "minLength": 1
          },
          "CertificateKey": {
            "type": "string",
            "description": "The Base64Url encoded binary data of the certificate key file",
            "minLength": 1
          }
        }
      },
      "RemoveCertificateRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname from which the certificate will be removed",
            "minLength": 1
          }
        }
      },
      "AddHostnameRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be added",
            "minLength": 1
          }
        }
      },
      "RemoveHostnameRequestModel": {
        "type": "object",
        "required": [
          "Hostname"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be removed",
            "minLength": 1
          }
        }
      },
      "ForceSSLRequestModel": {
        "type": "object",
        "required": [
          "Hostname",
          "ForceSSL"
        ],
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "The hostname that will be updated",
            "minLength": 1
          },
          "ForceSSL": {
            "type": "boolean",
            "description": "Set to true to force SSL on the given pull zone hostname"
          }
        }
      },
      "AddBlockedIpRequestModel": {
        "type": "object",
        "required": [
          "BlockedIp"
        ],
        "properties": {
          "BlockedIp": {
            "type": "string",
            "description": "The IP that will be blocked from accessing the pull zone",
            "minLength": 1
          }
        }
      },
      "RemoveBlockedIpRequestModel": {
        "type": "object",
        "required": [
          "BlockedIp"
        ],
        "properties": {
          "BlockedIp": {
            "type": "string",
            "description": "The IP that will be removed fromt he block list",
            "minLength": 1
          }
        }
      },
      "StatisticsModel": {
        "type": "object",
        "required": [
          "TotalBandwidthUsed",
          "TotalOriginTraffic",
          "AverageOriginResponseTime",
          "TotalRequestsServed",
          "CacheHitRate"
        ],
        "properties": {
          "TotalBandwidthUsed": {
            "type": "integer",
            "description": "The total bandwidth used by the response in the given time range",
            "format": "int64"
          },
          "TotalOriginTraffic": {
            "type": "integer",
            "description": "The total amount of traffic received from the origin",
            "format": "int64"
          },
          "AverageOriginResponseTime": {
            "type": "integer",
            "description": "The median response time origin",
            "format": "int32"
          },
          "OriginResponseTimeChart": {
            "type": "object",
            "description": "The constructed origin response time chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "TotalRequestsServed": {
            "type": "integer",
            "description": "The total requests served by the response in the given time range",
            "format": "int64"
          },
          "CacheHitRate": {
            "type": "number",
            "description": "The average cache hit rate in the response in the given time range",
            "format": "double"
          },
          "BandwidthUsedChart": {
            "type": "object",
            "description": "The constructed bandwdidth used chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "BandwidthCachedChart": {
            "type": "object",
            "description": "The constructed cached bandwdidth used chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "CacheHitRateChart": {
            "type": "object",
            "description": "The constructed cache hit rate chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "RequestsServedChart": {
            "type": "object",
            "description": "The constructed requests served chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "PullRequestsPulledChart": {
            "type": "object",
            "description": "The constructed uncached requests served chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "OriginShieldBandwidthUsedChart": {
            "type": "object",
            "description": "The constructed origin shield bandwdidth used chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "OriginShieldInternalBandwidthUsedChart": {
            "type": "object",
            "description": "The constructed origin shield internal bandwdidth used chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "OriginTrafficChart": {
            "type": "object",
            "description": "The constructed origin traffic used chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "UserBalanceHistoryChart": {
            "type": "object",
            "description": "The constructed user balance history chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "GeoTrafficDistribution": {
            "type": "object",
            "description": "The geo traffic distribution data",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "Error3xxChart": {
            "type": "object",
            "description": "The constructed 3XX error responses chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "Error4xxChart": {
            "type": "object",
            "description": "The constructed 4XX error responses chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "Error5xxChart": {
            "type": "object",
            "description": "The constructed 5XX error responses chart data",
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          }
        }
      },
      "PaginationListModelOfStorageZoneModel": {
        "type": "object",
        "required": [
          "CurrentPage",
          "TotalItems",
          "HasMoreItems"
        ],
        "properties": {
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StorageZoneModel"
            }
          },
          "CurrentPage": {
            "type": "integer",
            "format": "int32"
          },
          "TotalItems": {
            "type": "integer",
            "format": "int32"
          },
          "HasMoreItems": {
            "type": "boolean"
          }
        }
      },
      "StorageZoneModel": {
        "type": "object",
        "required": [
          "Id",
          "DateModified",
          "Deleted",
          "StorageUsed",
          "FilesStored",
          "Rewrite404To200",
          "ZoneTier",
          "ReplicationChangeInProgress",
          "PriceOverride",
          "Discount"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The ID of the storage zone",
            "format": "int64"
          },
          "UserId": {
            "type": "string",
            "description": "The ID of the user that owns the storage zone"
          },
          "Name": {
            "type": "string",
            "description": "The name of the storage zone"
          },
          "Password": {
            "type": "string",
            "description": "The API access key or FTP password"
          },
          "DateModified": {
            "type": "string",
            "description": "The date when the zone was last modified",
            "format": "date-time"
          },
          "Deleted": {
            "type": "boolean",
            "description": "Determines if the zone was deleted or not"
          },
          "StorageUsed": {
            "type": "integer",
            "description": "The total amount of storage used by this zone",
            "format": "int64"
          },
          "FilesStored": {
            "type": "integer",
            "description": "The total number of files stored by this zone",
            "format": "int64"
          },
          "Region": {
            "type": "string",
            "description": "The main region used by the storage zone"
          },
          "ReplicationRegions": {
            "type": "array",
            "description": "The replication regions enabled for this storage zone",
            "items": {
              "type": "string"
            }
          },
          "PullZones": {
            "type": "array",
            "description": "The list of pull zones connected to this storage zone",
            "items": {
              "$ref": "#/components/schemas/PullZoneModel"
            }
          },
          "ReadOnlyPassword": {
            "type": "string",
            "description": "The read-only API access key or FTP password"
          },
          "Rewrite404To200": {
            "type": "boolean",
            "description": "Determines if the storage zone will rewrite 404 status codes to 200 status codes"
          },
          "Custom404FilePath": {
            "type": "string",
            "description": "The custom 404 error path that will be returned in case of a missing file."
          },
          "StorageHostname": {
            "type": "string",
            "description": "Determines the storage hostname for this zone"
          },
          "ZoneTier": {
            "description": "Determines the storage zone tier that is storing the data",
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageZoneTier"
              }
            ]
          },
          "ReplicationChangeInProgress": {
            "type": "boolean",
            "description": "Determines if the storage zone is currently enabling a new replication region"
          },
          "PriceOverride": {
            "type": "number",
            "description": "The custom price override for this zone",
            "format": "decimal"
          },
          "Discount": {
            "type": "integer",
            "description": "The Storage Zone specific pricing discount.",
            "format": "int32"
          }
        }
      },
      "StorageZoneTier": {
        "type": "integer",
        "description": "0 = Standard\n1 = Edge",
        "x-enumNames": [
          "Standard",
          "Edge"
        ],
        "enum": [
          0,
          1
        ]
      },
      "StorageZonePullZoneConnection": {
        "type": "object",
        "required": [
          "PullZoneId",
          "ConnectionType",
          "MonthlyBandwidthUsed",
          "Tier",
          "MonthlyCharges"
        ],
        "properties": {
          "PullZoneId": {
            "type": "integer",
            "description": "The ID of the connected pull zone",
            "format": "int64"
          },
          "PullZoneName": {
            "type": "string",
            "description": "The name of the connected pull zone"
          },
          "ConnectionType": {
            "description": "The type of the connection",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneConnectionType"
              }
            ]
          },
          "MonthlyBandwidthUsed": {
            "type": "number",
            "description": "The total amount of bandwidth served by this zone this month",
            "format": "double"
          },
          "MainCustomDomain": {
            "type": "string",
            "description": "The main custom connected CDN domain"
          },
          "Tier": {
            "description": "The pricing tier of the pull zone",
            "allOf": [
              {
                "$ref": "#/components/schemas/PullZoneType"
              }
            ]
          },
          "MonthlyCharges": {
            "type": "number",
            "description": "The total monthly charges incurred by this zone",
            "format": "double"
          }
        }
      },
      "PullZoneConnectionType": {
        "type": "integer",
        "description": "0 = CDN\n1 = PermaCache\n2 = LogStorage",
        "x-enumNames": [
          "CDN",
          "PermaCache",
          "LogStorage"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "StorageZoneModelAdd": {
        "type": "object",
        "required": [
          "Name",
          "Region",
          "ZoneTier"
        ],
        "properties": {
          "OriginUrl": {
            "type": "string",
            "description": "The origin URL of the storage zone that will be added"
          },
          "Name": {
            "type": "string",
            "description": "The name of the storage zone",
            "minLength": 1
          },
          "Region": {
            "type": "string",
            "description": "The code of the main storage zone region (Possible values: DE, NY, LA, SG)",
            "minLength": 1
          },
          "ReplicationRegions": {
            "type": "array",
            "description": "The code of the main storage zone region (Possible values: DE, NY, LA, SG, SYD)",
            "items": {
              "type": "string"
            }
          },
          "ZoneTier": {
            "description": "Determines the storage zone tier that will be storing the data",
            "allOf": [
              {
                "$ref": "#/components/schemas/StorageZoneTier"
              }
            ]
          }
        }
      },
      "StorageZoneSettingsModel": {
        "type": "object",
        "properties": {
          "ReplicationZones": {
            "type": "array",
            "description": "The list of replication zones enabld for the storage zone",
            "items": {
              "type": "string"
            }
          },
          "OriginUrl": {
            "type": "string",
            "description": "The origin URL of the storage zone"
          },
          "Custom404FilePath": {
            "type": "string",
            "description": "The path to the custom file that will be returned in a case of 404"
          },
          "Rewrite404To200": {
            "type": "boolean",
            "description": "Rewrite 404 status code to 200 for URLs without extension"
          }
        }
      },
      "OverviewPageFeed": {
        "type": "object",
        "properties": {
          "BlogPosts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverviewResource"
            }
          },
          "Articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OverviewResource"
            }
          }
        }
      },
      "OverviewResource": {
        "type": "object",
        "required": [
          "DatePublished"
        ],
        "properties": {
          "Title": {
            "type": "string"
          },
          "ImageUrl": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "DatePublished": {
            "type": "string",
            "format": "date-time"
          },
          "Summary": {
            "type": "string"
          }
        }
      },
      "NotificationModel": {
        "type": "object",
        "required": [
          "Id",
          "Opened",
          "Type",
          "Timestamp",
          "DateTimeOpened"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique ID of the notification",
            "format": "int64"
          },
          "Opened": {
            "type": "boolean",
            "description": "Determines if the notification has already been opened"
          },
          "Title": {
            "type": "string",
            "description": "The title of the notification"
          },
          "Message": {
            "type": "string",
            "description": "The message of the notification"
          },
          "Url": {
            "type": "string",
            "description": "The URL where the notification is linking to"
          },
          "Type": {
            "description": "The type of the notification",
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationType"
              }
            ]
          },
          "Timestamp": {
            "type": "string",
            "description": "The timestamp when the notification was created",
            "format": "date-time"
          },
          "DateTimeOpened": {
            "type": "string",
            "description": "The date when the notification was opened",
            "format": "date-time"
          }
        }
      },
      "NotificationType": {
        "type": "integer",
        "description": "0 = Info\n1 = Warning\n2 = Problem",
        "x-enumNames": [
          "Info",
          "Warning",
          "Problem"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "AccountCloseReason": {
        "type": "object",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "CloseAccountRequestModel": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          },
          "Reason": {
            "type": "string"
          }
        }
      },
      "DpaAcceptResult": {
        "type": "object",
        "required": [
          "Success"
        ],
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Message": {
            "type": "string"
          }
        }
      },
      "UserUpdateModel": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "(Optional) Sets the first name of the account owner"
          },
          "Email": {
            "type": "string",
            "description": "(Optional) Sets the user email",
            "format": "email"
          },
          "BillingEmail": {
            "type": "string",
            "description": "(Optional) Sets the billing email where the invoices will be sent",
            "format": "email"
          },
          "LastName": {
            "type": "string",
            "description": "(Optional) Sets the last name of the account owner"
          },
          "StreetAddress": {
            "type": "string",
            "description": "(Optional) Sets the street name and number of the user's address"
          },
          "City": {
            "type": "string",
            "description": "(Optional) Sets the city name of the user's address"
          },
          "ZipCode": {
            "type": "string",
            "description": "(Optional) Sets the ZIP code of the user's address"
          },
          "Country": {
            "type": "string",
            "description": "(Optional) Sets the country of the user's address"
          },
          "CompanyName": {
            "type": "string",
            "description": "(Optional) Sets the company name of the company responsible for the account"
          },
          "VATNumber": {
            "type": "string",
            "description": "(Optional) Sets the VAT number used for the billing details (EU VAT numbers only are accepted)"
          },
          "ReceiveNotificationEmails": {
            "type": "boolean",
            "description": "(Optional) Determines if the account should receive notification emails from bunny.net"
          },
          "ReceivePromotionalEmails": {
            "type": "boolean",
            "description": "(Optional) Determines if the account should receive promotional emails from bunny.net"
          },
          "Password": {
            "type": "string",
            "description": "(Optional) Sets the login password for the user account. OldPassword should also be sent."
          },
          "OldPassword": {
            "type": "string",
            "description": "(Optional) The verification password when changing the password through the Password property."
          }
        }
      },
      "WhatsNewModel": {
        "type": "object",
        "required": [
          "Id",
          "Timestamp",
          "Type",
          "IsNew"
        ],
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int64"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "Title": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Type": {
            "$ref": "#/components/schemas/WhatsNewModelType"
          },
          "IsNew": {
            "type": "boolean"
          }
        }
      },
      "WhatsNewModelType": {
        "type": "integer",
        "description": "0 = Feature\n1 = Update\n2 = BugFix",
        "x-enumNames": [
          "Feature",
          "Update",
          "BugFix"
        ],
        "enum": [
          0,
          1,
          2
        ]
      },
      "TwoFactorModel": {
        "type": "object",
        "properties": {
          "SecretValidator": {
            "type": "string"
          },
          "Secret": {
            "type": "string"
          },
          "QrCodeBase64": {
            "type": "string"
          }
        }
      },
      "TwoFactorEnableResultModel": {
        "type": "object",
        "required": [
          "Success"
        ],
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Error": {
            "type": "string"
          }
        }
      },
      "TwoFactorDisableRequestModel": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string"
          }
        }
      },
      "TwoFactorVerifyModel": {
        "type": "object",
        "properties": {
          "SecretValidator": {
            "type": "string"
          },
          "Secret": {
            "type": "string"
          },
          "TestPin": {
            "type": "string"
          }
        }
      },
      "TwoFactorVerifyResultModel": {
        "type": "object",
        "required": [
          "Success"
        ],
        "properties": {
          "Success": {
            "type": "boolean"
          },
          "Error": {
            "type": "string"
          }
        }
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true,
    "samples-enabled": true
  }
}