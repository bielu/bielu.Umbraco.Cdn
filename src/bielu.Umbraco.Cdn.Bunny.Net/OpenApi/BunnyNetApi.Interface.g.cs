//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace bielu.Umbraco.Cdn.Bunny.Net.Api.Interface
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBunnyNetApiClient
    {
        /// <summary>
        /// List Abuse Cases
        /// </summary>
        /// <returns>The list of all abuse cases on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfAbuseCaseModel> AbuseCasePublic_IndexAsync(int? page, int? perPage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Abuse Cases
        /// </summary>
        /// <returns>The list of all abuse cases on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfAbuseCaseModel> AbuseCasePublic_IndexAsync(int? page, int? perPage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_GetAbuseCaseAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_GetAbuseCaseAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_GetAbuseCase2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_GetAbuseCase2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Resolve Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbuseCasePublic_ResolveabuseCaseAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbuseCasePublic_ResolveabuseCaseAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Resolve Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbuseCasePublic_ResolveabuseCase2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resolve Abuse Case
        /// </summary>
        /// <returns>The abuse case was set to pending</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AbuseCasePublic_ResolveabuseCase2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check Abuse Case
        /// </summary>
        /// <returns>The updated abuse case object that was checked</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_CheckAbuseCaseAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check Abuse Case
        /// </summary>
        /// <returns>The updated abuse case object that was checked</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbuseCaseModel> AbuseCasePublic_CheckAbuseCaseAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <returns>The login request was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JwtAuthResultModel> AuthPublic_AuthJwt2faAsync(JwtTwoFactorModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The login request was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JwtAuthResultModel> AuthPublic_AuthJwt2faAsync(JwtTwoFactorModel body, System.Threading.CancellationToken cancellationToken);

        /// <returns>The token refresh was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JwtAuthResultModel> AuthPublic_RefreshJwtAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The token refresh was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JwtAuthResultModel> AuthPublic_RefreshJwtAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Global Search
        /// </summary>
        /// <returns>The list of platfom-wide search results</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultsModel> SearchPublic_GlobalSearchAsync(string search, int? from, int? size);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Global Search
        /// </summary>
        /// <returns>The list of platfom-wide search results</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultsModel> SearchPublic_GlobalSearchAsync(string search, int? from, int? size, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Country List
        /// </summary>
        /// <returns>The list of countries and tax rates</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> CountriesPublic_GetCountryListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Country List
        /// </summary>
        /// <returns>The list of countries and tax rates</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> CountriesPublic_GetCountryListAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Billing Details
        /// </summary>
        /// <returns>Get the billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_IndexAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Billing Details
        /// </summary>
        /// <returns>Get the billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_IndexAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Configure Auto Recharge
        /// </summary>
        /// <returns>The current billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_ConfigureAutoRechargeAsync(ConfigureRechargeUpdateModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Configure Auto Recharge
        /// </summary>
        /// <returns>The current billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_ConfigureAutoRechargeAsync(ConfigureRechargeUpdateModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Payment Checkout
        /// </summary>
        /// <returns>The current billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_CheckoutAsync(CheckoutRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Payment Checkout
        /// </summary>
        /// <returns>The current billing status details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingModel> BillingPublic_CheckoutAsync(CheckoutRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Prepare Payment Authorization
        /// </summary>
        /// <returns>The payment authorization details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentAuthorization> BillingPublic_PaymentsPrepareAuthorizationAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Prepare Payment Authorization
        /// </summary>
        /// <returns>The payment authorization details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaymentAuthorization> BillingPublic_PaymentsPrepareAuthorizationAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Affiliate Details
        /// </summary>
        /// <returns>Get the affiliate details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingAffiliateDetailsModel> BillingPublic_AffiliateDetailsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Affiliate Details
        /// </summary>
        /// <returns>Get the affiliate details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingAffiliateDetailsModel> BillingPublic_AffiliateDetailsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Claim Affiliate Credits
        /// </summary>
        /// <returns>Claim the affiliate credits</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingAffiliateClaimResponseModel> BillingPublic_AffiliateClaimAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Claim Affiliate Credits
        /// </summary>
        /// <returns>Claim the affiliate credits</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BillingAffiliateClaimResponseModel> BillingPublic_AffiliateClaimAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get The Coinify BTC exchange rate
        /// </summary>
        /// <returns>Get The Coinify BTC exchange rate</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CoinifyExchangeRateModel> BillingPublic_CoinifyExchangeRateAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get The Coinify BTC exchange rate
        /// </summary>
        /// <returns>Get The Coinify BTC exchange rate</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CoinifyExchangeRateModel> BillingPublic_CoinifyExchangeRateAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Crate coinify payment
        /// </summary>
        /// <returns>Billing summary with data report for each Pull Zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BillingSummaryItem>> BillingPublic_CreateCoinifyPaymentAsync(decimal amount);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Crate coinify payment
        /// </summary>
        /// <returns>Billing summary with data report for each Pull Zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BillingSummaryItem>> BillingPublic_CreateCoinifyPaymentAsync(decimal amount, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Billing Summary
        /// </summary>
        /// <returns>Get the billing summary with data report for each Pull Zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BillingSummaryItem>> BillingPublic_SummaryAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Billing Summary
        /// </summary>
        /// <returns>Get the billing summary with data report for each Pull Zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BillingSummaryItem>> BillingPublic_SummaryAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Billing Summary PDF
        /// </summary>
        /// <param name="billingRecordId">The ID of the billing record for which the summary will be generated. This can only be a summary type record ID.</param>
        /// <returns>The HTML version of the summary to generate a PDF</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> BillingPublic_SummaryPdfAsync(long billingRecordId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Billing Summary PDF
        /// </summary>
        /// <param name="billingRecordId">The ID of the billing record for which the summary will be generated. This can only be a summary type record ID.</param>
        /// <returns>The HTML version of the summary to generate a PDF</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> BillingPublic_SummaryPdfAsync(long billingRecordId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Apply Promo Code
        /// </summary>
        /// <param name="couponCode">The coupon code that will be applied</param>
        /// <returns>Status model with the result of the code applying</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiErrorData> BillingPublic_ApplyCodeAsync(string couponCode);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Apply Promo Code
        /// </summary>
        /// <param name="couponCode">The coupon code that will be applied</param>
        /// <returns>Status model with the result of the code applying</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApiErrorData> BillingPublic_ApplyCodeAsync(string couponCode, System.Threading.CancellationToken cancellationToken);

        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of scripts on the account.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfEdgeScriptModel> ComputeEdgeScriptPublic_IndexAsync(int? page, int? perPage, string search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of scripts on the account.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfEdgeScriptModel> ComputeEdgeScriptPublic_IndexAsync(int? page, int? perPage, string search, System.Threading.CancellationToken cancellationToken);

        /// <returns>The script was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_AddScriptAsync(UpdateEdgeScriptModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The script was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_AddScriptAsync(UpdateEdgeScriptModel body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that will be returned</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_Index2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that will be returned</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_Index2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that will be updated</param>
        /// <param name="body">The configuration that should be applied to the script</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_UpdateAsync(long id, UpdateEdgeScriptModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that will be updated</param>
        /// <param name="body">The configuration that should be applied to the script</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_UpdateAsync(long id, UpdateEdgeScriptModel body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that will be deleted.</param>
        /// <returns>The script was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComputeEdgeScriptPublic_DeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that will be deleted.</param>
        /// <returns>The script was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComputeEdgeScriptPublic_DeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_GetCodeAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_GetCodeAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_SetCodeAsync(long id, UpdateEdgeScriptCodeModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_SetCodeAsync(long id, UpdateEdgeScriptCodeModel body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfEdgeScriptReleaseModel> ComputeEdgeScriptPublic_GetReleasesAsync(long id, int? page, int? perPage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the code for which the script that will be returned</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfEdgeScriptReleaseModel> ComputeEdgeScriptPublic_GetReleasesAsync(long id, int? page, int? perPage, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Publishes the current code as a release</param>
        /// <param name="uuid">The UUID of the script release that will be published</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_PublishAsync(long id, string uuid, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Publishes the current code as a release</param>
        /// <param name="uuid">The UUID of the script release that will be published</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_PublishAsync(long id, string uuid, object body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">Publishes the current code as a release</param>
        /// <param name="uuid">The UUID of the script release that will be published</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_Publish2Async(long id, string uuid, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Publishes the current code as a release</param>
        /// <param name="uuid">The UUID of the script release that will be published</param>
        /// <returns>The code of the script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_Publish2Async(long id, string uuid, object body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that will be updated</param>
        /// <param name="body">The variable that will be added</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_AddVariableAsync(long id, AddEdgeScriptVariableModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that will be updated</param>
        /// <param name="body">The variable that will be added</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_AddVariableAsync(long id, AddEdgeScriptVariableModel body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that contains the variable</param>
        /// <param name="variableId">The ID of the Environment Variable that will be updated</param>
        /// <param name="body">The variable that will be added</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_UpdateVariableAsync(long id, long variableId, UpdateEdgeScriptVariableModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that contains the variable</param>
        /// <param name="variableId">The ID of the Environment Variable that will be updated</param>
        /// <param name="body">The variable that will be added</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_UpdateVariableAsync(long id, long variableId, UpdateEdgeScriptVariableModel body, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that contains the variable</param>
        /// <param name="variableId">The ID of the Environment Variable that should be returned</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_GetVariableAsync(long id, long variableId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that contains the variable</param>
        /// <param name="variableId">The ID of the Environment Variable that should be returned</param>
        /// <returns>The script with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EdgeScriptModel> ComputeEdgeScriptPublic_GetVariableAsync(long id, long variableId, System.Threading.CancellationToken cancellationToken);

        /// <param name="id">The ID of the script that contains the Edge Rule</param>
        /// <param name="variableId">The ID of the Environment Variable that should be deleted</param>
        /// <returns>The eniromental variable was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComputeEdgeScriptPublic_DeleteVariableAsync(long id, long variableId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The ID of the script that contains the Edge Rule</param>
        /// <param name="variableId">The ID of the Environment Variable that should be deleted</param>
        /// <returns>The eniromental variable was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComputeEdgeScriptPublic_DeleteVariableAsync(long id, long variableId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List API Keys
        /// </summary>
        /// <returns>The list of all API keys on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfApiKeyModel> ApiKeyPublic_ListApiKeysAsync(int? page, int? perPage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List API Keys
        /// </summary>
        /// <returns>The list of all API keys on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfApiKeyModel> ApiKeyPublic_ListApiKeysAsync(int? page, int? perPage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get ticket list
        /// </summary>
        /// <returns>Returns the list of support tickets for the user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfSupportTicketModel> SupportPublic_IndexAsync(int? page, int? perPage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ticket list
        /// </summary>
        /// <returns>Returns the list of support tickets for the user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfSupportTicketModel> SupportPublic_IndexAsync(int? page, int? perPage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get ticket details
        /// </summary>
        /// <returns>Returns the list of region codes</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportTicketModel> SupportPublic_Index2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get ticket details
        /// </summary>
        /// <returns>Returns the list of region codes</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportTicketModel> SupportPublic_Index2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Close ticket
        /// </summary>
        /// <returns>The ticket was closed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SupportPublic_CloseAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close ticket
        /// </summary>
        /// <returns>The ticket was closed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SupportPublic_CloseAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reply ticket
        /// </summary>
        /// <returns>The ticket was closed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SupportPublic_ReplyAsync(long id, SupportTicketReplyModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reply ticket
        /// </summary>
        /// <returns>The ticket was closed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SupportPublic_ReplyAsync(long id, SupportTicketReplyModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create ticket
        /// </summary>
        /// <returns>The ticket was created</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportTicketModel> SupportPublic_CreateTicketAsync(SupportTicketCreateModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create ticket
        /// </summary>
        /// <returns>The ticket was created</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SupportTicketModel> SupportPublic_CreateTicketAsync(SupportTicketCreateModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// DRM Certificates
        /// </summary>
        /// <returns>The list of DRM certificates on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfDrmCertificateModel> DrmCertificatePublic_IndexAsync(int? page, int? perPage);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// DRM Certificates
        /// </summary>
        /// <returns>The list of DRM certificates on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfDrmCertificateModel> DrmCertificatePublic_IndexAsync(int? page, int? perPage, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Region list
        /// </summary>
        /// <returns>Returns the list of region codes</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerZone>> RegionPublic_IndexAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Region list
        /// </summary>
        /// <returns>Returns the list of region codes</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ServerZone>> RegionPublic_IndexAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Video Libraries
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of Video Libraries on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfVideoLibraryModel> VideoLibraryPublic_IndexAsync(int? page, int? perPage, string search, bool? includeAccessKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Video Libraries
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of Video Libraries on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfVideoLibraryModel> VideoLibraryPublic_IndexAsync(int? page, int? perPage, string search, bool? includeAccessKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Video Library
        /// </summary>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> VideoLibraryPublic_AddAsync(VideoLibraryCreateModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Video Library
        /// </summary>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> VideoLibraryPublic_AddAsync(VideoLibraryCreateModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Video Library
        /// </summary>
        /// <param name="id">The ID of the Video Library that will be returned</param>
        /// <returns>The requested video library</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_Index2Async(long id, bool? includeAccessKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Video Library
        /// </summary>
        /// <param name="id">The ID of the Video Library that will be returned</param>
        /// <returns>The requested video library</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_Index2Async(long id, bool? includeAccessKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Video Library
        /// </summary>
        /// <returns>The requested video library has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_UpdateAsync(long id, VideoLibraryUpdateModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Video Library
        /// </summary>
        /// <returns>The requested video library has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_UpdateAsync(long id, VideoLibraryUpdateModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Video Library
        /// </summary>
        /// <param name="id">The ID of the Video Library that should be deleted</param>
        /// <returns>The requested video library has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_DeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Video Library
        /// </summary>
        /// <param name="id">The ID of the Video Library that should be deleted</param>
        /// <returns>The requested video library has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_DeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Languages
        /// </summary>
        /// <returns>A list of language information objects</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_Index3Async();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Languages
        /// </summary>
        /// <returns>A list of language information objects</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_Index3Async(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_ResetPasswordAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_ResetPasswordAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_ResetPassword2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_ResetPassword2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Watermark
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The watermark has been successfuly uploaded</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_AddWatermarkAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Watermark
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The watermark has been successfuly uploaded</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_AddWatermarkAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Watermark
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The watermark has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_DeleteWatermarkAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Watermark
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The watermark has been successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoLibraryModel> VideoLibraryPublic_DeleteWatermarkAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_AddAllowedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_AddAllowedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_RemoveAllowedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_RemoveAllowedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_AddBlockedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_AddBlockedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_RemoveBlockedReferrerAsync(long id, RemoveBlockedReferrerRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Video Library</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task VideoLibraryPublic_RemoveBlockedReferrerAsync(long id, RemoveBlockedReferrerRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List DNS Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of DNS Zones on the account.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfDnsZoneModel> DnsZonePublic_IndexAsync(int? page, int? perPage, string search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List DNS Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of DNS Zones on the account.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfDnsZoneModel> DnsZonePublic_IndexAsync(int? page, int? perPage, string search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add DNS Zone
        /// </summary>
        /// <returns>The DNS Zone was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_AddAsync(DnsZoneAddModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add DNS Zone
        /// </summary>
        /// <returns>The DNS Zone was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_AddAsync(DnsZoneAddModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get DNS Zone
        /// </summary>
        /// <param name="id">The ID of the DNS Zone that will be returned</param>
        /// <returns>The DNS Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneModel> DnsZonePublic_Index2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DNS Zone
        /// </summary>
        /// <param name="id">The ID of the DNS Zone that will be returned</param>
        /// <returns>The DNS Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneModel> DnsZonePublic_Index2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update DNS Zones
        /// </summary>
        /// <param name="id">The ID of the DNS Zone that will be updated</param>
        /// <param name="body">The configuration that should be applied to the DNS zone</param>
        /// <returns>The DNS Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneModel> DnsZonePublic_UpdateAsync(long id, UpdateDnsZoneModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update DNS Zones
        /// </summary>
        /// <param name="id">The ID of the DNS Zone that will be updated</param>
        /// <param name="body">The configuration that should be applied to the DNS zone</param>
        /// <returns>The DNS Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneModel> DnsZonePublic_UpdateAsync(long id, UpdateDnsZoneModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete DNS Zone
        /// </summary>
        /// <param name="id">The DNS Zone ID that will be deleted.</param>
        /// <returns>The DNS Zone was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete DNS Zone
        /// </summary>
        /// <param name="id">The DNS Zone ID that will be deleted.</param>
        /// <returns>The DNS Zone was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DnsZonePublic_ExportAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DnsZonePublic_ExportAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get DNS Query Statistics
        /// </summary>
        /// <param name="id">The ID of the DNS Zone for which the statistics will be returned</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned</param>
        /// <returns>Returns the statistics for the DNS Zone with the given ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneStatisticsModel> DnsZonePublic_StatisticsAsync(long id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DNS Query Statistics
        /// </summary>
        /// <param name="id">The ID of the DNS Zone for which the statistics will be returned</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned</param>
        /// <returns>Returns the statistics for the DNS Zone with the given ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneStatisticsModel> DnsZonePublic_StatisticsAsync(long id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check the DNS zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_CheckAvailabilityAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check the DNS zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_CheckAvailabilityAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID to which the record will be added.</param>
        /// <returns>The DNS record was successfuly added.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsRecordModel> DnsZonePublic_AddRecordAsync(long zoneId, AddDnsRecordModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID to which the record will be added.</param>
        /// <returns>The DNS record was successfuly added.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsRecordModel> DnsZonePublic_AddRecordAsync(long zoneId, AddDnsRecordModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that contains the record.</param>
        /// <param name="id">The ID of the DNS record that will be updated.</param>
        /// <returns>The DNS record was successfuly updated.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_UpdateRecordAsync(long zoneId, long id, UpdateDnsRecordModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that contains the record.</param>
        /// <param name="id">The ID of the DNS record that will be updated.</param>
        /// <returns>The DNS record was successfuly updated.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_UpdateRecordAsync(long zoneId, long id, UpdateDnsRecordModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that contains the record.</param>
        /// <param name="id">The ID of the DNS record that will be deleted.</param>
        /// <returns>The DNS record was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DeleteRecordAsync(long zoneId, long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete DNS Record
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that contains the record.</param>
        /// <param name="id">The ID of the DNS record that will be deleted.</param>
        /// <returns>The DNS record was successfuly deleted.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DeleteRecordAsync(long zoneId, long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Recheck DNS Configuration
        /// </summary>
        /// <param name="id">The DNS Zone ID that will be checked</param>
        /// <returns>The DNS Zone object that is being rechecked.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_RecheckDNSAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recheck DNS Configuration
        /// </summary>
        /// <param name="id">The DNS Zone ID that will be checked</param>
        /// <returns>The DNS Zone object that is being rechecked.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_RecheckDNSAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Dismiss DNS Configuration Notice
        /// </summary>
        /// <param name="id">Dismisses the nameserver check</param>
        /// <returns>The DNS Zone object that is being rechecked.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DismissNameserverCheckAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Dismiss DNS Configuration Notice
        /// </summary>
        /// <param name="id">Dismisses the nameserver check</param>
        /// <returns>The DNS Zone object that is being rechecked.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DnsZonePublic_DismissNameserverCheckAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import DNS Records
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that should import the data.</param>
        /// <returns>The import operation has finished successfuly.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneImportResultModel> DnsZonePublic_ImportAsync(long zoneId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import DNS Records
        /// </summary>
        /// <param name="zoneId">The DNS Zone ID that should import the data.</param>
        /// <returns>The import operation has finished successfuly.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DnsZoneImportResultModel> DnsZonePublic_ImportAsync(long zoneId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Pull Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <param name="includeCertificate">Determines if the result hostnames should contain the SSL certificate</param>
        /// <returns>The list of all the pull zones on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfPullZoneModel> PullZonePublic_IndexAsync(int? page, int? perPage, string search, bool? includeCertificate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Pull Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <param name="includeCertificate">Determines if the result hostnames should contain the SSL certificate</param>
        /// <returns>The list of all the pull zones on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfPullZoneModel> PullZonePublic_IndexAsync(int? page, int? perPage, string search, bool? includeCertificate, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Pull Zone
        /// </summary>
        /// <param name="body">The Pull Zone that will be added</param>
        /// <returns>The Pull Zone was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddAsync(PullZoneAddModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Pull Zone
        /// </summary>
        /// <param name="body">The Pull Zone that will be added</param>
        /// <returns>The Pull Zone was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddAsync(PullZoneAddModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be returned</param>
        /// <param name="includeCertificate">Determines if the result hostnames should contain the SSL certificate</param>
        /// <returns>The Pull Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PullZoneModel> PullZonePublic_Index2Async(long id, bool? includeCertificate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be returned</param>
        /// <param name="includeCertificate">Determines if the result hostnames should contain the SSL certificate</param>
        /// <returns>The Pull Zone with the requested ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PullZoneModel> PullZonePublic_Index2Async(long id, bool? includeCertificate, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be updated</param>
        /// <param name="body">The Pull Zone update configuration</param>
        /// <returns>The Pull Zone was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PullZoneModel> PullZonePublic_UpdatePullZoneAsync(long id, PullZoneSettingsModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be updated</param>
        /// <param name="body">The Pull Zone update configuration</param>
        /// <returns>The Pull Zone was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PullZoneModel> PullZonePublic_UpdatePullZoneAsync(long id, PullZoneSettingsModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be deleted</param>
        /// <returns>The Pull Zone was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_DeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Pull Zone
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be deleted</param>
        /// <returns>The Pull Zone was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_DeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Edge Rule
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone that contains the Edge Rule</param>
        /// <param name="edgeRuleId">The ID of the Edge Rule that should be deleted</param>
        /// <returns>The Edge Rule was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_DeleteEdgeRuleAsync(long pullZoneId, string edgeRuleId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Edge Rule
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone that contains the Edge Rule</param>
        /// <param name="edgeRuleId">The ID of the Edge Rule that should be deleted</param>
        /// <returns>The Edge Rule was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_DeleteEdgeRuleAsync(long pullZoneId, string edgeRuleId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add/Update Edge Rule
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone where the Edge Rule will be created</param>
        /// <param name="body">The Edge Rule that will be added</param>
        /// <returns>The Edge Rule was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddEdgeRuleAsync(long pullZoneId, EdgeRuleV2Model body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add/Update Edge Rule
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone where the Edge Rule will be created</param>
        /// <param name="body">The Edge Rule that will be added</param>
        /// <returns>The Edge Rule was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddEdgeRuleAsync(long pullZoneId, EdgeRuleV2Model body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Edge Rule Enabled
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone that contains the Edge Rule</param>
        /// <param name="edgeRuleId">The ID of the Edge Rule that should be updated</param>
        /// <param name="body">The toggle switch model</param>
        /// <returns>The Edge Rule was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_SetEdgeRuleEnabledAsync(long pullZoneId, string edgeRuleId, ToggleRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Edge Rule Enabled
        /// </summary>
        /// <param name="pullZoneId">The ID of the Pull Zone that contains the Edge Rule</param>
        /// <param name="edgeRuleId">The ID of the Edge Rule that should be updated</param>
        /// <param name="body">The toggle switch model</param>
        /// <returns>The Edge Rule was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_SetEdgeRuleEnabledAsync(long pullZoneId, string edgeRuleId, ToggleRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Origin Shield Qeue Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OriginShieldConcurrencyStatisticsModel> PullZonePublic_OriginShieldConcurrencyStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Origin Shield Qeue Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OriginShieldConcurrencyStatisticsModel> PullZonePublic_OriginShieldConcurrencyStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get SafeHop Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SafeHopStatisticsModel> PullZonePublic_SafeHopStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get SafeHop Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SafeHopStatisticsModel> PullZonePublic_SafeHopStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Optimizer Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OptimizerStatisticsModel> PullZonePublic_OptimizerStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Optimizer Statistics
        /// </summary>
        /// <param name="pullZoneId">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OptimizerStatisticsModel> PullZonePublic_OptimizerStatisticsAsync(long pullZoneId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Load Free Certificate
        /// </summary>
        /// <param name="hostname">The hostame that the certificate will be loaded for</param>
        /// <returns>The certificate was successfuly loaded</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_LoadFreeCertificateAsync(string hostname);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Load Free Certificate
        /// </summary>
        /// <param name="hostname">The hostame that the certificate will be loaded for</param>
        /// <returns>The certificate was successfuly loaded</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_LoadFreeCertificateAsync(string hostname, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purge Cache
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be cleared</param>
        /// <param name="body">The ID of the Pull Zone that should be cleared</param>
        /// <returns>The cache was successfuly purged</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_PurgeCachePostByTagAsync(long id, PullZonePurgeModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purge Cache
        /// </summary>
        /// <param name="id">The ID of the Pull Zone that should be cleared</param>
        /// <param name="body">The ID of the Pull Zone that should be cleared</param>
        /// <returns>The cache was successfuly purged</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_PurgeCachePostByTagAsync(long id, PullZonePurgeModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check the pull zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_CheckAvailabilityAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check the pull zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_CheckAvailabilityAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Custom Certificate
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The certificate was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddCertificateAsync(long id, AddCertificateRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Custom Certificate
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The certificate was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddCertificateAsync(long id, AddCertificateRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Certificate
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The certificate was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveCertificateAsync(long id, RemoveCertificateRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Certificate
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The certificate was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveCertificateAsync(long id, RemoveCertificateRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Custom Hostname
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The hostname was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddHostnameAsync(long id, AddHostnameRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Custom Hostname
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The hostname was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddHostnameAsync(long id, AddHostnameRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Custom Hostname
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The hostname was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveHostnameAsync(long id, RemoveHostnameRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Custom Hostname
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The hostname was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveHostnameAsync(long id, RemoveHostnameRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Force SSL
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>Force SSL was successfully updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_SetForceSSLAsync(long id, ForceSSLRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Force SSL
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>Force SSL was successfully updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_SetForceSSLAsync(long id, ForceSSLRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset Token Key
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_ResetSecurityKeyAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Token Key
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_ResetSecurityKeyAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The allowed referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddAllowedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The allowed referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddAllowedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveAllowedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Allowed Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The allowed referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveAllowedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The blocked referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddBlockedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The blocked referer was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddBlockedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The blocked referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveBlockedReferrerAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Blocked Referer
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <returns>The blocked referer was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveBlockedReferrerAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Blocked IP
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked IP was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddBlockedIpAsync(long id, AddBlockedIpRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Blocked IP
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked IP was successfuly added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_AddBlockedIpAsync(long id, AddBlockedIpRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove Blocked IP
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked IP was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveBlockedIpAsync(long id, RemoveBlockedIpRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove Blocked IP
        /// </summary>
        /// <param name="id">The ID of the requested Pull Zone</param>
        /// <param name="body">Request model</param>
        /// <returns>The blocked IP was successfuly removed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PullZonePublic_RemoveBlockedIpAsync(long id, RemoveBlockedIpRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purge URL
        /// </summary>
        /// <param name="url">The URL that will be purged from cache.</param>
        /// <param name="async">(Optional) Determines if the call should wait for the purge logic to complete</param>
        /// <returns>The purge request was successfully processed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PurgePublic_IndexPostAsync(string url, bool? async);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purge URL
        /// </summary>
        /// <param name="url">The URL that will be purged from cache.</param>
        /// <param name="async">(Optional) Determines if the call should wait for the purge logic to complete</param>
        /// <returns>The purge request was successfully processed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PurgePublic_IndexPostAsync(string url, bool? async, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Purge URL
        /// </summary>
        /// <param name="url">The URL that will be purged from cache.</param>
        /// <param name="headerName">(Optional) The header name that will be sent as part of the purge request. Only use this with advanced caching options.</param>
        /// <param name="headerValue">(Optional) The header value that will be sent as part of the purge request. Only use this with advanced caching options.</param>
        /// <param name="async">(Optional) Determines if the call should wait for the purge logic to complete</param>
        /// <returns>The purge request was successfully processed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PurgePublic_IndexAsync(string url, string headerName, string headerValue, bool? async);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Purge URL
        /// </summary>
        /// <param name="url">The URL that will be purged from cache.</param>
        /// <param name="headerName">(Optional) The header name that will be sent as part of the purge request. Only use this with advanced caching options.</param>
        /// <param name="headerValue">(Optional) The header value that will be sent as part of the purge request. Only use this with advanced caching options.</param>
        /// <param name="async">(Optional) Determines if the call should wait for the purge logic to complete</param>
        /// <returns>The purge request was successfully processed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PurgePublic_IndexAsync(string url, string headerName, string headerValue, bool? async, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Statistics
        /// </summary>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="pullZone">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="serverZoneId">(Optional) If set, the statistics will be only returned for the given region ID</param>
        /// <param name="loadErrors">(Optional) If set, the respose will contain the non-2xx response</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatisticsModel> StatisticsPublic_IndexAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, long? pullZone, long? serverZoneId, bool? loadErrors, bool? hourly);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Statistics
        /// </summary>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="pullZone">(Optional) If set, the statistics will be only returned for the given Pull Zone</param>
        /// <param name="serverZoneId">(Optional) If set, the statistics will be only returned for the given region ID</param>
        /// <param name="loadErrors">(Optional) If set, the respose will contain the non-2xx response</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatisticsModel> StatisticsPublic_IndexAsync(System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, long? pullZone, long? serverZoneId, bool? loadErrors, bool? hourly, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Storage Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of storage zones on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfStorageZoneModel> StorageZonePublic_IndexAsync(int? page, int? perPage, bool? includeDeleted, string search);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Storage Zones
        /// </summary>
        /// <param name="search">The search term that will be used to filter the results</param>
        /// <returns>The list of storage zones on the account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListModelOfStorageZoneModel> StorageZonePublic_IndexAsync(int? page, int? perPage, bool? includeDeleted, string search, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Storage Zone
        /// </summary>
        /// <param name="body">The storage zone that will be added</param>
        /// <returns>The storage zone that was added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StorageZoneModel> StorageZonePublic_AddAsync(StorageZoneModelAdd body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Storage Zone
        /// </summary>
        /// <param name="body">The storage zone that will be added</param>
        /// <returns>The storage zone that was added</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StorageZoneModel> StorageZonePublic_AddAsync(StorageZoneModelAdd body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check the storage zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_CheckAvailabilityAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check the storage zone availability
        /// </summary>
        /// <returns>Returns the model determinining if the zone is available or not</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_CheckAvailabilityAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Storage Zone
        /// </summary>
        /// <param name="id">The ID of the Storage Zone that should be returned</param>
        /// <returns>The Storage Zone with the given ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StorageZoneModel> StorageZonePublic_Index2Async(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage Zone
        /// </summary>
        /// <param name="id">The ID of the Storage Zone that should be returned</param>
        /// <returns>The Storage Zone with the given ID</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StorageZoneModel> StorageZonePublic_Index2Async(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Storage Zone
        /// </summary>
        /// <param name="id">The ID of the storage zone that should be updated</param>
        /// <param name="body">The configuration that should be applied to the storage zone</param>
        /// <returns>The storage zone was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_UpdateAsync(long id, StorageZoneSettingsModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Storage Zone
        /// </summary>
        /// <param name="id">The ID of the storage zone that should be updated</param>
        /// <param name="body">The configuration that should be applied to the storage zone</param>
        /// <returns>The storage zone was successfuly updated</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_UpdateAsync(long id, StorageZoneSettingsModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Storage Zone
        /// </summary>
        /// <param name="id">The Storage Zone ID that should be deleted</param>
        /// <returns>The Storage Zone was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_DeleteAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Storage Zone
        /// </summary>
        /// <param name="id">The Storage Zone ID that should be deleted</param>
        /// <returns>The Storage Zone was successfuly deleted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_DeleteAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Storage Zone Connections
        /// </summary>
        /// <param name="id">The ID of the Storage Zone that should be returned</param>
        /// <returns>The list of connections linked to this storage zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StorageZonePullZoneConnection>> StorageZonePublic_ConnectionsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage Zone Connections
        /// </summary>
        /// <param name="id">The ID of the Storage Zone that should be returned</param>
        /// <returns>The list of connections linked to this storage zone</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StorageZonePullZoneConnection>> StorageZonePublic_ConnectionsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Storage Zone Statistics
        /// </summary>
        /// <param name="id">The ID of the storage zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SafeHopStatisticsModel> StorageZonePublic_StorageZoneStatisticsAsync(long id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Storage Zone Statistics
        /// </summary>
        /// <param name="id">The ID of the storage zone</param>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <returns>The statistics data for the passed parameters.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SafeHopStatisticsModel> StorageZonePublic_StorageZoneStatisticsAsync(long id, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_ResetPasswordAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the password reset</param>
        /// <returns>The password has been successfuly changed</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_ResetPasswordAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset Read-Only Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the read-only password reset</param>
        /// <returns>The read-only password has been successfuly changed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_ResetReadOnlyPasswordAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset Read-Only Password
        /// </summary>
        /// <param name="id">The ID of the storage zone that should have the read-only password reset</param>
        /// <returns>The read-only password has been successfuly changed.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StorageZonePublic_ResetReadOnlyPasswordAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Home Feed
        /// </summary>
        /// <returns>Returns the home feed for the currently logged in user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OverviewPageFeed> UserPublic_HomeFeedAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Home Feed
        /// </summary>
        /// <returns>Returns the home feed for the currently logged in user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OverviewPageFeed> UserPublic_HomeFeedAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Notifications
        /// </summary>
        /// <returns>The list of all the notification for the currently logged in user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NotificationModel>> UserPublic_NotificationsListAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Notifications
        /// </summary>
        /// <returns>The list of all the notification for the currently logged in user</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<NotificationModel>> UserPublic_NotificationsListAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get User Details
        /// </summary>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_IndexAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get User Details
        /// </summary>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_IndexAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update User Details
        /// </summary>
        /// <param name="body">The configuration that should be applied to account</param>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_UpdateUserAsync(UserUpdateModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update User Details
        /// </summary>
        /// <param name="body">The configuration that should be applied to account</param>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_UpdateUserAsync(UserUpdateModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Resend Email Confirmation
        /// </summary>
        /// <returns>The email confirmation was successfuly sent</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_ResendEmailConfirmationAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resend Email Confirmation
        /// </summary>
        /// <returns>The email confirmation was successfuly sent</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_ResendEmailConfirmationAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset API Key
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_ResetApiKeyAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset API Key
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_ResetApiKeyAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List the close account reasons
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountCloseReason>> UserPublic_ListCloseAccountReasonsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List the close account reasons
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountCloseReason>> UserPublic_ListCloseAccountReasonsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Close the account
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_CloseAccountAsync(CloseAccountRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Close the account
        /// </summary>
        /// <returns>The key was successfuly reset</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_CloseAccountAsync(CloseAccountRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get DPA Details
        /// </summary>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_DpaAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DPA Details
        /// </summary>
        /// <returns>The details about the currently authorized user account</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserModel> UserPublic_DpaAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Accept DPA
        /// </summary>
        /// <returns>The DPA was successfuly accepted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DpaAcceptResult> UserPublic_DpaAcceptAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept DPA
        /// </summary>
        /// <returns>The DPA was successfuly accepted</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DpaAcceptResult> UserPublic_DpaAcceptAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get DPA Details (HTML)
        /// </summary>
        /// <returns>The HTML version of the DPA</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UserPublic_DpaPdfHhtmlAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get DPA Details (HTML)
        /// </summary>
        /// <returns>The HTML version of the DPA</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UserPublic_DpaPdfHhtmlAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Notifications Opened
        /// </summary>
        /// <returns>The notifications were set as opened.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_SetNotificationsOpenedAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Notifications Opened
        /// </summary>
        /// <returns>The notifications were set as opened.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_SetNotificationsOpenedAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get What's New Items
        /// </summary>
        /// <returns>The list of What's new Items for the currently logged in user.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WhatsNewModel>> UserPublic_WhatsNewAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get What's New Items
        /// </summary>
        /// <returns>The list of What's new Items for the currently logged in user.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WhatsNewModel>> UserPublic_WhatsNewAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset What's New
        /// </summary>
        /// <returns>The What's New list was set as opened and the count was reset.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_WhatsNewResetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset What's New
        /// </summary>
        /// <returns>The What's New list was set as opened and the count was reset.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserPublic_WhatsNewResetAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Generate 2FA Verification
        /// </summary>
        /// <returns>The two factor code details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorModel> UserPublic_TwoFactorGenerateVerificationAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate 2FA Verification
        /// </summary>
        /// <returns>The two factor code details</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorModel> UserPublic_TwoFactorGenerateVerificationAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Disable 2FA
        /// </summary>
        /// <returns>Two factor authentication was successfuly disabled.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorEnableResultModel> UserPublic_TwoFactorDisableAsync(TwoFactorDisableRequestModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable 2FA
        /// </summary>
        /// <returns>Two factor authentication was successfuly disabled.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorEnableResultModel> UserPublic_TwoFactorDisableAsync(TwoFactorDisableRequestModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable 2FA
        /// </summary>
        /// <returns>Two factor authentication was successfuly enabled.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorEnableResultModel> UserPublic_TwoFactorEnableAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable 2FA
        /// </summary>
        /// <returns>Two factor authentication was successfuly enabled.</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorEnableResultModel> UserPublic_TwoFactorEnableAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Verify 2FA Code
        /// </summary>
        /// <returns>Two factor authentication verification was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorVerifyResultModel> UserPublic_TwoFactorVerifyAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Verify 2FA Code
        /// </summary>
        /// <returns>Two factor authentication verification was successful</returns>
        /// <exception cref="BunnyNetApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TwoFactorVerifyResultModel> UserPublic_TwoFactorVerifyAsync(object body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfAbuseCaseModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbuseCaseModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbuseCaseModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ActualUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActualUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreated { get; set; }

        [Newtonsoft.Json.JsonProperty("DateUpdated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateUpdated { get; set; }

        [Newtonsoft.Json.JsonProperty("Deadline", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Deadline { get; set; }

        [Newtonsoft.Json.JsonProperty("PullZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long PullZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("PullZoneName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PullZoneName { get; set; }

        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Determines if the Pull Zone is currently enabled, active and running
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public AbuseCaseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Urls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AbuseCaseUrlModel> Urls { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Pending
    /// <br/>1 = Reviewing
    /// <br/>2 = Resolved
    /// <br/>3 = AccessBlocked
    /// <br/>4 = Appealed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AbuseCaseStatus
    {

        Pending = 0,

        Reviewing = 1,

        Resolved = 2,

        AccessBlocked = 3,

        Appealed = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbuseCaseUrlModel
    {
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public AbuseUrlStatus Status { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = NotResolved
    /// <br/>1 = Resolved
    /// <br/>2 = Unknown
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AbuseUrlStatus
    {

        NotResolved = 0,

        Resolved = 1,

        Unknown = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JwtAuthResultModel
    {
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthStatus", Required = Newtonsoft.Json.Required.Always)]
        public AuthStatus AuthStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Failure
    /// <br/>1 = Authenticated
    /// <br/>2 = TwoFactorRequired
    /// <br/>3 = LockedOut
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AuthStatus
    {

        Failure = 0,

        Authenticated = 1,

        TwoFactorRequired = 2,

        LockedOut = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JwtTwoFactorModel
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResultsModel
    {
        /// <summary>
        /// The input query for the search request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Query { get; set; }

        /// <summary>
        /// The total number of search results found matching the query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Total", Required = Newtonsoft.Json.Required.Always)]
        public int Total { get; set; }

        /// <summary>
        /// The number of results skipped in the search query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("From", Required = Newtonsoft.Json.Required.Always)]
        public int From { get; set; }

        /// <summary>
        /// The size of the result set
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Always)]
        public int Size { get; set; }

        /// <summary>
        /// The list of search results found for the query
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SearchResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchResultItemModel> SearchResults { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResultItemModel
    {
        /// <summary>
        /// The type of the search result item. Possible values: cdn, storage, dns, script, stream
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the search result item linked object
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the object found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeScriptModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("LastModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastModified { get; set; }

        [Newtonsoft.Json.JsonProperty("ScriptType", Required = Newtonsoft.Json.Required.Always)]
        public EdgeScriptTypes ScriptType { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentReleaseId", Required = Newtonsoft.Json.Required.Always)]
        public long CurrentReleaseId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeScriptVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeScriptVariableModel> EdgeScriptVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("Deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = DNS
    /// <br/>1 = CDN
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EdgeScriptTypes
    {

        DNS = 0,

        CDN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeScriptVariableModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingModel
    {
        /// <summary>
        /// The current account balance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        /// <summary>
        /// The current account charges of the running month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ThisMonthCharges", Required = Newtonsoft.Json.Required.Always)]
        public double ThisMonthCharges { get; set; }

        /// <summary>
        /// The list of billing records for this account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingRecords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BillingRecordModel> BillingRecords { get; set; }

        /// <summary>
        /// The total charges this month paid for Edge Storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesStorage", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesStorage { get; set; }

        /// <summary>
        /// The total charges this month paid for European traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesEUTraffic", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesEUTraffic { get; set; }

        /// <summary>
        /// The total charges this month paid for North American traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesUSTraffic", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesUSTraffic { get; set; }

        /// <summary>
        /// The total charges this month paid for Asian and Oceanian traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesASIATraffic", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesASIATraffic { get; set; }

        /// <summary>
        /// The total charges this month paid for African traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesAFTraffic", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesAFTraffic { get; set; }

        /// <summary>
        /// The total charges this month paid for South American traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesSATraffic", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesSATraffic { get; set; }

        /// <summary>
        /// The constructed billing history chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingHistoryChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> BillingHistoryChart { get; set; }

        /// <summary>
        /// The total bandwidth used by the account during this month.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public long MonthlyBandwidthUsed { get; set; }

        /// <summary>
        /// The monthly charges caused by optimizer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesOptimizer", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesOptimizer { get; set; }

        /// <summary>
        /// The monthly charges caused by extra pull zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyChargesExtraPullZones", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyChargesExtraPullZones { get; set; }

        /// <summary>
        /// Determines if billing is currently enabled for this user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool BillingEnabled { get; set; }

        /// <summary>
        /// Determines the minimim monthly commit of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MinimumMonthlyCommit", Required = Newtonsoft.Json.Required.Always)]
        public double MinimumMonthlyCommit { get; set; }

        /// <summary>
        /// If an automatic payment method is configured, this will contain the image url of the payment method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticPaymentImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutomaticPaymentImageUrl { get; set; }

        /// <summary>
        /// If an automatic payment method is configured with a credit card, this will contain the name of the payment credit card
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticPaymentCardType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutomaticPaymentCardType { get; set; }

        /// <summary>
        /// If an automatic payment method is configured, this will contain the identifier of the payment method
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticPaymentIdentifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutomaticPaymentIdentifier { get; set; }

        /// <summary>
        /// If an automatic payments are configured, this contains the payment amount that will be made during an automatic recharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticPaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        public decimal AutomaticPaymentAmount { get; set; }

        /// <summary>
        /// If an automatic payments are configured, this contains the account balance amount that will trigger an automatic recharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticRechargeTreshold", Required = Newtonsoft.Json.Required.Always)]
        public decimal AutomaticRechargeTreshold { get; set; }

        /// <summary>
        /// Determines if automatic recharge is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticRechargeEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool AutomaticRechargeEnabled { get; set; }

        /// <summary>
        /// Determines the number of failed automatic recharges that the system made since the last successful payment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutomaticPaymentFailureCount", Required = Newtonsoft.Json.Required.Always)]
        public int AutomaticPaymentFailureCount { get; set; }

        /// <summary>
        /// Contains the list of saved payment methods on the user's account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SavedPaymentMethods", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BillingSavedPaymentMethod> SavedPaymentMethods { get; set; }

        /// <summary>
        /// The VAT rate for the user's account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VATRate", Required = Newtonsoft.Json.Required.Always)]
        public decimal VATRate { get; set; }

        /// <summary>
        /// The account wide pricing discount for EU and US region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EUUSDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int EUUSDiscount { get; set; }

        /// <summary>
        /// The account wide pricing discount for South America region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SouthAmericaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int SouthAmericaDiscount { get; set; }

        /// <summary>
        /// The account wide pricing discount for Africa region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AfricaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int AfricaDiscount { get; set; }

        /// <summary>
        /// The account wide pricing discount for Asia &amp; Oceania region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AsiaOceaniaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int AsiaOceaniaDiscount { get; set; }

        /// <summary>
        /// Last recharge amount balanec
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastRechargeBalance", Required = Newtonsoft.Json.Required.Always)]
        public double LastRechargeBalance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingRecordModel
    {
        /// <summary>
        /// The ID of the billing record
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The external ID of the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentId { get; set; }

        /// <summary>
        /// The amount linked to the record model
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary>
        /// The payer reference that sent the payment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Payer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payer { get; set; }

        /// <summary>
        /// The date and time when the billing record was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// The type of the billing record. PayPal = 0, Bitcoin = 1, CreditCard = 2, MonthlyUsage = 3, Refund = 4, CouponCode = 5, BankTransfer = 6, AffiliateCredits = 7
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public BillingRecordType Type { get; set; }

        /// <summary>
        /// Determines if an invoice is available
        /// </summary>
        [Newtonsoft.Json.JsonProperty("InvoiceAvailable", Required = Newtonsoft.Json.Required.Always)]
        public bool InvoiceAvailable { get; set; }

        /// <summary>
        /// The URL where the invoice or document can be downloaded. Null if this is not available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DocumentDownloadUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentDownloadUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = PayPal
    /// <br/>1 = Bitcoin
    /// <br/>2 = CreditCard
    /// <br/>3 = MonthlyUsage
    /// <br/>4 = Refund
    /// <br/>5 = CouponCode
    /// <br/>6 = BankTransfer
    /// <br/>7 = AffiliateCredits
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BillingRecordType
    {

        PayPal = 0,

        Bitcoin = 1,

        CreditCard = 2,

        MonthlyUsage = 3,

        Refund = 4,

        CouponCode = 5,

        BankTransfer = 6,

        AffiliateCredits = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingSavedPaymentMethod
    {
        [Newtonsoft.Json.JsonProperty("Token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token { get; set; }

        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("LastFour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastFour { get; set; }

        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigureRechargeUpdateModel
    {
        /// <summary>
        /// Sets the payment amount that will be made during an automatic recharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AutoRechargeEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AutoRechargeEnabled { get; set; }

        /// <summary>
        /// Determines the payment method token for the payment instrument that will be used for automatic recharges
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentMethodToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethodToken { get; set; }

        /// <summary>
        /// Sets the payment amount that will be made during an automatic recharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(10D, 2000D)]
        public decimal PaymentAmount { get; set; }

        /// <summary>
        /// Sets the account balance amount that will trigger an automatic recharge
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RechargeTreshold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2D, 2000D)]
        public decimal RechargeTreshold { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CheckoutRequestModel
    {
        [Newtonsoft.Json.JsonProperty("RechargeAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(10D, 10000D)]
        public decimal RechargeAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(10D, 10000D)]
        public decimal PaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("PaymentRequestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PaymentRequestId { get; set; }

        [Newtonsoft.Json.JsonProperty("Nonce", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 2)]
        public string Nonce { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaymentAuthorization
    {
        [Newtonsoft.Json.JsonProperty("AuthorizationKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorizationKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingAffiliateDetailsModel
    {
        /// <summary>
        /// The amount of affiliate credits on the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AffiliateBalance", Required = Newtonsoft.Json.Required.Always)]
        public decimal AffiliateBalance { get; set; }

        /// <summary>
        /// The affiliate URL for the currently authenticated user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AffiliateUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AffiliateUrl { get; set; }

        /// <summary>
        /// The constructed affiliate click history chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AffiliateClicksChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> AffiliateClicksChart { get; set; }

        /// <summary>
        /// The constructed affiliate signup history chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AffiliateSignupsChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> AffiliateSignupsChart { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingAffiliateClaimResponseModel
    {
        /// <summary>
        /// The amount of affiliate credits that was claimed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AmountClaimed", Required = Newtonsoft.Json.Required.Always)]
        public decimal AmountClaimed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CoinifyExchangeRateModel
    {
        /// <summary>
        /// The current exchange rate from Coinify 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ExchangeRate", Required = Newtonsoft.Json.Required.Always)]
        public double ExchangeRate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BillingSummaryItem
    {
        /// <summary>
        /// The ID of the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long PullZoneId { get; set; }

        /// <summary>
        /// The total credit amount used in this month by the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyUsage", Required = Newtonsoft.Json.Required.Always)]
        public decimal MonthlyUsage { get; set; }

        /// <summary>
        /// The total monthly bandwidth used by the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public long MonthlyBandwidthUsed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserModel
    {
        /// <summary>
        /// The Id of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The email of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The email where the invoices and billing messages will be sent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// The first name of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// The street address of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StreetAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// The address zip code of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// The address zip code of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }

        /// <summary>
        /// The Alpha2 country code that the user is from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The company name billing detail of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The billing VAT number of the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VATNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VATNumber { get; set; }

        /// <summary>
        /// Determines if the account should receive notification emails from bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReceiveNotificationEmails", Required = Newtonsoft.Json.Required.Always)]
        public bool ReceiveNotificationEmails { get; set; }

        /// <summary>
        /// Determines if the account should receive promotional emails from bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReceivePromotionalEmails", Required = Newtonsoft.Json.Required.Always)]
        public bool ReceivePromotionalEmails { get; set; }

        /// <summary>
        /// The remaining balance on the user's account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Balance", Required = Newtonsoft.Json.Required.Always)]
        public double Balance { get; set; }

        /// <summary>
        /// The end date of the account's free trial. If this is in the past, the free trial has expired.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingFreeUntilDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset BillingFreeUntilDate { get; set; }

        /// <summary>
        /// The date when the user joined bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateJoined", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateJoined { get; set; }

        /// <summary>
        /// The total free trial bandwidth limit for this account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TrialBandwidthLimit", Required = Newtonsoft.Json.Required.Always)]
        public long TrialBandwidthLimit { get; set; }

        /// <summary>
        /// The total bandwidth used by the account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public long TotalBandwidthUsed { get; set; }

        /// <summary>
        /// Determines if the account has 2FA enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TwoFactorAuthenticationEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool TwoFactorAuthenticationEnabled { get; set; }

        /// <summary>
        /// Determines if the account's email has been successfuly verified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EmailVerified", Required = Newtonsoft.Json.Required.Always)]
        public bool EmailVerified { get; set; }

        /// <summary>
        /// Returns the number of unead tickets on the user's account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UnreadSupportTicketCount", Required = Newtonsoft.Json.Required.Always)]
        public int UnreadSupportTicketCount { get; set; }

        /// <summary>
        /// Determines if the DPA was accepted by the user or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DpaAccepted", Required = Newtonsoft.Json.Required.Always)]
        public bool DpaAccepted { get; set; }

        /// <summary>
        /// Determines which version of the DPA was accepted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DpaVersionAccepted", Required = Newtonsoft.Json.Required.Always)]
        public int DpaVersionAccepted { get; set; }

        /// <summary>
        /// Determines the date on which the DPA was accepted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DpaDateAccepted", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DpaDateAccepted { get; set; }

        /// <summary>
        /// Determines the roles that the user belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Roles { get; set; }

        /// <summary>
        /// Determines if the user's account is suspended
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Suspended", Required = Newtonsoft.Json.Required.Always)]
        public bool Suspended { get; set; }

        /// <summary>
        /// Contains the list of available payment types for this account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnabledPaymentTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EnabledPaymentTypes { get; set; }

        /// <summary>
        /// Determines if the payments are disabled on this account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PaymentsDisabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PaymentsDisabled { get; set; }

        /// <summary>
        /// The list of features that the user has enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FeatureFlags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FeatureFlags { get; set; }

        /// <summary>
        /// The current billing type of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingType", Required = Newtonsoft.Json.Required.Always)]
        public UserModelBillingType BillingType { get; set; }

        /// <summary>
        /// Determines whether the user used a Single Sign On account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsSsoAccount", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSsoAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = FreeTrial
    /// <br/>1 = PayAsYouGo
    /// <br/>2 = PostPaidPayAsYouGo
    /// <br/>3 = MonthlyPlan
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UserModelBillingType
    {

        FreeTrial = 0,

        PayAsYouGo = 1,

        PostPaidPayAsYouGo = 2,

        MonthlyPlan = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiErrorData
    {
        [Newtonsoft.Json.JsonProperty("ErrorKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfEdgeScriptModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeScriptModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfEdgeScriptReleaseModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeScriptReleaseModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeScriptReleaseModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }

        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("Uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("Note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        [Newtonsoft.Json.JsonProperty("Author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Author { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public EdgeScriptReleaseStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("DateReleased", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateReleased { get; set; }

        [Newtonsoft.Json.JsonProperty("DatePublished", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DatePublished { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Archived
    /// <br/>1 = Live
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EdgeScriptReleaseStatus
    {

        Archived = 0,

        Live = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublishEdgeScriptModel
    {
        [Newtonsoft.Json.JsonProperty("Note", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateEdgeScriptCodeModel
    {
        [Newtonsoft.Json.JsonProperty("Code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateEdgeScriptModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ScriptType", Required = Newtonsoft.Json.Required.Always)]
        public EdgeScriptTypes ScriptType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddEdgeScriptVariableModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string DefaultValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateEdgeScriptVariableModel
    {
        [Newtonsoft.Json.JsonProperty("DefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string DefaultValue { get; set; }

        [Newtonsoft.Json.JsonProperty("Required", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Required { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfApiKeyModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiKeyModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiKeyModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("Roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Roles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfSupportTicketModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SupportTicketModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("Comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SupportTicketCommentModel> Comments { get; set; }

        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("LastUpdatedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastUpdatedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketCommentModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        [Newtonsoft.Json.JsonProperty("HtmlBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlBody { get; set; }

        [Newtonsoft.Json.JsonProperty("Public", Required = Newtonsoft.Json.Required.Always)]
        public bool Public { get; set; }

        [Newtonsoft.Json.JsonProperty("AuthorId", Required = Newtonsoft.Json.Required.Always)]
        public long AuthorId { get; set; }

        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset CreatedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("User", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SupportTicketUserModel User { get; set; }

        [Newtonsoft.Json.JsonProperty("Attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SupportTicketAttachmentModel> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketUserModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ExternalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalId { get; set; }

        [Newtonsoft.Json.JsonProperty("Alias", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Alias { get; set; }

        [Newtonsoft.Json.JsonProperty("Verified", Required = Newtonsoft.Json.Required.Always)]
        public bool Verified { get; set; }

        [Newtonsoft.Json.JsonProperty("Signature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }

        [Newtonsoft.Json.JsonProperty("Role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }

        [Newtonsoft.Json.JsonProperty("PhotoUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhotoUrl { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketAttachmentModel
    {
        [Newtonsoft.Json.JsonProperty("ContentUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Always)]
        public long Size { get; set; }

        [Newtonsoft.Json.JsonProperty("Thumbnails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Thumbnails { get; set; }

        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketReplyModel
    {
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("Attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SupportTicketUploadAttachmentModel> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketUploadAttachmentModel
    {
        [Newtonsoft.Json.JsonProperty("Body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Body { get; set; }

        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("ContentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContentType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SupportTicketCreateModel
    {
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("LinkedPullZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LinkedPullZone { get; set; }

        [Newtonsoft.Json.JsonProperty("LinkedVideoLibrary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LinkedVideoLibrary { get; set; }

        [Newtonsoft.Json.JsonProperty("LinkedDnsZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LinkedDnsZone { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("LinkedStorageZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LinkedStorageZone { get; set; }

        [Newtonsoft.Json.JsonProperty("Attachments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SupportTicketUploadAttachmentModel> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfDrmCertificateModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DrmCertificateModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DrmCertificateModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateKey { get; set; }

        [Newtonsoft.Json.JsonProperty("SecretKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecretKey { get; set; }

        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }

        [Newtonsoft.Json.JsonProperty("Provider", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

        [Newtonsoft.Json.JsonProperty("ExpirationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset ExpirationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("CertificateType", Required = Newtonsoft.Json.Required.Always)]
        public CertificateType CertificateType { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateModified { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = FairPlay
    /// <br/>1 = Widevine
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CertificateType
    {

        FairPlay = 0,

        Widevine = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerZone
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerByte", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerByte { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerByteOver50tb", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerByteOver50tb { get; set; } = 0D;

        [Newtonsoft.Json.JsonProperty("PricePerByteOver100tb", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerByteOver100tb { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerByteOver500tb", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerByteOver500tb { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerByteOver1000tb", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerByteOver1000tb { get; set; }

        [Newtonsoft.Json.JsonProperty("PricePerOptimizedRequest", Required = Newtonsoft.Json.Required.Always)]
        public double PricePerOptimizedRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("ResellerPricePerOptimizedRequest", Required = Newtonsoft.Json.Required.Always)]
        public double ResellerPricePerOptimizedRequest { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayColor { get; set; }

        [Newtonsoft.Json.JsonProperty("ZoneCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZoneCode { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsRegion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsRegion { get; set; }

        [Newtonsoft.Json.JsonProperty("ContinentZoneCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinentZoneCode { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusMapLocationX", Required = Newtonsoft.Json.Required.Always)]
        public int StatusMapLocationX { get; set; }

        [Newtonsoft.Json.JsonProperty("StatusMapLocationY", Required = Newtonsoft.Json.Required.Always)]
        public int StatusMapLocationY { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternateLongitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AlternateLongitude { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternateLatitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AlternateLatitude { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternatePointsJson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternatePointsJson { get; set; }

        [Newtonsoft.Json.JsonProperty("AlternatePointsBudgetJson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AlternatePointsBudgetJson { get; set; }

        [Newtonsoft.Json.JsonProperty("DisplayStatus", Required = Newtonsoft.Json.Required.Always)]
        public bool DisplayStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeServer> EdgeServers { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsServers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DnsServer> DnsServers { get; set; }

        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumCacheQuality", Required = Newtonsoft.Json.Required.Always)]
        public int MinimumCacheQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("IsPrimaryPoP", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPrimaryPoP { get; set; }

        [Newtonsoft.Json.JsonProperty("RoutingGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoutingGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("IsRoutingGroupPrimary", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRoutingGroupPrimary { get; set; }

        [Newtonsoft.Json.JsonProperty("RoutableCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoutableCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("VolumeRoutableCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeRoutableCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("OverrideRoutableCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverrideRoutableCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("OverrideVolumeRoutableCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverrideVolumeRoutableCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("DisabledASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisabledASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("DisabledVolumeASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisabledVolumeASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledVolumeASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledVolumeASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("OverrideASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverrideASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("SplitCacheSize", Required = Newtonsoft.Json.Required.Always)]
        public int SplitCacheSize { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeStorageRoutePriorities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdgeStorageRoutePriorities { get; set; }

        [Newtonsoft.Json.JsonProperty("DisableStorageRouting", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableStorageRouting { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceptedFilters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcceptedFilters { get; set; }

        [Newtonsoft.Json.JsonProperty("AllowLatencyRouting", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowLatencyRouting { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeServer
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerIp { get; set; }

        [Newtonsoft.Json.JsonProperty("RoutableIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RoutableIp { get; set; }

        [Newtonsoft.Json.JsonProperty("PullZoneIPv4RoutableIps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PullZoneIPv4RoutableIps { get; set; }

        [Newtonsoft.Json.JsonProperty("PullZoneIPv6RoutableIps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PullZoneIPv6RoutableIps { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateIp { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerIPv6", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerIPv6 { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hostname { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public EdgeServerStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("WorkerCount", Required = Newtonsoft.Json.Required.Always)]
        public int WorkerCount { get; set; }

        [Newtonsoft.Json.JsonProperty("ManagementLockGuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManagementLockGuid { get; set; }

        [Newtonsoft.Json.JsonProperty("LastManagementActivity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastManagementActivity { get; set; }

        [Newtonsoft.Json.JsonProperty("LastPullZoneConfiguration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastPullZoneConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerDeploymentJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdgeServerDeploymentJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerProxyDeploymentJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EdgeServerProxyDeploymentJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTestId", Required = Newtonsoft.Json.Required.Always)]
        public long MonitorTestId { get; set; }

        [Newtonsoft.Json.JsonProperty("NodepingMonitorTestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NodepingMonitorTestId { get; set; }

        [Newtonsoft.Json.JsonProperty("SetupStepJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SetupStepJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("DeactivationJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeactivationJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerDeploymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EdgeServerDeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServesBudgetZones", Required = Newtonsoft.Json.Required.Always)]
        public bool ServesBudgetZones { get; set; }

        [Newtonsoft.Json.JsonProperty("ServesSmallFileZones", Required = Newtonsoft.Json.Required.Always)]
        public bool ServesSmallFileZones { get; set; }

        [Newtonsoft.Json.JsonProperty("ServesLiveStream", Required = Newtonsoft.Json.Required.Always)]
        public bool ServesLiveStream { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerDeployment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EdgeServerDeployment EdgeServerDeployment { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerProxyDeploymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EdgeServerProxyDeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerProxyDeployment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EdgeServerProxyDeployment EdgeServerProxyDeployment { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumNetworkMbitUsage", Required = Newtonsoft.Json.Required.Always)]
        public int MaximumNetworkMbitUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumCpuUsage", Required = Newtonsoft.Json.Required.Always)]
        public int MaximumCpuUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumRamUsage", Required = Newtonsoft.Json.Required.Always)]
        public int MaximumRamUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumDiskIoWait", Required = Newtonsoft.Json.Required.Always)]
        public int MaximumDiskIoWait { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentDiskIoWait", Required = Newtonsoft.Json.Required.Always)]
        public double CurrentDiskIoWait { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentCpuUsage", Required = Newtonsoft.Json.Required.Always)]
        public double CurrentCpuUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentRamUsage", Required = Newtonsoft.Json.Required.Always)]
        public double CurrentRamUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentNetworkMbitUsage", Required = Newtonsoft.Json.Required.Always)]
        public double CurrentNetworkMbitUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentRequestsPerSecond", Required = Newtonsoft.Json.Required.Always)]
        public double CurrentRequestsPerSecond { get; set; }

        [Newtonsoft.Json.JsonProperty("IsOriginServer", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOriginServer { get; set; }

        [Newtonsoft.Json.JsonProperty("RoutingWeight", Required = Newtonsoft.Json.Required.Always)]
        public int RoutingWeight { get; set; }

        [Newtonsoft.Json.JsonProperty("OverrideRoutableCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OverrideRoutableCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("DisabledCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisabledCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledPullZonesPremium", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledPullZonesPremium { get; set; }

        [Newtonsoft.Json.JsonProperty("EnabledPullZonesVolume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledPullZonesVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("DiskList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiskList { get; set; }

        [Newtonsoft.Json.JsonProperty("NicConfiguration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NicConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("NginxAffinity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NginxAffinity { get; set; }

        [Newtonsoft.Json.JsonProperty("Disks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Disks { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkInterfaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkInterfaces { get; set; }

        [Newtonsoft.Json.JsonProperty("PrivateNetworkInterfaces", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrivateNetworkInterfaces { get; set; }

        [Newtonsoft.Json.JsonProperty("PremiumDisabledCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PremiumDisabledCountries { get; set; }

        [Newtonsoft.Json.JsonProperty("UpstreamIPs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UpstreamIPs { get; set; }

        [Newtonsoft.Json.JsonProperty("DisabledASNs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisabledASNs { get; set; }

        [Newtonsoft.Json.JsonProperty("IsLoadBalancer", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLoadBalancer { get; set; }

        [Newtonsoft.Json.JsonProperty("LoadBalancedServers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoadBalancedServers { get; set; }

        [Newtonsoft.Json.JsonProperty("ProxyCacheMinUses", Required = Newtonsoft.Json.Required.Always)]
        public int ProxyCacheMinUses { get; set; }

        [Newtonsoft.Json.JsonProperty("IsOriginShield", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOriginShield { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableNewProxy", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableNewProxy { get; set; }

        [Newtonsoft.Json.JsonProperty("ExtraIPs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraIPs { get; set; }

        [Newtonsoft.Json.JsonProperty("SupplierName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SupplierName { get; set; }

        [Newtonsoft.Json.JsonProperty("Notes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notes { get; set; }

        [Newtonsoft.Json.JsonProperty("VlanCount", Required = Newtonsoft.Json.Required.Always)]
        public int VlanCount { get; set; }

        [Newtonsoft.Json.JsonProperty("Vlan1IP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vlan1IP { get; set; }

        [Newtonsoft.Json.JsonProperty("Vlan1Neighbour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vlan1Neighbour { get; set; }

        [Newtonsoft.Json.JsonProperty("Vlan2IP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vlan2IP { get; set; }

        [Newtonsoft.Json.JsonProperty("Vlan2Neighbour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Vlan2Neighbour { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ServerZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServerZone ServerZone { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.Always)]
        public long ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServerGroup ServerGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("UserNewClusters", Required = Newtonsoft.Json.Required.Always)]
        public bool UserNewClusters { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerCacheDiskConfigurations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeServerCacheDiskConfiguration> EdgeServerCacheDiskConfigurations { get; set; }

        [Newtonsoft.Json.JsonProperty("ServePerfops", Required = Newtonsoft.Json.Required.Always)]
        public bool ServePerfops { get; set; } = true;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 1 = Ready
    /// <br/>2 = Active
    /// <br/>3 = Installing
    /// <br/>4 = Offline
    /// <br/>5 = Down
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EdgeServerStatus
    {

        Ready = 1,

        Active = 2,

        Installing = 3,

        Offline = 4,

        Down = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeServerDeployment
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DeploymentFile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentFile { get; set; }

        [Newtonsoft.Json.JsonProperty("Active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        [Newtonsoft.Json.JsonProperty("DateUpdated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeServerProxyDeployment
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DeploymentFile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentFile { get; set; }

        [Newtonsoft.Json.JsonProperty("Active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        [Newtonsoft.Json.JsonProperty("DateUpdated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ServerGroup
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DefaultCacheTime", Required = Newtonsoft.Json.Required.Always)]
        public long DefaultCacheTime { get; set; }

        [Newtonsoft.Json.JsonProperty("MinimumCacheTime", Required = Newtonsoft.Json.Required.Always)]
        public long MinimumCacheTime { get; set; }

        [Newtonsoft.Json.JsonProperty("MaximumFileSize", Required = Newtonsoft.Json.Required.Always)]
        public long MaximumFileSize { get; set; }

        [Newtonsoft.Json.JsonProperty("Servers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeServer> Servers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeServerCacheDiskConfiguration
    {
        [Newtonsoft.Json.JsonProperty("EdgeServer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public EdgeServer EdgeServer { get; set; }

        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        [Newtonsoft.Json.JsonProperty("FileKeysCacheSize", Required = Newtonsoft.Json.Required.Always)]
        public int FileKeysCacheSize { get; set; }

        [Newtonsoft.Json.JsonProperty("MaxCacheSize", Required = Newtonsoft.Json.Required.Always)]
        public double MaxCacheSize { get; set; }

        [Newtonsoft.Json.JsonProperty("EdgeServerId", Required = Newtonsoft.Json.Required.Always)]
        public long EdgeServerId { get; set; }

        [Newtonsoft.Json.JsonProperty("Threads", Required = Newtonsoft.Json.Required.Always)]
        public int Threads { get; set; }

        [Newtonsoft.Json.JsonProperty("IsOffline", Required = Newtonsoft.Json.Required.Always)]
        public bool IsOffline { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsServer
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("NetworkInterfaceName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkInterfaceName { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerIp { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsListenerServerIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsListenerServerIp { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsListenerSecondaryIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsListenerSecondaryIP { get; set; }

        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hostname { get; set; }

        [Newtonsoft.Json.JsonProperty("AccessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessKey { get; set; }

        [Newtonsoft.Json.JsonProperty("LastManagementActivity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastManagementActivity { get; set; }

        [Newtonsoft.Json.JsonProperty("LastRecordConfiguration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset LastRecordConfiguration { get; set; }

        [Newtonsoft.Json.JsonProperty("TheoreticalMbitConnectivity", Required = Newtonsoft.Json.Required.Always)]
        public int TheoreticalMbitConnectivity { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsServerDeploymentJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsServerDeploymentJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("UdpWorkerCount", Required = Newtonsoft.Json.Required.Always)]
        public int UdpWorkerCount { get; set; }

        [Newtonsoft.Json.JsonProperty("TcpWorkerCount", Required = Newtonsoft.Json.Required.Always)]
        public int TcpWorkerCount { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorTestId", Required = Newtonsoft.Json.Required.Always)]
        public long MonitorTestId { get; set; }

        [Newtonsoft.Json.JsonProperty("SetupStepJobId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SetupStepJobId { get; set; }

        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.Always)]
        public DnsServerStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsServerDeploymentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DnsServerDeploymentId { get; set; }

        [Newtonsoft.Json.JsonProperty("DnsServerDeployment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsServerDeployment DnsServerDeployment { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ServerZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServerZone ServerZone { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPAsNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BGPAsNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPNeighbour", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BGPNeighbour { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPMultiHopSetting", Required = Newtonsoft.Json.Required.Always)]
        public int BGPMultiHopSetting { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPSubnet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BGPSubnet { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPInternalAs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BGPInternalAs { get; set; }

        [Newtonsoft.Json.JsonProperty("BGPPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BGPPassword { get; set; }

        [Newtonsoft.Json.JsonProperty("Communities", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Communities { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroupId", Required = Newtonsoft.Json.Required.Always)]
        public long ServerGroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("ServerGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ServerGroup ServerGroup { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Active
    /// <br/>1 = Installing
    /// <br/>2 = Offline
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsServerStatus
    {

        Active = 0,

        Installing = 1,

        Offline = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsServerDeployment
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("DeploymentFile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentFile { get; set; }

        [Newtonsoft.Json.JsonProperty("Active", Required = Newtonsoft.Json.Required.Always)]
        public bool Active { get; set; }

        [Newtonsoft.Json.JsonProperty("DateUpdated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateUpdated { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfVideoLibraryModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VideoLibraryModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoLibraryModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the Video Library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of videos in the video library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VideoCount", Required = Newtonsoft.Json.Required.Always)]
        public long VideoCount { get; set; }

        /// <summary>
        /// The amount of traffic usage this month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TrafficUsage", Required = Newtonsoft.Json.Required.Always)]
        public long TrafficUsage { get; set; }

        /// <summary>
        /// The total amount of storage used by the library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageUsage", Required = Newtonsoft.Json.Required.Always)]
        public long StorageUsage { get; set; }

        /// <summary>
        /// The date when the video library was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// The geo-replication regions of the underlying storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationRegions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReplicationRegions { get; set; }

        /// <summary>
        /// The API key used for authenticating with the video library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApiKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiKey { get; set; }

        /// <summary>
        /// The read-only API key used for authenticating with the video library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadOnlyApiKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReadOnlyApiKey { get; set; }

        /// <summary>
        /// Determines if the video library has a watermark configured
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HasWatermark", Required = Newtonsoft.Json.Required.Always)]
        public bool HasWatermark { get; set; }

        /// <summary>
        /// The left offset of the watermark position (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkPositionLeft", Required = Newtonsoft.Json.Required.Always)]
        public int WatermarkPositionLeft { get; set; }

        /// <summary>
        /// The top offset of the watermark position (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkPositionTop", Required = Newtonsoft.Json.Required.Always)]
        public int WatermarkPositionTop { get; set; }

        /// <summary>
        /// The width of the watermark (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkWidth", Required = Newtonsoft.Json.Required.Always)]
        public int WatermarkWidth { get; set; }

        /// <summary>
        /// The ID of the connected underlying pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long PullZoneId { get; set; }

        /// <summary>
        /// The ID of the connected underlying storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long StorageZoneId { get; set; }

        /// <summary>
        /// The height of the watermark (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkHeight", Required = Newtonsoft.Json.Required.Always)]
        public int WatermarkHeight { get; set; }

        /// <summary>
        /// The comma separated list of enabled resolutions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnabledResolutions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledResolutions { get; set; }

        /// <summary>
        /// The vi.ai publisher id for advertising configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ViAiPublisherId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViAiPublisherId { get; set; }

        /// <summary>
        /// The URL of the VAST tag endpoint for advertising configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VastTagUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VastTagUrl { get; set; }

        /// <summary>
        /// The webhook URL of the video library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WebhookUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// The captions display font size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsFontSize", Required = Newtonsoft.Json.Required.Always)]
        public int CaptionsFontSize { get; set; }

        /// <summary>
        /// The captions display font color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsFontColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionsFontColor { get; set; }

        /// <summary>
        /// The captions display background color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsBackground", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionsBackground { get; set; }

        /// <summary>
        /// The UI language of the player
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UILanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UILanguage { get; set; }

        /// <summary>
        /// Determines if the Early-Play feature is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowEarlyPlay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowEarlyPlay { get; set; }

        /// <summary>
        /// Determines if the player token authentication is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PlayerTokenAuthenticationEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PlayerTokenAuthenticationEnabled { get; set; }

        /// <summary>
        /// The list of allowed referrer domains allowed to access the library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedReferrers { get; set; }

        /// <summary>
        /// The list of blocked referrer domains blocked from accessing the library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedReferrers { get; set; }

        /// <summary>
        /// Determines if the requests without a referrer are blocked
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockNoneReferrer", Required = Newtonsoft.Json.Required.Always)]
        public bool BlockNoneReferrer { get; set; }

        /// <summary>
        /// Determines if the MP4 fallback feature is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableMP4Fallback", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableMP4Fallback { get; set; }

        /// <summary>
        /// Determines if the original video files should be stored after encoding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("KeepOriginalFiles", Required = Newtonsoft.Json.Required.Always)]
        public bool KeepOriginalFiles { get; set; }

        /// <summary>
        /// Determines direct play URLs are enabled for the library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowDirectPlay", Required = Newtonsoft.Json.Required.Always)]
        public bool AllowDirectPlay { get; set; }

        /// <summary>
        /// Determines if the MediaCage basic DRM is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableDRM", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableDRM { get; set; }

        /// <summary>
        /// The bitrate used for encoding 240p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate240p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate240p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 360p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate360p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate360p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 480p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate480p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate480p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 720p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate720p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate720p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 1080p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate1080p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate1080p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 1440p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate1440p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate1440p { get; set; }

        /// <summary>
        /// The bitrate used for encoding 2160p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate2160p", Required = Newtonsoft.Json.Required.Always)]
        public int Bitrate2160p { get; set; }

        /// <summary>
        /// The API access key for the library. Only added when the includeAccessKey parameter is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ApiAccessKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiAccessKey { get; set; }

        /// <summary>
        /// Determines if the video watch heatmap should be displayed in the player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShowHeatmap", Required = Newtonsoft.Json.Required.Always)]
        public bool ShowHeatmap { get; set; }

        /// <summary>
        /// Determines if content tagging should be enabled for this library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableContentTagging", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableContentTagging { get; set; }

        /// <summary>
        /// The type of the pull zone attached. Premium = 0, Volume = 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZoneType", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneType PullZoneType { get; set; }

        /// <summary>
        /// The custom HTMl that is added into the head of the HTML player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CustomHTML", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomHTML { get; set; }

        /// <summary>
        /// The list of controls on the video player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Controls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controls { get; set; }

        /// <summary>
        /// The key color of the player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PlayerKeyColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlayerKeyColor { get; set; }

        /// <summary>
        /// The captions font family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FontFamily", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }

        [Newtonsoft.Json.JsonProperty("WatermarkVersion", Required = Newtonsoft.Json.Required.Always)]
        public long WatermarkVersion { get; set; }

        /// <summary>
        /// Determines if the automatic audio transcribing is currently enabled for this zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribing", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTranscribing { get; set; }

        /// <summary>
        /// Determines if automatic transcribing title generation is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribingTitleGeneration", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTranscribingTitleGeneration { get; set; }

        /// <summary>
        /// Determines if automatic transcribing description generation is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribingDescriptionGeneration", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTranscribingDescriptionGeneration { get; set; }

        /// <summary>
        /// The list of languages that the captions will be automatically transcribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TranscribingCaptionLanguages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TranscribingCaptionLanguages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Premium
    /// <br/>1 = Volume
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PullZoneType
    {

        Premium = 0,

        Volume = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoLibraryCreateModel
    {
        /// <summary>
        /// The name of the Video Library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// The geo-replication regions of the underlying storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationRegions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReplicationRegions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoLibraryUpdateModel
    {
        /// <summary>
        /// (Optional) Sets name of the video library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// (Optional) Sets the player custom HTML code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CustomHTML", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomHTML { get; set; }

        /// <summary>
        /// (Optional) Sets the player key control color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PlayerKeyColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlayerKeyColor { get; set; }

        /// <summary>
        /// (Optional) Determines if the token authentication should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTokenAuthentication", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTokenAuthentication { get; set; }

        /// <summary>
        /// (Optional) Determines if the token IP verification should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTokenIPVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTokenIPVerification { get; set; }

        /// <summary>
        /// (Optional) Set to true to reset the CDN and embed view token key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ResetToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ResetToken { get; set; }

        /// <summary>
        /// (Optional) Sets the left offset of the watermark position (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkPositionLeft", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkPositionLeft { get; set; }

        /// <summary>
        /// (Optional) Sets the top offset of the watermark position (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkPositionTop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkPositionTop { get; set; }

        /// <summary>
        /// (Optional) Sets the width of the watermark (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkWidth { get; set; }

        /// <summary>
        /// (Optional) Sets the height of the watermark (in %)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WatermarkHeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatermarkHeight { get; set; }

        /// <summary>
        /// (Optional) Sets the enabled resolutions for the transcoding. At least one resolution should be enabled. Possible values: 240p, 360p, 480p, 720p, 1080p, 1440p, 2160p
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnabledResolutions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledResolutions { get; set; }

        /// <summary>
        /// (Optional) Sets the vi.ai publisher ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ViAiPublisherId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViAiPublisherId { get; set; }

        /// <summary>
        /// (Optional) Sets the Vast tag URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VastTagUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VastTagUrl { get; set; }

        /// <summary>
        /// (Optional) Sets the webhook API url
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WebhookUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// (Optional) Sets the captions display font size
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsFontSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CaptionsFontSize { get; set; }

        /// <summary>
        /// (Optional) Sets the captions display font color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsFontColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionsFontColor { get; set; }

        /// <summary>
        /// (Optional) Sets the captions display background color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CaptionsBackground", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionsBackground { get; set; }

        /// <summary>
        /// (Optional) Sets the UI language of the video player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UILanguage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UILanguage { get; set; }

        /// <summary>
        /// (Optional) Determines if the Early-Play feature should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowEarlyPlay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowEarlyPlay { get; set; }

        /// <summary>
        /// (Optional) Determines if the token authentication should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PlayerTokenAuthenticationEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PlayerTokenAuthenticationEnabled { get; set; }

        /// <summary>
        /// (Optional) Determines if requests without a referer should be blocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockNoneReferrer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockNoneReferrer { get; set; }

        /// <summary>
        /// (Optional) Determines if MP4 fallback should be enabled for this library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableMP4Fallback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableMP4Fallback { get; set; }

        /// <summary>
        /// (Optional) Determines if the original file should be kept after the video is processed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("KeepOriginalFiles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool KeepOriginalFiles { get; set; }

        /// <summary>
        /// (Optional) Determines if direct play URLs should be enabled for the library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowDirectPlay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllowDirectPlay { get; set; }

        /// <summary>
        /// (Optional) Determines if MediaCage basic DRM should be enabled for this library
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableDRM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableDRM { get; set; }

        /// <summary>
        /// (Optional) The comma separated list of controls that will be displayed in the video player. Possible values: play-large, play, progress, current-time, mute, volume, captions, settings, pip, airplay, fullscreen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Controls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Controls { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 240p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate240p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate240p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 360p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate360p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate360p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 480p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate480p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate480p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 720p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate720p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate720p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 1080p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate1080p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate1080p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 1440p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate1440p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate1440p { get; set; }

        /// <summary>
        /// (Optional) The bitrate used for encoding 2160p videos
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Bitrate2160p", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Bitrate2160p { get; set; }

        /// <summary>
        /// Determines if the video watch heatmap should be displayed in the player.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ShowHeatmap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowHeatmap { get; set; }

        /// <summary>
        /// Determines if content tagging should be enabled for this library.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableContentTagging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableContentTagging { get; set; }

        /// <summary>
        /// The captions font family.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FontFamily", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FontFamily { get; set; }

        /// <summary>
        /// (Optional) Determines if the automatic audio transcribing is currently enabled for this zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTranscribing { get; set; }

        /// <summary>
        /// (Optional) Determines if automatic transcribing title generation is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribingTitleGeneration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTranscribingTitleGeneration { get; set; }

        /// <summary>
        /// (Optional) Determines if automatic transcribing description generation is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTranscribingDescriptionGeneration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTranscribingDescriptionGeneration { get; set; }

        /// <summary>
        /// (Optional) The list of languages that the captions will be automatically transcribed to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TranscribingCaptionLanguages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> TranscribingCaptionLanguages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddAllowedReferrerRequestModel
    {
        /// <summary>
        /// The hostname that will be added as an allowed referer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddBlockedReferrerRequestModel
    {
        /// <summary>
        /// The hostname that will be added as a blocked referer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveAllowedReferrerRequestModel
    {
        /// <summary>
        /// The hostname that will be removed as an allowed referer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveBlockedReferrerRequestModel
    {
        /// <summary>
        /// The hostname that will be removed as a blocked referer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfDnsZoneModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DnsZoneModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsZoneModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Domain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        [Newtonsoft.Json.JsonProperty("Records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DnsRecordModel> Records { get; set; }

        [Newtonsoft.Json.JsonProperty("DateModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateModified { get; set; }

        [Newtonsoft.Json.JsonProperty("DateCreated", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateCreated { get; set; }

        [Newtonsoft.Json.JsonProperty("NameserversDetected", Required = Newtonsoft.Json.Required.Always)]
        public bool NameserversDetected { get; set; }

        [Newtonsoft.Json.JsonProperty("CustomNameserversEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool CustomNameserversEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Nameserver1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nameserver1 { get; set; }

        [Newtonsoft.Json.JsonProperty("Nameserver2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nameserver2 { get; set; }

        [Newtonsoft.Json.JsonProperty("SoaEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoaEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("NameserversNextCheck", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset NameserversNextCheck { get; set; }

        [Newtonsoft.Json.JsonProperty("LoggingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool LoggingEnabled { get; set; }

        /// <summary>
        /// Determines if the TLS 1 is enabled on the DNS Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingIPAnonymizationEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool LoggingIPAnonymizationEnabled { get; set; }

        /// <summary>
        /// Sets the log anonymization type for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogAnonymizationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogAnonymizationType LogAnonymizationType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsRecordModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public DnsRecordTypes Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Ttl", Required = Newtonsoft.Json.Required.Always)]
        public int Ttl { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.Always)]
        public int Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.Always)]
        public int Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.Always)]
        public int Port { get; set; }

        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.Always)]
        public byte Flags { get; set; }

        [Newtonsoft.Json.JsonProperty("Tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [Newtonsoft.Json.JsonProperty("Accelerated", Required = Newtonsoft.Json.Required.Always)]
        public bool Accelerated { get; set; }

        [Newtonsoft.Json.JsonProperty("AcceleratedPullZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long AcceleratedPullZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("LinkName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LinkName { get; set; }

        [Newtonsoft.Json.JsonProperty("IPGeoLocationInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GeoDnsLocationModel IPGeoLocationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("GeolocationInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsRecordGeoLocationInfo GeolocationInfo { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorStatus", Required = Newtonsoft.Json.Required.Always)]
        public DnsMonitoringStatus MonitorStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorType", Required = Newtonsoft.Json.Required.Always)]
        public DnsMonitoringType MonitorType { get; set; }

        [Newtonsoft.Json.JsonProperty("GeolocationLatitude", Required = Newtonsoft.Json.Required.Always)]
        public double GeolocationLatitude { get; set; }

        [Newtonsoft.Json.JsonProperty("GeolocationLongitude", Required = Newtonsoft.Json.Required.Always)]
        public double GeolocationLongitude { get; set; }

        [Newtonsoft.Json.JsonProperty("EnviromentalVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DnsRecordEnviromentalVariableModel> EnviromentalVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("LatencyZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatencyZone { get; set; }

        [Newtonsoft.Json.JsonProperty("SmartRoutingType", Required = Newtonsoft.Json.Required.Always)]
        public DnsSmartRoutingType SmartRoutingType { get; set; }

        [Newtonsoft.Json.JsonProperty("Disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = A
    /// <br/>1 = AAAA
    /// <br/>2 = CNAME
    /// <br/>3 = TXT
    /// <br/>4 = MX
    /// <br/>5 = Redirect
    /// <br/>6 = Flatten
    /// <br/>7 = PullZone
    /// <br/>8 = SRV
    /// <br/>9 = CAA
    /// <br/>10 = PTR
    /// <br/>11 = Script
    /// <br/>12 = NS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsRecordTypes
    {

        A = 0,

        AAAA = 1,

        CNAME = 2,

        TXT = 3,

        MX = 4,

        Redirect = 5,

        Flatten = 6,

        PullZone = 7,

        SRV = 8,

        CAA = 9,

        PTR = 10,

        Script = 11,

        NS = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeoDnsLocationModel
    {
        /// <summary>
        /// The ISO country code of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The name of the country of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// The ASN of the IP organization
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ASN", Required = Newtonsoft.Json.Required.Always)]
        public long ASN { get; set; }

        /// <summary>
        /// The mame of the organization that owns the IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OrganizationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// The name of the city of the location
        /// </summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsRecordGeoLocationInfo
    {
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("Latitude", Required = Newtonsoft.Json.Required.Always)]
        public double Latitude { get; set; }

        [Newtonsoft.Json.JsonProperty("Longitude", Required = Newtonsoft.Json.Required.Always)]
        public double Longitude { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Unknown
    /// <br/>1 = Online
    /// <br/>2 = Offline
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsMonitoringStatus
    {

        Unknown = 0,

        Online = 1,

        Offline = 2,

    }

    /// <summary>
    /// 0 = None
    /// <br/>1 = Ping
    /// <br/>2 = Http
    /// <br/>3 = Monitor
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsMonitoringType
    {

        None = 0,

        Ping = 1,

        Http = 2,

        Monitor = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsRecordEnviromentalVariableModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = None
    /// <br/>1 = Latency
    /// <br/>2 = Geolocation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DnsSmartRoutingType
    {

        None = 0,

        Latency = 1,

        Geolocation = 2,

    }

    /// <summary>
    /// 0 = OneDigit
    /// <br/>1 = Drop
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LogAnonymizationType
    {

        OneDigit = 0,

        Drop = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDnsZoneModel
    {
        [Newtonsoft.Json.JsonProperty("CustomNameserversEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CustomNameserversEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("Nameserver1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nameserver1 { get; set; }

        [Newtonsoft.Json.JsonProperty("Nameserver2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nameserver2 { get; set; }

        [Newtonsoft.Json.JsonProperty("SoaEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SoaEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("LoggingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoggingEnabled { get; set; }

        /// <summary>
        /// Gets the log anonymization type for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogAnonymizationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogAnonymizationType LogAnonymizationType { get; set; }

        /// <summary>
        /// Determines if the log anonoymization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingIPAnonymizationEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoggingIPAnonymizationEnabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsZoneStatisticsModel
    {
        [Newtonsoft.Json.JsonProperty("TotalQueriesServed", Required = Newtonsoft.Json.Required.Always)]
        public long TotalQueriesServed { get; set; }

        [Newtonsoft.Json.JsonProperty("QueriesServedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> QueriesServedChart { get; set; }

        [Newtonsoft.Json.JsonProperty("QueriesByTypeChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> QueriesByTypeChart { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ZoneAvailabilityRequestModel
    {
        /// <summary>
        /// Determines the name of the zone that we are checking
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsZoneAddModel
    {
        /// <summary>
        /// The domain that will be added.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Domain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Domain { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddDnsRecordModel
    {
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsRecordTypes Type { get; set; }

        [Newtonsoft.Json.JsonProperty("Ttl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Ttl { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("Priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Priority { get; set; }

        [Newtonsoft.Json.JsonProperty("Flags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte Flags { get; set; }

        [Newtonsoft.Json.JsonProperty("Tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tag { get; set; }

        [Newtonsoft.Json.JsonProperty("Port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Port { get; set; }

        [Newtonsoft.Json.JsonProperty("PullZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PullZoneId { get; set; }

        [Newtonsoft.Json.JsonProperty("ScriptId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ScriptId { get; set; }

        [Newtonsoft.Json.JsonProperty("Accelerated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Accelerated { get; set; }

        [Newtonsoft.Json.JsonProperty("MonitorType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsMonitoringType MonitorType { get; set; }

        [Newtonsoft.Json.JsonProperty("GeolocationLatitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double GeolocationLatitude { get; set; }

        [Newtonsoft.Json.JsonProperty("GeolocationLongitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double GeolocationLongitude { get; set; }

        [Newtonsoft.Json.JsonProperty("LatencyZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LatencyZone { get; set; }

        [Newtonsoft.Json.JsonProperty("SmartRoutingType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DnsSmartRoutingType SmartRoutingType { get; set; }

        [Newtonsoft.Json.JsonProperty("Disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("EnviromentalVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DnsRecordEnviromentalVariableModel> EnviromentalVariables { get; set; }

        [Newtonsoft.Json.JsonProperty("Comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateDnsRecordModel : AddDnsRecordModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DnsZoneImportResultModel
    {
        [Newtonsoft.Json.JsonProperty("RecordsSuccessful", Required = Newtonsoft.Json.Required.Always)]
        public int RecordsSuccessful { get; set; }

        [Newtonsoft.Json.JsonProperty("RecordsFailed", Required = Newtonsoft.Json.Required.Always)]
        public int RecordsFailed { get; set; }

        [Newtonsoft.Json.JsonProperty("RecordsSkipped", Required = Newtonsoft.Json.Required.Always)]
        public int RecordsSkipped { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfPullZoneModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PullZoneModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PullZoneModel
    {
        /// <summary>
        /// The unique ID of the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The origin URL of the pull zone where the files are fetched from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginUrl { get; set; }

        /// <summary>
        /// Determines if the Pull Zone is currently enabled, active and running
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The list of hostnames linked to this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostnames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HostnameModel> Hostnames { get; set; }

        /// <summary>
        /// The ID of the storage zone that the pull zone is linked to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long StorageZoneId { get; set; }

        /// <summary>
        /// The ID of the edge script that the pull zone is linked to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EdgeScriptId", Required = Newtonsoft.Json.Required.Always)]
        public long EdgeScriptId { get; set; }

        /// <summary>
        /// The list of referrer hostnames that are allowed to access the pull zone.Requests containing the header Referer: hostname that is not on the list will be rejected.If empty, all the referrers are allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedReferrers { get; set; }

        /// <summary>
        /// The list of referrer hostnames that are allowed to access the pull zone. Requests containing the header Referer: hostname that is not on the list will be rejected. If empty, all the referrers are allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedReferrers { get; set; }

        /// <summary>
        /// The list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedIps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedIps { get; set; }

        /// <summary>
        /// Determines if the delivery from the North American region is enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneUS", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableGeoZoneUS { get; set; }

        /// <summary>
        /// Determines if the delivery from the European region is enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneEU", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableGeoZoneEU { get; set; }

        /// <summary>
        /// Determines if the delivery from the Asian / Oceanian region is enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneASIA", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableGeoZoneASIA { get; set; }

        /// <summary>
        /// Determines if the delivery from the South American region is enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneSA", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableGeoZoneSA { get; set; }

        /// <summary>
        /// Determines if the delivery from the Africa region is enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneAF", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableGeoZoneAF { get; set; }

        /// <summary>
        /// True if the URL secure token authentication security is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneSecurityEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool ZoneSecurityEnabled { get; set; }

        /// <summary>
        /// The security key used for secure URL token authentication
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneSecurityKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZoneSecurityKey { get; set; }

        /// <summary>
        /// True if the zone security hash should include the remote IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneSecurityIncludeHashRemoteIP", Required = Newtonsoft.Json.Required.Always)]
        public bool ZoneSecurityIncludeHashRemoteIP { get; set; }

        /// <summary>
        /// True if the Pull Zone is ignoring query strings when serving cached objects
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IgnoreQueryStrings", Required = Newtonsoft.Json.Required.Always)]
        public bool IgnoreQueryStrings { get; set; }

        /// <summary>
        /// The monthly limit of bandwidth in bytes that the pullzone is allowed to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthLimit", Required = Newtonsoft.Json.Required.Always)]
        public long MonthlyBandwidthLimit { get; set; }

        /// <summary>
        /// The amount of bandwidth in bytes that the pull zone used this month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public long MonthlyBandwidthUsed { get; set; }

        /// <summary>
        /// The total monthly charges for this so zone so far
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyCharges", Required = Newtonsoft.Json.Required.Always)]
        public decimal MonthlyCharges { get; set; }

        /// <summary>
        /// Determines if the Pull Zone should forward the current hostname to the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddHostHeader", Required = Newtonsoft.Json.Required.Always)]
        public bool AddHostHeader { get; set; }

        /// <summary>
        /// Determines the host header that will be sent to the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginHostHeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginHostHeader { get; set; }

        /// <summary>
        /// The type of the pull zone. Premium = 0, Volume = 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneType Type { get; set; }

        /// <summary>
        /// The list of extensions that will return the CORS headers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccessControlOriginHeaderExtensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccessControlOriginHeaderExtensions { get; set; }

        /// <summary>
        /// Determines if the CORS headers should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAccessControlOriginHeader", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableAccessControlOriginHeader { get; set; }

        /// <summary>
        /// Determines if the cookies are disabled for the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableCookies", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableCookies { get; set; }

        /// <summary>
        /// The list of budget redirected countries with the two-letter Alpha2 ISO codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BudgetRedirectedCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BudgetRedirectedCountries { get; set; }

        /// <summary>
        /// The list of blocked countries with the two-letter Alpha2 ISO codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedCountries { get; set; }

        /// <summary>
        /// If true the server will use the origin shield feature
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableOriginShield", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableOriginShield { get; set; }

        /// <summary>
        /// The override cache time for the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheControlMaxAgeOverride", Required = Newtonsoft.Json.Required.Always)]
        public long CacheControlMaxAgeOverride { get; set; }

        /// <summary>
        /// The override cache time for the pull zone for the end client
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheControlPublicMaxAgeOverride", Required = Newtonsoft.Json.Required.Always)]
        public long CacheControlPublicMaxAgeOverride { get; set; }

        /// <summary>
        /// Excessive requests are delayed until their number exceeds the maximum burst size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BurstSize", Required = Newtonsoft.Json.Required.Always)]
        public int BurstSize { get; set; }

        /// <summary>
        /// Max number of requests per IP per second
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestLimit", Required = Newtonsoft.Json.Required.Always)]
        public int RequestLimit { get; set; }

        /// <summary>
        /// If true, access to root path will return a 403 error
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockRootPathAccess", Required = Newtonsoft.Json.Required.Always)]
        public bool BlockRootPathAccess { get; set; }

        /// <summary>
        /// If true, POST requests to the zone will be blocked
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockPostRequests", Required = Newtonsoft.Json.Required.Always)]
        public bool BlockPostRequests { get; set; }

        /// <summary>
        /// The maximum rate at which the zone will transfer data in kb/s. 0 for unlimited
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LimitRatePerSecond", Required = Newtonsoft.Json.Required.Always)]
        public double LimitRatePerSecond { get; set; }

        /// <summary>
        /// The amount of data after the rate limit will be activated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LimitRateAfter", Required = Newtonsoft.Json.Required.Always)]
        public double LimitRateAfter { get; set; }

        /// <summary>
        /// The number of connections limited per IP for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConnectionLimitPerIPCount", Required = Newtonsoft.Json.Required.Always)]
        public int ConnectionLimitPerIPCount { get; set; }

        /// <summary>
        /// The custom price override for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PriceOverride", Required = Newtonsoft.Json.Required.Always)]
        public decimal PriceOverride { get; set; }

        /// <summary>
        /// Determines if the Add Canonical Header is enabled for this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddCanonicalHeader", Required = Newtonsoft.Json.Required.Always)]
        public bool AddCanonicalHeader { get; set; }

        /// <summary>
        /// Determines if the logging is enabled for this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableLogging", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableLogging { get; set; }

        /// <summary>
        /// Determines if the cache slice (Optimize for video) feature is enabled for the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCacheSlice", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableCacheSlice { get; set; }

        /// <summary>
        /// Determines if smart caching is enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableSmartCache", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSmartCache { get; set; }

        /// <summary>
        /// The list of edge rules on this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EdgeRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EdgeRuleV2Model> EdgeRules { get; set; }

        /// <summary>
        /// Determines if the WebP Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableWebPVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableWebPVary { get; set; }

        /// <summary>
        /// Determines if the AVIF Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAvifVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableAvifVary { get; set; }

        /// <summary>
        /// Determines if the Country Code Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCountryCodeVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableCountryCodeVary { get; set; }

        /// <summary>
        /// Determines if the Mobile Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableMobileVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableMobileVary { get; set; }

        /// <summary>
        /// Determines if the Cookie Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCookieVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableCookieVary { get; set; }

        /// <summary>
        /// Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CookieVaryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CookieVaryParameters { get; set; }

        /// <summary>
        /// Determines if the Hostname Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableHostnameVary", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableHostnameVary { get; set; }

        /// <summary>
        /// The CNAME domain of the pull zone for setting up custom hostnames
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CnameDomain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CnameDomain { get; set; }

        /// <summary>
        /// Determines if the AWS Signing is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool AWSSigningEnabled { get; set; }

        /// <summary>
        /// The AWS Signing region key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningKey { get; set; }

        /// <summary>
        /// The AWS Signing region secret
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningSecret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningSecret { get; set; }

        /// <summary>
        /// The AWS Signing region name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningRegionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningRegionName { get; set; }

        /// <summary>
        /// Determines if the TLS 1 is enabled on the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingIPAnonymizationEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool LoggingIPAnonymizationEnabled { get; set; }

        /// <summary>
        /// Determines if the TLS 1 is enabled on the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTLS1", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTLS1 { get; set; }

        /// <summary>
        /// Determines if the TLS 1.1 is enabled on the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTLS1_1", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableTLS1_1 { get; set; }

        /// <summary>
        /// Determines if the Pull Zone should verify the origin SSL certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VerifyOriginSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool VerifyOriginSSL { get; set; }

        /// <summary>
        /// Determines if custom error page code should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageEnableCustomCode", Required = Newtonsoft.Json.Required.Always)]
        public bool ErrorPageEnableCustomCode { get; set; }

        /// <summary>
        /// Contains the custom error page code that will be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageCustomCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorPageCustomCode { get; set; }

        /// <summary>
        /// Determines if the statuspage widget should be displayed on the error pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageEnableStatuspageWidget", Required = Newtonsoft.Json.Required.Always)]
        public bool ErrorPageEnableStatuspageWidget { get; set; }

        /// <summary>
        /// The statuspage code that will be used to build the status widget
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageStatuspageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorPageStatuspageCode { get; set; }

        /// <summary>
        /// Determines if the error pages should be whitelabel or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageWhitelabel", Required = Newtonsoft.Json.Required.Always)]
        public bool ErrorPageWhitelabel { get; set; }

        /// <summary>
        /// The zone code of the origin shield
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldZoneCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginShieldZoneCode { get; set; }

        /// <summary>
        /// Determines if the log forawrding is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool LogForwardingEnabled { get; set; }

        /// <summary>
        /// The log forwarding hostname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingHostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogForwardingHostname { get; set; }

        /// <summary>
        /// The log forwarding port
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingPort", Required = Newtonsoft.Json.Required.Always)]
        public int LogForwardingPort { get; set; }

        /// <summary>
        /// The log forwarding token value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogForwardingToken { get; set; }

        /// <summary>
        /// Determines the log forwarding protocol type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingProtocol", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneLogForwarderProtocolType LogForwardingProtocol { get; set; }

        /// <summary>
        /// Determines if the permanent logging feature is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingSaveToStorage", Required = Newtonsoft.Json.Required.Always)]
        public bool LoggingSaveToStorage { get; set; }

        /// <summary>
        /// The ID of the logging storage zone that is configured for this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingStorageZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long LoggingStorageZoneId { get; set; }

        /// <summary>
        /// Determines if the zone will follow origin redirects
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FollowRedirects", Required = Newtonsoft.Json.Required.Always)]
        public bool FollowRedirects { get; set; }

        /// <summary>
        /// The ID of the video library that the zone is linked to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VideoLibraryId", Required = Newtonsoft.Json.Required.Always)]
        public long VideoLibraryId { get; set; }

        /// <summary>
        /// The ID of the DNS record tied to this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DnsRecordId", Required = Newtonsoft.Json.Required.Always)]
        public long DnsRecordId { get; set; }

        /// <summary>
        /// The ID of the DNS zone tied to this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DnsZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long DnsZoneId { get; set; }

        /// <summary>
        /// The cached version of the DNS record value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DnsRecordValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsRecordValue { get; set; }

        /// <summary>
        /// Determines if the optimizer should be enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerEnabled { get; set; }

        /// <summary>
        /// Determines the maximum automatic image size for desktop clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerDesktopMaxWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 5000)]
        public int OptimizerDesktopMaxWidth { get; set; }

        /// <summary>
        /// Determines the maximum automatic image size for mobile clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMobileMaxWidth", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 5000)]
        public int OptimizerMobileMaxWidth { get; set; }

        /// <summary>
        /// Determines the image quality for desktop clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerImageQuality", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int OptimizerImageQuality { get; set; }

        /// <summary>
        /// Determines the image quality for mobile clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMobileImageQuality", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int OptimizerMobileImageQuality { get; set; }

        /// <summary>
        /// Determines if the WebP optimization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnableWebP", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerEnableWebP { get; set; }

        /// <summary>
        /// Determines the image manipulation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnableManipulationEngine", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerEnableManipulationEngine { get; set; }

        /// <summary>
        /// Determines if the CSS minifcation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMinifyCSS", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerMinifyCSS { get; set; }

        /// <summary>
        /// Determines if the JavaScript minifcation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMinifyJavaScript", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerMinifyJavaScript { get; set; }

        /// <summary>
        /// Determines if image watermarking should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerWatermarkEnabled { get; set; }

        /// <summary>
        /// Sets the URL of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptimizerWatermarkUrl { get; set; }

        /// <summary>
        /// Sets the position of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkPosition", Required = Newtonsoft.Json.Required.Always)]
        public OptimizerWatermarkPosition OptimizerWatermarkPosition { get; set; }

        /// <summary>
        /// Sets the offset of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkOffset", Required = Newtonsoft.Json.Required.Always)]
        public double OptimizerWatermarkOffset { get; set; }

        /// <summary>
        /// Sets the minimum image size to which the watermark will be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkMinImageSize", Required = Newtonsoft.Json.Required.Always)]
        public int OptimizerWatermarkMinImageSize { get; set; }

        /// <summary>
        /// Determines if the automatic image optimization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerAutomaticOptimizationEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerAutomaticOptimizationEnabled { get; set; }

        /// <summary>
        /// The IP of the storage zone used for Perma-Cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PermaCacheStorageZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long PermaCacheStorageZoneId { get; set; }

        /// <summary>
        /// The number of retries to the origin server
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetries", Required = Newtonsoft.Json.Required.Always)]
        public int OriginRetries { get; set; }

        /// <summary>
        /// The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginConnectTimeout", Required = Newtonsoft.Json.Required.Always)]
        public int OriginConnectTimeout { get; set; }

        /// <summary>
        /// The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginResponseTimeout", Required = Newtonsoft.Json.Required.Always)]
        public int OriginResponseTimeout { get; set; }

        /// <summary>
        /// Determines if we should use stale cache while cache is updating
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseStaleWhileUpdating", Required = Newtonsoft.Json.Required.Always)]
        public bool UseStaleWhileUpdating { get; set; }

        /// <summary>
        /// Determines if we should use stale cache while the origin is offline
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseStaleWhileOffline", Required = Newtonsoft.Json.Required.Always)]
        public bool UseStaleWhileOffline { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a 5XX response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetry5XXResponses", Required = Newtonsoft.Json.Required.Always)]
        public bool OriginRetry5XXResponses { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a connection timeout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryConnectionTimeout", Required = Newtonsoft.Json.Required.Always)]
        public bool OriginRetryConnectionTimeout { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a response timeout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryResponseTimeout", Required = Newtonsoft.Json.Required.Always)]
        public bool OriginRetryResponseTimeout { get; set; }

        /// <summary>
        /// Determines the amount of time that the CDN should wait before retrying an origin request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryDelay", Required = Newtonsoft.Json.Required.Always)]
        public int OriginRetryDelay { get; set; }

        /// <summary>
        /// Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QueryStringVaryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStringVaryParameters { get; set; }

        /// <summary>
        /// Determines if the origin shield concurrency limit is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldEnableConcurrencyLimit", Required = Newtonsoft.Json.Required.Always)]
        public bool OriginShieldEnableConcurrencyLimit { get; set; }

        /// <summary>
        /// Determines the number of maximum concurrent requests allowed to the origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldMaxConcurrentRequests", Required = Newtonsoft.Json.Required.Always)]
        public int OriginShieldMaxConcurrentRequests { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableSafeHop", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableSafeHop { get; set; }

        /// <summary>
        /// Determines if bunny.net should be caching error responses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheErrorResponses", Required = Newtonsoft.Json.Required.Always)]
        public bool CacheErrorResponses { get; set; }

        /// <summary>
        /// Determines the max queue wait time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldQueueMaxWaitTime", Required = Newtonsoft.Json.Required.Always)]
        public int OriginShieldQueueMaxWaitTime { get; set; }

        /// <summary>
        /// Determines the max number of origin requests that will remain in the queu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldMaxQueuedRequests", Required = Newtonsoft.Json.Required.Always)]
        public int OriginShieldMaxQueuedRequests { get; set; }

        /// <summary>
        /// Contains the list of optimizer classes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OptimizerClassModel> OptimizerClasses { get; set; }

        /// <summary>
        /// Determines if the optimizer class list should be enforced
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerForceClasses", Required = Newtonsoft.Json.Required.Always)]
        public bool OptimizerForceClasses { get; set; }

        /// <summary>
        /// Determines if cache update is performed in the background.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseBackgroundUpdate", Required = Newtonsoft.Json.Required.Always)]
        public bool UseBackgroundUpdate { get; set; }

        /// <summary>
        /// If set to true, any hostnames added to this Pull Zone will automatically enable SSL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAutoSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableAutoSSL { get; set; }

        /// <summary>
        /// If set to true the query string ordering property is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableQueryStringOrdering", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableQueryStringOrdering { get; set; }

        /// <summary>
        /// Gets the log anonymization type for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogAnonymizationType", Required = Newtonsoft.Json.Required.Always)]
        public LogAnonymizationType LogAnonymizationType { get; set; }

        [Newtonsoft.Json.JsonProperty("LogFormat", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneLogFormat LogFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("LogForwardingFormat", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneLogFormat LogForwardingFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ShieldDDosProtectionType", Required = Newtonsoft.Json.Required.Always)]
        public ShieldDDosProtectionType ShieldDDosProtectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("ShieldDDosProtectionEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool ShieldDDosProtectionEnabled { get; set; }

        /// <summary>
        /// The type of the origin for this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginType", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneOriginType OriginType { get; set; }

        /// <summary>
        /// Determines if request coalescing is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableRequestCoalescing", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableRequestCoalescing { get; set; }

        /// <summary>
        /// Determines the lock time for coalesced requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestCoalescingTimeout", Required = Newtonsoft.Json.Required.Always)]
        public int RequestCoalescingTimeout { get; set; }

        /// <summary>
        /// Returns the link short preview value for the pull zone origin connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginLinkValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginLinkValue { get; set; }

        /// <summary>
        /// If true, the built-in let's encrypt is disabled and requests are passed to the origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableLetsEncrypt", Required = Newtonsoft.Json.Required.Always)]
        public bool DisableLetsEncrypt { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableBunnyImageAi", Required = Newtonsoft.Json.Required.Always)]
        public bool EnableBunnyImageAi { get; set; }

        [Newtonsoft.Json.JsonProperty("BunnyAiImageBlueprints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BunnyAiImageBlueprintModel> BunnyAiImageBlueprints { get; set; }

        /// <summary>
        /// Determines if the preloading screen is currently enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PreloadingScreenEnabled { get; set; }

        /// <summary>
        /// The custom preloading screen code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreloadingScreenCode { get; set; }

        /// <summary>
        /// The preloading screen logo URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenLogoUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreloadingScreenLogoUrl { get; set; }

        /// <summary>
        /// Determines if the custom preloader screen is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenCodeEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PreloadingScreenCodeEnabled { get; set; }

        /// <summary>
        /// The currently configured preloading screem theme. (0 - Light, 1 - Dark)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenTheme", Required = Newtonsoft.Json.Required.Always)]
        public PreloadingScreenTheme PreloadingScreenTheme { get; set; }

        /// <summary>
        /// The delay in miliseconds after which the preloading screen will be desplayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenDelay", Required = Newtonsoft.Json.Required.Always)]
        public int PreloadingScreenDelay { get; set; }

        /// <summary>
        /// The Pull Zone specific pricing discount for EU and US region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EUUSDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int EUUSDiscount { get; set; }

        /// <summary>
        /// The Pull Zone specific pricing discount for South America region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("SouthAmericaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int SouthAmericaDiscount { get; set; }

        /// <summary>
        /// The Pull Zone specific pricing discount for Africa region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AfricaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int AfricaDiscount { get; set; }

        /// <summary>
        /// The Pull Zone specific pricing discount for Asia &amp; Oceania region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AsiaOceaniaDiscount", Required = Newtonsoft.Json.Required.Always)]
        public int AsiaOceaniaDiscount { get; set; }

        /// <summary>
        /// The list of routing filters enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RoutingFilters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RoutingFilters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HostnameModel
    {
        /// <summary>
        /// The unique ID of the hostname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The hostname value for the domain name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Determines if the Force SSL feature is enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForceSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceSSL { get; set; }

        /// <summary>
        /// Determines if this is a system hostname controlled by bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IsSystemHostname", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSystemHostname { get; set; }

        /// <summary>
        /// Determines if the hostname has an SSL certificate configured
        /// </summary>
        [Newtonsoft.Json.JsonProperty("HasCertificate", Required = Newtonsoft.Json.Required.Always)]
        public bool HasCertificate { get; set; }

        /// <summary>
        /// Contains the Base64Url encoded certificate for the hostname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Certificate { get; set; }

        /// <summary>
        /// Contains the Base64Url encoded certificate key for the hostname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CertificateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CertificateKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EdgeRuleV2Model
    {
        /// <summary>
        /// The unique GUID of the edge rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Guid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        /// <summary>
        /// The action type of the edge rule. ForceSSL = 0, Redirect = 1, OriginUrl = 2, OverrideCacheTime = 3, BlockRequest = 4, SetResponseHeader = 5, SetRequestHeader = 6, ForceDownload = 7, DisableTokenAuthentication = 8, EnableTokenAuthentication = 9, OverrideCacheTimePublic = 10, IgnoreQueryString = 11, DisableOptimizer = 12, ForceCompression = 13, SetStatusCode = 14, BypassPermaCache = 15, OverrideBrowserCacheTime = 16
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ActionType", Required = Newtonsoft.Json.Required.Always)]
        public EdgeRuleActionType ActionType { get; set; }

        /// <summary>
        /// The Action parameter 1. The value depends on other parameters of the edge rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ActionParameter1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionParameter1 { get; set; }

        /// <summary>
        /// The Action parameter 2. The value depends on other parameters of the edge rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ActionParameter2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionParameter2 { get; set; }

        [Newtonsoft.Json.JsonProperty("Triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Trigger> Triggers { get; set; }

        /// <summary>
        /// The trigger matching type. MatchAny = 0, MatchAll = 1, MatchNone = 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TriggerMatchingType", Required = Newtonsoft.Json.Required.Always)]
        public TriggerMatchingTypes TriggerMatchingType { get; set; }

        /// <summary>
        /// The description of the edge rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Determines if the edge rule is currently enabled or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = ForceSSL
    /// <br/>1 = Redirect
    /// <br/>2 = OriginUrl
    /// <br/>3 = OverrideCacheTime
    /// <br/>4 = BlockRequest
    /// <br/>5 = SetResponseHeader
    /// <br/>6 = SetRequestHeader
    /// <br/>7 = ForceDownload
    /// <br/>8 = DisableTokenAuthentication
    /// <br/>9 = EnableTokenAuthentication
    /// <br/>10 = OverrideCacheTimePublic
    /// <br/>11 = IgnoreQueryString
    /// <br/>12 = DisableOptimizer
    /// <br/>13 = ForceCompression
    /// <br/>14 = SetStatusCode
    /// <br/>15 = BypassPermaCache
    /// <br/>16 = OverrideBrowserCacheTime
    /// <br/>17 = OriginStorage
    /// <br/>18 = SetNetworkRateLimit
    /// <br/>19 = SetConnectionLimit
    /// <br/>20 = SetRequestsPerSecondLimit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EdgeRuleActionType
    {

        ForceSSL = 0,

        Redirect = 1,

        OriginUrl = 2,

        OverrideCacheTime = 3,

        BlockRequest = 4,

        SetResponseHeader = 5,

        SetRequestHeader = 6,

        ForceDownload = 7,

        DisableTokenAuthentication = 8,

        EnableTokenAuthentication = 9,

        OverrideCacheTimePublic = 10,

        IgnoreQueryString = 11,

        DisableOptimizer = 12,

        ForceCompression = 13,

        SetStatusCode = 14,

        BypassPermaCache = 15,

        OverrideBrowserCacheTime = 16,

        OriginStorage = 17,

        SetNetworkRateLimit = 18,

        SetConnectionLimit = 19,

        SetRequestsPerSecondLimit = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Trigger
    {
        /// <summary>
        /// The type of the trigger. Url = 0, RequestHeader = 1, ResponseHeader = 2, UrlExtension = 3, CountryCode = 4, RemoteIP = 5, UrlQueryString = 6, RandomChance = 7
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public TriggerTypes Type { get; set; }

        /// <summary>
        /// The list of pattern matches that will trigger the edge rule
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PatternMatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> PatternMatches { get; set; }

        /// <summary>
        /// The type of pattern matching. MatchAny = 0, MatchAll = 1, MatchNone = 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PatternMatchingType", Required = Newtonsoft.Json.Required.Always)]
        public PatternMatchingTypes PatternMatchingType { get; set; }

        /// <summary>
        /// The trigger parameter 1. The value depends on the type of trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Parameter1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Url
    /// <br/>1 = RequestHeader
    /// <br/>2 = ResponseHeader
    /// <br/>3 = UrlExtension
    /// <br/>4 = CountryCode
    /// <br/>5 = RemoteIP
    /// <br/>6 = UrlQueryString
    /// <br/>7 = RandomChance
    /// <br/>8 = StatusCode
    /// <br/>9 = RequestMethod
    /// <br/>10 = CookieValue
    /// <br/>11 = CountryStateCode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TriggerTypes
    {

        Url = 0,

        RequestHeader = 1,

        ResponseHeader = 2,

        UrlExtension = 3,

        CountryCode = 4,

        RemoteIP = 5,

        UrlQueryString = 6,

        RandomChance = 7,

        StatusCode = 8,

        RequestMethod = 9,

        CookieValue = 10,

        CountryStateCode = 11,

    }

    /// <summary>
    /// 0 = MatchAny
    /// <br/>1 = MatchAll
    /// <br/>2 = MatchNone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PatternMatchingTypes
    {

        MatchAny = 0,

        MatchAll = 1,

        MatchNone = 2,

    }

    /// <summary>
    /// 0 = MatchAny
    /// <br/>1 = MatchAll
    /// <br/>2 = MatchNone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TriggerMatchingTypes
    {

        MatchAny = 0,

        MatchAll = 1,

        MatchNone = 2,

    }

    /// <summary>
    /// 0 = UDP
    /// <br/>1 = TCP
    /// <br/>2 = TCPEncrypted
    /// <br/>3 = DataDog
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PullZoneLogForwarderProtocolType
    {

        UDP = 0,

        TCP = 1,

        TCPEncrypted = 2,

        DataDog = 3,

    }

    /// <summary>
    /// 0 = BottomLeft
    /// <br/>1 = BottomRight
    /// <br/>2 = TopLeft
    /// <br/>3 = TopRight
    /// <br/>4 = Center
    /// <br/>5 = CenterStretch
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OptimizerWatermarkPosition
    {

        BottomLeft = 0,

        BottomRight = 1,

        TopLeft = 2,

        TopRight = 3,

        Center = 4,

        CenterStretch = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptimizerClassModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Plain
    /// <br/>1 = JSON
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PullZoneLogFormat
    {

        Plain = 0,

        JSON = 1,

    }

    /// <summary>
    /// 0 = DetectOnly
    /// <br/>1 = ActiveStandard
    /// <br/>2 = ActiveAggressive
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ShieldDDosProtectionType
    {

        DetectOnly = 0,

        ActiveStandard = 1,

        ActiveAggressive = 2,

    }

    /// <summary>
    /// 0 = OriginUrl
    /// <br/>1 = DnsAccelerate
    /// <br/>2 = StorageZone
    /// <br/>3 = LoadBalancer
    /// <br/>4 = EdgeScript
    /// <br/>5 = MagicContainers
    /// <br/>6 = PushZone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PullZoneOriginType
    {

        OriginUrl = 0,

        DnsAccelerate = 1,

        StorageZone = 2,

        LoadBalancer = 3,

        EdgeScript = 4,

        MagicContainers = 5,

        PushZone = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BunnyAiImageBlueprintModel
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Light
    /// <br/>1 = Dark
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PreloadingScreenTheme
    {

        Light = 0,

        Dark = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ToggleRequestModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Always)]
        public bool Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PullZoneSettingsModel
    {
        /// <summary>
        /// Sets the origin URL of the Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginUrl { get; set; }

        /// <summary>
        /// Sets the list of referrer hostnames that are allowed to access the pull zone. Requests containing the header Referer: hostname that is not on the list will be rejected. If empty, all the referrers are allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AllowedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedReferrers { get; set; }

        /// <summary>
        /// Sets the list of referrer hostnames that are blocked from accessing the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedReferrers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedReferrers { get; set; }

        /// <summary>
        /// Sets the list of IPs that are blocked from accessing the pull zone. Requests coming from the following IPs will be rejected. If empty, all the IPs will be allowed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedIps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedIps { get; set; }

        /// <summary>
        /// Determines if the delivery from the North America region should be enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneUS", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoZoneUS { get; set; }

        /// <summary>
        /// Determines if the delivery from the Europe region should be enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneEU", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoZoneEU { get; set; }

        /// <summary>
        /// Determines if the delivery from the Asia / Oceania regions should be enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneASIA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoZoneASIA { get; set; }

        /// <summary>
        /// Determines if the delivery from the South America region should be enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneSA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoZoneSA { get; set; }

        /// <summary>
        /// Determines if the delivery from the Africa region should be enabled for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableGeoZoneAF", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableGeoZoneAF { get; set; }

        /// <summary>
        /// Determines if the zone should block requests to the root of the zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockRootPathAccess", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockRootPathAccess { get; set; }

        /// <summary>
        /// Determines if the POST requests to this zone should be rejected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockPostRequests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BlockPostRequests { get; set; }

        /// <summary>
        /// Determines if the query string ordering should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableQueryStringOrdering", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableQueryStringOrdering { get; set; }

        /// <summary>
        /// Determines if the WebP Vary feature should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableWebpVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableWebpVary { get; set; }

        /// <summary>
        /// Determines if the AVIF Vary feature should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAvifVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableAvifVary { get; set; }

        /// <summary>
        /// Determines if the Mobile Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableMobileVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableMobileVary { get; set; }

        /// <summary>
        /// Determines if the Country Code Vary feature should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCountryCodeVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableCountryCodeVary { get; set; }

        /// <summary>
        /// Determines if the Hostname Vary feature should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableHostnameVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableHostnameVary { get; set; }

        /// <summary>
        /// Determines if cache slicing (Optimize for video) should be enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCacheSlice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableCacheSlice { get; set; }

        /// <summary>
        /// Determines if the zone token authentication security should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneSecurityEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ZoneSecurityEnabled { get; set; }

        /// <summary>
        /// Determines if the token authentication IP validation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneSecurityIncludeHashRemoteIP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ZoneSecurityIncludeHashRemoteIP { get; set; }

        /// <summary>
        /// Determines if the Pull Zone should ignore query strings when serving cached objects (Vary by Query String)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("IgnoreQueryStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IgnoreQueryStrings { get; set; }

        /// <summary>
        /// Sets the monthly limit of bandwidth in bytes that the pullzone is allowed to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MonthlyBandwidthLimit { get; set; }

        /// <summary>
        /// Sets the list of extensions that will return the CORS headers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AccessControlOriginHeaderExtensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AccessControlOriginHeaderExtensions { get; set; }

        /// <summary>
        /// Determines if CORS headers should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAccessControlOriginHeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableAccessControlOriginHeader { get; set; }

        /// <summary>
        /// Determines if the Pull Zone should automatically remove cookies from the responses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableCookies", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisableCookies { get; set; }

        /// <summary>
        /// Sets the list of two letter Alpha2 country codes that will be redirected to the cheapest possible region
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BudgetRedirectedCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BudgetRedirectedCountries { get; set; }

        /// <summary>
        /// Sets the list of two letter Alpha2 country codes that will be blocked from accessing the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedCountries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> BlockedCountries { get; set; }

        /// <summary>
        /// Sets the cache control override setting for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheControlMaxAgeOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CacheControlMaxAgeOverride { get; set; }

        /// <summary>
        /// Sets the browser cache control override setting for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheControlPublicMaxAgeOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CacheControlPublicMaxAgeOverride { get; set; }

        /// <summary>
        /// (Deprecated) Sets the browser cache control override setting for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheControlBrowserMaxAgeOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CacheControlBrowserMaxAgeOverride { get; set; }

        /// <summary>
        /// Determines if the zone should forward the requested host header to the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddHostHeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AddHostHeader { get; set; }

        /// <summary>
        /// Determines if the canonical header should be added by this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AddCanonicalHeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AddCanonicalHeader { get; set; }

        /// <summary>
        /// Determines if the logging should be enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableLogging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableLogging { get; set; }

        /// <summary>
        /// Determines if the log anonoymization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingIPAnonymizationEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoggingIPAnonymizationEnabled { get; set; }

        /// <summary>
        /// The ID of the storage zone that should be used as the Perma-Cache
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PermaCacheStorageZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PermaCacheStorageZoneId { get; set; }

        /// <summary>
        /// Determines if the AWS signing should be enabled or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AWSSigningEnabled { get; set; }

        /// <summary>
        /// Sets the AWS signing key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningKey { get; set; }

        /// <summary>
        /// Sets the AWS signing region name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningRegionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningRegionName { get; set; }

        /// <summary>
        /// Sets the AWS signing secret key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AWSSigningSecret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AWSSigningSecret { get; set; }

        /// <summary>
        /// Determines if the origin shield should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableOriginShield", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableOriginShield { get; set; }

        /// <summary>
        /// Determines the zone code where the origin shield should be set up
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldZoneCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginShieldZoneCode { get; set; }

        /// <summary>
        /// Determines if the TLS 1 should be enabled on this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTLS1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTLS1 { get; set; }

        /// <summary>
        /// Determines if the TLS 1.1 should be enabled on this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableTLS1_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableTLS1_1 { get; set; }

        /// <summary>
        /// Determines if the cache error responses should be enabled on the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheErrorResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CacheErrorResponses { get; set; }

        /// <summary>
        /// Determines if the SSL certificate should be verified when connecting to the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VerifyOriginSSL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VerifyOriginSSL { get; set; }

        /// <summary>
        /// Sets the log forwarding token for the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LogForwardingEnabled { get; set; }

        /// <summary>
        /// Sets the log forwarding destination hostname for the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingHostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogForwardingHostname { get; set; }

        /// <summary>
        /// Sets the log forwarding port for the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LogForwardingPort { get; set; }

        /// <summary>
        /// Sets the log forwarding token for the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingToken", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LogForwardingToken { get; set; }

        /// <summary>
        /// Sets the log forwarding protocol type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogForwardingProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PullZoneLogForwarderProtocolType LogForwardingProtocol { get; set; }

        /// <summary>
        /// Determines if the logging permanent storage should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingSaveToStorage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LoggingSaveToStorage { get; set; }

        /// <summary>
        /// Sets the Storage Zone id that should contain the logs from this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LoggingStorageZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LoggingStorageZoneId { get; set; }

        /// <summary>
        /// Determines if the zone should follow redirects return by the oprigin and cache the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FollowRedirects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FollowRedirects { get; set; }

        /// <summary>
        /// Determines the maximum number of connections per IP that will be allowed to connect to this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConnectionLimitPerIPCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ConnectionLimitPerIPCount { get; set; }

        /// <summary>
        /// Determines the maximum number of requests per second that will be allowed to connect to this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RequestLimit { get; set; }

        /// <summary>
        /// Determines the amount of traffic transferred before the client is limited
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LimitRateAfter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double LimitRateAfter { get; set; }

        /// <summary>
        /// Determines the maximum number of requests per second coming from a single IP before it is blocked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LimitRatePerSecond", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LimitRatePerSecond { get; set; }

        /// <summary>
        /// Determines the maximum burst requests before an IP is blocked
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BurstSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BurstSize { get; set; }

        /// <summary>
        /// Determines if WAF should be enabled on the zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WAFEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WAFEnabled { get; set; }

        /// <summary>
        /// Determines the enabled WAF rule groups
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WAFDisabledRuleGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WAFDisabledRuleGroups { get; set; }

        /// <summary>
        /// Determines the disabled WAF rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WAFDisabledRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WAFDisabledRules { get; set; }

        /// <summary>
        /// Determines if WAF should enable request headers logging
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WAFEnableRequestHeaderLogging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WAFEnableRequestHeaderLogging { get; set; }

        /// <summary>
        /// Determines the list of headers that will be ignored in the WAF logs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("WAFRequestHeaderIgnores", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WAFRequestHeaderIgnores { get; set; }

        /// <summary>
        /// Determines if custom error page code should be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageEnableCustomCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ErrorPageEnableCustomCode { get; set; }

        /// <summary>
        /// Contains the custom error page code that will be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageCustomCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorPageCustomCode { get; set; }

        /// <summary>
        /// Determines if the statuspage widget should be displayed on the error pages
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageEnableStatuspageWidget", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ErrorPageEnableStatuspageWidget { get; set; }

        /// <summary>
        /// The statuspage code that will be used to build the status widget
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageStatuspageCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorPageStatuspageCode { get; set; }

        /// <summary>
        /// Determines if the error pages should be whitelabel or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ErrorPageWhitelabel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ErrorPageWhitelabel { get; set; }

        /// <summary>
        /// Determines if the optimizer should be enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerEnabled { get; set; }

        /// <summary>
        /// Determines the maximum automatic image size for desktop clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerDesktopMaxWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5000)]
        public int OptimizerDesktopMaxWidth { get; set; }

        /// <summary>
        /// Determines the maximum automatic image size for mobile clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMobileMaxWidth", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5000)]
        public int OptimizerMobileMaxWidth { get; set; }

        /// <summary>
        /// Determines the image quality for desktop clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerImageQuality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int OptimizerImageQuality { get; set; }

        /// <summary>
        /// Determines the image quality for mobile clients
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMobileImageQuality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 100)]
        public int OptimizerMobileImageQuality { get; set; }

        /// <summary>
        /// Determines if the WebP optimization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnableWebP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerEnableWebP { get; set; }

        /// <summary>
        /// Determines the image manipulation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerEnableManipulationEngine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerEnableManipulationEngine { get; set; }

        /// <summary>
        /// Determines if the CSS minifcation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMinifyCSS", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerMinifyCSS { get; set; }

        /// <summary>
        /// Determines if the JavaScript minifcation should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerMinifyJavaScript", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerMinifyJavaScript { get; set; }

        /// <summary>
        /// Determines if image watermarking should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerWatermarkEnabled { get; set; }

        /// <summary>
        /// Sets the URL of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptimizerWatermarkUrl { get; set; }

        /// <summary>
        /// Sets the position of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptimizerWatermarkPosition OptimizerWatermarkPosition { get; set; }

        /// <summary>
        /// Sets the offset of the watermark image
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double OptimizerWatermarkOffset { get; set; }

        /// <summary>
        /// Sets the minimum image size to which the watermark will be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerWatermarkMinImageSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OptimizerWatermarkMinImageSize { get; set; }

        /// <summary>
        /// Determines if the automatic image optimization should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerAutomaticOptimizationEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerAutomaticOptimizationEnabled { get; set; }

        /// <summary>
        /// Determines the list of optimizer classes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PullZoneOptimizerClassModel> OptimizerClasses { get; set; }

        /// <summary>
        /// Determines if the optimizer classes should be forced
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OptimizerForceClasses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OptimizerForceClasses { get; set; }

        /// <summary>
        /// The type of the pull zone. Premium = 0, Volume = 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PullZoneType Type { get; set; }

        /// <summary>
        /// The number of retries to the origin server
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginRetries { get; set; }

        /// <summary>
        /// The amount of seconds to wait when connecting to the origin. Otherwise the request will fail or retry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginConnectTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginConnectTimeout { get; set; }

        /// <summary>
        /// The amount of seconds to wait when waiting for the origin reply. Otherwise the request will fail or retry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginResponseTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginResponseTimeout { get; set; }

        /// <summary>
        /// Determines if we should use stale cache while cache is updating
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseStaleWhileUpdating", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseStaleWhileUpdating { get; set; }

        /// <summary>
        /// Determines if we should use stale cache while the origin is offline
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseStaleWhileOffline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseStaleWhileOffline { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a 5XX response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetry5XXResponses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OriginRetry5XXResponses { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a connection timeout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryConnectionTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OriginRetryConnectionTimeout { get; set; }

        /// <summary>
        /// Determines if we should retry the request in case of a response timeout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryResponseTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OriginRetryResponseTimeout { get; set; }

        /// <summary>
        /// Determines the amount of time that the CDN should wait before retrying an origin request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginRetryDelay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginRetryDelay { get; set; }

        /// <summary>
        /// Determines the origin port of the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DnsOriginPort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DnsOriginPort { get; set; }

        /// <summary>
        /// Determines the origin scheme of the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DnsOriginScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DnsOriginScheme { get; set; }

        /// <summary>
        /// Contains the list of vary parameters that will be used for vary cache by query string. If empty, all parameters will be used to construct the key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QueryStringVaryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStringVaryParameters { get; set; }

        /// <summary>
        /// Determines if the origin shield concurrency limit is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldEnableConcurrencyLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OriginShieldEnableConcurrencyLimit { get; set; }

        /// <summary>
        /// Determines the number of maximum concurrent requests allowed to the origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldMaxConcurrentRequests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 10000)]
        public int OriginShieldMaxConcurrentRequests { get; set; }

        /// <summary>
        /// Determines if the Cookie Vary feature is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableCookieVary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableCookieVary { get; set; }

        /// <summary>
        /// Contains the list of vary parameters that will be used for vary cache by cookie string. If empty, cookie vary will not be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CookieVaryParameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CookieVaryParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableSafeHop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableSafeHop { get; set; }

        /// <summary>
        /// Determines the max queue wait time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldQueueMaxWaitTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int OriginShieldQueueMaxWaitTime { get; set; }

        /// <summary>
        /// Determines the max number of origin requests that will remain in the queue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldMaxQueuedRequests", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 30000)]
        public int OriginShieldMaxQueuedRequests { get; set; }

        /// <summary>
        /// Determines if cache update is performed in the background.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UseBackgroundUpdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseBackgroundUpdate { get; set; }

        /// <summary>
        /// If set to true, any hostnames added to this Pull Zone will automatically enable SSL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableAutoSSL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableAutoSSL { get; set; }

        /// <summary>
        /// Sets the log anonymization type for this pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LogAnonymizationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LogAnonymizationType LogAnonymizationType { get; set; }

        /// <summary>
        /// The ID of the storage zone that will be used as the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageZoneId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StorageZoneId { get; set; }

        /// <summary>
        /// The ID of the edge script that will be used as the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EdgeScriptId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EdgeScriptId { get; set; }

        /// <summary>
        /// Determine the type of the origin for this Pull Zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PullZoneOriginType OriginType { get; set; }

        [Newtonsoft.Json.JsonProperty("MagicContainersAppId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MagicContainersAppId { get; set; }

        [Newtonsoft.Json.JsonProperty("LogFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PullZoneLogFormat LogFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("LogForwardingFormat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PullZoneLogFormat LogForwardingFormat { get; set; }

        [Newtonsoft.Json.JsonProperty("ShieldDDosProtectionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ShieldDDosProtectionType ShieldDDosProtectionType { get; set; }

        [Newtonsoft.Json.JsonProperty("ShieldDDosProtectionEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShieldDDosProtectionEnabled { get; set; }

        /// <summary>
        /// Sets the host header that will be sent to the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginHostHeader", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginHostHeader { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableSmartCache", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableSmartCache { get; set; }

        /// <summary>
        /// Determines if request coalescing is currently enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("EnableRequestCoalescing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableRequestCoalescing { get; set; }

        /// <summary>
        /// Determines the lock time for coalesced requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestCoalescingTimeout", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RequestCoalescingTimeout { get; set; }

        /// <summary>
        /// If set to true, the built-in let's encrypt will be disabled and requests are passed to the origin.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DisableLetsEncrypt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DisableLetsEncrypt { get; set; }

        [Newtonsoft.Json.JsonProperty("EnableBunnyImageAi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EnableBunnyImageAi { get; set; }

        [Newtonsoft.Json.JsonProperty("BunnyAiImageBlueprints", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BunnyAiImageBlueprintModel> BunnyAiImageBlueprints { get; set; }

        /// <summary>
        /// Determines if the preloading screen is currently enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PreloadingScreenEnabled { get; set; }

        /// <summary>
        /// The custom preloading screen coed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreloadingScreenCode { get; set; }

        /// <summary>
        /// The preloading screen logo URL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenLogoUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreloadingScreenLogoUrl { get; set; }

        /// <summary>
        /// The currently configured preloading screem theme. (0 - Light, 1 - Dark)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenTheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PreloadingScreenTheme PreloadingScreenTheme { get; set; }

        /// <summary>
        /// Determines if the custom preloader screen should be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenCodeEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool PreloadingScreenCodeEnabled { get; set; }

        /// <summary>
        /// The delay in miliseconds after which the preloading screen will be displayed (0 - 10000ms)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PreloadingScreenDelay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 10000)]
        public int PreloadingScreenDelay { get; set; }

        /// <summary>
        /// The list of routing filters enabled for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RoutingFilters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> RoutingFilters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PullZoneOptimizerClassModel
    {
        /// <summary>
        /// The name of the optimizer class that will be used in the query string
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The list of settings and values the class will send to the optimizer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OriginShieldConcurrencyStatisticsModel
    {
        /// <summary>
        /// The constructed chart of origin shield concurrent requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConcurrentRequestsChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> ConcurrentRequestsChart { get; set; }

        /// <summary>
        /// The constructed chart of origin shield requests chart
        /// </summary>
        [Newtonsoft.Json.JsonProperty("QueuedRequestsChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> QueuedRequestsChart { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SafeHopStatisticsModel
    {
        /// <summary>
        /// The constructed chart of requests retried
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestsRetriedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> RequestsRetriedChart { get; set; }

        /// <summary>
        /// The constructed chart of requests saved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestsSavedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> RequestsSavedChart { get; set; }

        /// <summary>
        /// The total number of retried requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRequestsRetried", Required = Newtonsoft.Json.Required.Always)]
        public double TotalRequestsRetried { get; set; }

        /// <summary>
        /// The total number of saved requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRequestsSaved", Required = Newtonsoft.Json.Required.Always)]
        public double TotalRequestsSaved { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptimizerStatisticsModel
    {
        /// <summary>
        /// The constructed chart of optimized requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestsOptimizedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> RequestsOptimizedChart { get; set; }

        /// <summary>
        /// Average compression chart of the responses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AverageCompressionChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> AverageCompressionChart { get; set; }

        /// <summary>
        /// The constructed chart of saved traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TrafficSavedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> TrafficSavedChart { get; set; }

        /// <summary>
        /// The constructed chart of saved traffic
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AverageProcessingTimeChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> AverageProcessingTimeChart { get; set; }

        /// <summary>
        /// The total number of optimized requests
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRequestsOptimized", Required = Newtonsoft.Json.Required.Always)]
        public double TotalRequestsOptimized { get; set; }

        /// <summary>
        /// The total requests saved
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalTrafficSaved", Required = Newtonsoft.Json.Required.Always)]
        public double TotalTrafficSaved { get; set; }

        /// <summary>
        /// The average processing time of each request
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AverageProcessingTime", Required = Newtonsoft.Json.Required.Always)]
        public double AverageProcessingTime { get; set; }

        /// <summary>
        /// The average compression ratio of CDN responses
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AverageCompressionRatio", Required = Newtonsoft.Json.Required.Always)]
        public double AverageCompressionRatio { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PullZonePurgeModel
    {
        [Newtonsoft.Json.JsonProperty("CacheTag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CacheTag { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PullZoneAddModel : PullZoneSettingsModel
    {
        /// <summary>
        /// The name of the pull zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddCertificateRequestModel
    {
        /// <summary>
        /// The hostname to which the hostname will be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        /// <summary>
        /// The Base64Url encoded binary data of the certificate file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Certificate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Certificate { get; set; }

        /// <summary>
        /// The Base64Url encoded binary data of the certificate key file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CertificateKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string CertificateKey { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveCertificateRequestModel
    {
        /// <summary>
        /// The hostname from which the certificate will be removed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddHostnameRequestModel
    {
        /// <summary>
        /// The hostname that will be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveHostnameRequestModel
    {
        /// <summary>
        /// The hostname that will be removed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ForceSSLRequestModel
    {
        /// <summary>
        /// The hostname that will be updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Hostname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Hostname { get; set; }

        /// <summary>
        /// Set to true to force SSL on the given pull zone hostname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ForceSSL", Required = Newtonsoft.Json.Required.Always)]
        public bool ForceSSL { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddBlockedIpRequestModel
    {
        /// <summary>
        /// The IP that will be blocked from accessing the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedIp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BlockedIp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RemoveBlockedIpRequestModel
    {
        /// <summary>
        /// The IP that will be removed fromt he block list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BlockedIp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BlockedIp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatisticsModel
    {
        /// <summary>
        /// The total bandwidth used by the response in the given time range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public long TotalBandwidthUsed { get; set; }

        /// <summary>
        /// The total amount of traffic received from the origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalOriginTraffic", Required = Newtonsoft.Json.Required.Always)]
        public long TotalOriginTraffic { get; set; }

        /// <summary>
        /// The median response time origin
        /// </summary>
        [Newtonsoft.Json.JsonProperty("AverageOriginResponseTime", Required = Newtonsoft.Json.Required.Always)]
        public int AverageOriginResponseTime { get; set; }

        /// <summary>
        /// The constructed origin response time chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginResponseTimeChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> OriginResponseTimeChart { get; set; }

        /// <summary>
        /// The total requests served by the response in the given time range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("TotalRequestsServed", Required = Newtonsoft.Json.Required.Always)]
        public long TotalRequestsServed { get; set; }

        /// <summary>
        /// The average cache hit rate in the response in the given time range
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheHitRate", Required = Newtonsoft.Json.Required.Always)]
        public double CacheHitRate { get; set; }

        /// <summary>
        /// The constructed bandwdidth used chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BandwidthUsedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> BandwidthUsedChart { get; set; }

        /// <summary>
        /// The constructed cached bandwdidth used chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BandwidthCachedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> BandwidthCachedChart { get; set; }

        /// <summary>
        /// The constructed cache hit rate chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CacheHitRateChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> CacheHitRateChart { get; set; }

        /// <summary>
        /// The constructed requests served chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("RequestsServedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> RequestsServedChart { get; set; }

        /// <summary>
        /// The constructed uncached requests served chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullRequestsPulledChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> PullRequestsPulledChart { get; set; }

        /// <summary>
        /// The constructed origin shield bandwdidth used chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldBandwidthUsedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> OriginShieldBandwidthUsedChart { get; set; }

        /// <summary>
        /// The constructed origin shield internal bandwdidth used chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginShieldInternalBandwidthUsedChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> OriginShieldInternalBandwidthUsedChart { get; set; }

        /// <summary>
        /// The constructed origin traffic used chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginTrafficChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> OriginTrafficChart { get; set; }

        /// <summary>
        /// The constructed user balance history chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UserBalanceHistoryChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> UserBalanceHistoryChart { get; set; }

        /// <summary>
        /// The geo traffic distribution data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("GeoTrafficDistribution", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> GeoTrafficDistribution { get; set; }

        /// <summary>
        /// The constructed 3XX error responses chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Error3xxChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> Error3xxChart { get; set; }

        /// <summary>
        /// The constructed 4XX error responses chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Error4xxChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> Error4xxChart { get; set; }

        /// <summary>
        /// The constructed 5XX error responses chart data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Error5xxChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, double> Error5xxChart { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListModelOfStorageZoneModel
    {
        [Newtonsoft.Json.JsonProperty("Items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StorageZoneModel> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("CurrentPage", Required = Newtonsoft.Json.Required.Always)]
        public int CurrentPage { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalItems", Required = Newtonsoft.Json.Required.Always)]
        public int TotalItems { get; set; }

        [Newtonsoft.Json.JsonProperty("HasMoreItems", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMoreItems { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageZoneModel
    {
        /// <summary>
        /// The ID of the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The ID of the user that owns the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("UserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserId { get; set; }

        /// <summary>
        /// The name of the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The API access key or FTP password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// The date when the zone was last modified
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateModified", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateModified { get; set; }

        /// <summary>
        /// Determines if the zone was deleted or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Deleted", Required = Newtonsoft.Json.Required.Always)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The total amount of storage used by this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageUsed", Required = Newtonsoft.Json.Required.Always)]
        public long StorageUsed { get; set; }

        /// <summary>
        /// The total number of files stored by this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FilesStored", Required = Newtonsoft.Json.Required.Always)]
        public long FilesStored { get; set; }

        /// <summary>
        /// The main region used by the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Region { get; set; }

        /// <summary>
        /// The replication regions enabled for this storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationRegions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReplicationRegions { get; set; }

        /// <summary>
        /// The list of pull zones connected to this storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZones", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PullZoneModel> PullZones { get; set; }

        /// <summary>
        /// The read-only API access key or FTP password
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReadOnlyPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReadOnlyPassword { get; set; }

        /// <summary>
        /// Determines if the storage zone will rewrite 404 status codes to 200 status codes
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rewrite404To200", Required = Newtonsoft.Json.Required.Always)]
        public bool Rewrite404To200 { get; set; }

        /// <summary>
        /// The custom 404 error path that will be returned in case of a missing file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Custom404FilePath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom404FilePath { get; set; }

        /// <summary>
        /// Determines the storage hostname for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StorageHostname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageHostname { get; set; }

        /// <summary>
        /// Determines the storage zone tier that is storing the data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneTier", Required = Newtonsoft.Json.Required.Always)]
        public StorageZoneTier ZoneTier { get; set; }

        /// <summary>
        /// Determines if the storage zone is currently enabling a new replication region
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationChangeInProgress", Required = Newtonsoft.Json.Required.Always)]
        public bool ReplicationChangeInProgress { get; set; }

        /// <summary>
        /// The custom price override for this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PriceOverride", Required = Newtonsoft.Json.Required.Always)]
        public decimal PriceOverride { get; set; }

        /// <summary>
        /// The Storage Zone specific pricing discount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Discount", Required = Newtonsoft.Json.Required.Always)]
        public int Discount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Standard
    /// <br/>1 = Edge
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StorageZoneTier
    {

        Standard = 0,

        Edge = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageZonePullZoneConnection
    {
        /// <summary>
        /// The ID of the connected pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZoneId", Required = Newtonsoft.Json.Required.Always)]
        public long PullZoneId { get; set; }

        /// <summary>
        /// The name of the connected pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("PullZoneName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PullZoneName { get; set; }

        /// <summary>
        /// The type of the connection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ConnectionType", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneConnectionType ConnectionType { get; set; }

        /// <summary>
        /// The total amount of bandwidth served by this zone this month
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyBandwidthUsed", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyBandwidthUsed { get; set; }

        /// <summary>
        /// The main custom connected CDN domain
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MainCustomDomain", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCustomDomain { get; set; }

        /// <summary>
        /// The pricing tier of the pull zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Tier", Required = Newtonsoft.Json.Required.Always)]
        public PullZoneType Tier { get; set; }

        /// <summary>
        /// The total monthly charges incurred by this zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("MonthlyCharges", Required = Newtonsoft.Json.Required.Always)]
        public double MonthlyCharges { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = CDN
    /// <br/>1 = PermaCache
    /// <br/>2 = LogStorage
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PullZoneConnectionType
    {

        CDN = 0,

        PermaCache = 1,

        LogStorage = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageZoneModelAdd
    {
        /// <summary>
        /// The origin URL of the storage zone that will be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginUrl { get; set; }

        /// <summary>
        /// The name of the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>
        /// The code of the main storage zone region (Possible values: DE, NY, LA, SG)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Region { get; set; }

        /// <summary>
        /// The code of the main storage zone region (Possible values: DE, NY, LA, SG, SYD)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationRegions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReplicationRegions { get; set; }

        /// <summary>
        /// Determines the storage zone tier that will be storing the data
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZoneTier", Required = Newtonsoft.Json.Required.Always)]
        public StorageZoneTier ZoneTier { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StorageZoneSettingsModel
    {
        /// <summary>
        /// The list of replication zones enabld for the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReplicationZones", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ReplicationZones { get; set; }

        /// <summary>
        /// The origin URL of the storage zone
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OriginUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginUrl { get; set; }

        /// <summary>
        /// The path to the custom file that will be returned in a case of 404
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Custom404FilePath", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom404FilePath { get; set; }

        /// <summary>
        /// Rewrite 404 status code to 200 for URLs without extension
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Rewrite404To200", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Rewrite404To200 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverviewPageFeed
    {
        [Newtonsoft.Json.JsonProperty("BlogPosts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverviewResource> BlogPosts { get; set; }

        [Newtonsoft.Json.JsonProperty("Articles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OverviewResource> Articles { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OverviewResource
    {
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("DatePublished", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DatePublished { get; set; }

        [Newtonsoft.Json.JsonProperty("Summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotificationModel
    {
        /// <summary>
        /// The unique ID of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// Determines if the notification has already been opened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Opened", Required = Newtonsoft.Json.Required.Always)]
        public bool Opened { get; set; }

        /// <summary>
        /// The title of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The message of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The URL where the notification is linking to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The type of the notification
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public NotificationType Type { get; set; }

        /// <summary>
        /// The timestamp when the notification was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        /// <summary>
        /// The date when the notification was opened
        /// </summary>
        [Newtonsoft.Json.JsonProperty("DateTimeOpened", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateTimeOpened { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Info
    /// <br/>1 = Warning
    /// <br/>2 = Problem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NotificationType
    {

        Info = 0,

        Warning = 1,

        Problem = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountCloseReason
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CloseAccountRequestModel
    {
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DpaAcceptResult
    {
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserUpdateModel
    {
        /// <summary>
        /// (Optional) Sets the first name of the account owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        /// <summary>
        /// (Optional) Sets the user email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// (Optional) Sets the billing email where the invoices will be sent
        /// </summary>
        [Newtonsoft.Json.JsonProperty("BillingEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BillingEmail { get; set; }

        /// <summary>
        /// (Optional) Sets the last name of the account owner
        /// </summary>
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        /// <summary>
        /// (Optional) Sets the street name and number of the user's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("StreetAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// (Optional) Sets the city name of the user's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// (Optional) Sets the ZIP code of the user's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }

        /// <summary>
        /// (Optional) Sets the country of the user's address
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// (Optional) Sets the company name of the company responsible for the account
        /// </summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CompanyName { get; set; }

        /// <summary>
        /// (Optional) Sets the VAT number used for the billing details (EU VAT numbers only are accepted)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("VATNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VATNumber { get; set; }

        /// <summary>
        /// (Optional) Determines if the account should receive notification emails from bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReceiveNotificationEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReceiveNotificationEmails { get; set; }

        /// <summary>
        /// (Optional) Determines if the account should receive promotional emails from bunny.net
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ReceivePromotionalEmails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ReceivePromotionalEmails { get; set; }

        /// <summary>
        /// (Optional) Sets the login password for the user account. OldPassword should also be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// (Optional) The verification password when changing the password through the Password property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("OldPassword", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OldPassword { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhatsNewModel
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("Timestamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("Title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        public WhatsNewModelType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("IsNew", Required = Newtonsoft.Json.Required.Always)]
        public bool IsNew { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Feature
    /// <br/>1 = Update
    /// <br/>2 = BugFix
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WhatsNewModelType
    {

        Feature = 0,

        Update = 1,

        BugFix = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorModel
    {
        [Newtonsoft.Json.JsonProperty("SecretValidator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecretValidator { get; set; }

        [Newtonsoft.Json.JsonProperty("Secret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("QrCodeBase64", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QrCodeBase64 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorEnableResultModel
    {
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorDisableRequestModel
    {
        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorVerifyModel
    {
        [Newtonsoft.Json.JsonProperty("SecretValidator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecretValidator { get; set; }

        [Newtonsoft.Json.JsonProperty("Secret", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Secret { get; set; }

        [Newtonsoft.Json.JsonProperty("TestPin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TestPin { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TwoFactorVerifyResultModel
    {
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        [Newtonsoft.Json.JsonProperty("Error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BunnyNetApiApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BunnyNetApiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BunnyNetApiApiException<TResult> : BunnyNetApiApiException
    {
        public TResult Result { get; private set; }

        public BunnyNetApiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625