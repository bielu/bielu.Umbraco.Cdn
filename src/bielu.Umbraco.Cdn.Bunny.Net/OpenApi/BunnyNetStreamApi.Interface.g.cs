//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace bielu.Umbraco.Cdn.Bunny.Net.CCU.Interface
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBunnyNetStreamApiClient
    {
        /// <summary>
        /// Get Collection
        /// </summary>
        /// <returns>The details of the requested collection</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionModel> Collection_GetCollectionAsync(long libraryId, string collectionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Collection
        /// </summary>
        /// <returns>The details of the requested collection</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionModel> Collection_GetCollectionAsync(long libraryId, string collectionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Collection
        /// </summary>
        /// <returns>The collection was successfuly updated</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Collection_UpdateCollectionAsync(long libraryId, string collectionId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Collection
        /// </summary>
        /// <returns>The collection was successfuly updated</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Collection_UpdateCollectionAsync(long libraryId, string collectionId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <returns>The collection was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Collection_DeleteCollectionAsync(long libraryId, string collectionId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Collection
        /// </summary>
        /// <returns>The collection was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Collection_DeleteCollectionAsync(long libraryId, string collectionId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Collection List
        /// </summary>
        /// <returns>The list of videos for the current parameters</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListOfCollectionModel> Collection_ListAsync(long libraryId, int? page, int? itemsPerPage, string search, string orderBy);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Collection List
        /// </summary>
        /// <returns>The list of videos for the current parameters</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListOfCollectionModel> Collection_ListAsync(long libraryId, int? page, int? itemsPerPage, string search, string orderBy, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Collection
        /// </summary>
        /// <returns>The collection was successfuly created</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionModel> Collection_CreateCollectionAsync(long libraryId, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Collection
        /// </summary>
        /// <returns>The collection was successfuly created</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CollectionModel> Collection_CreateCollectionAsync(long libraryId, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Video
        /// </summary>
        /// <returns>The details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_GetVideoAsync(long libraryId, string videoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Video
        /// </summary>
        /// <returns>The details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_GetVideoAsync(long libraryId, string videoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Video
        /// </summary>
        /// <returns>The thumbnail was successfuly set</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_UpdateVideoAsync(long libraryId, string videoId, UpdateVideoModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Video
        /// </summary>
        /// <returns>The thumbnail was successfuly set</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_UpdateVideoAsync(long libraryId, string videoId, UpdateVideoModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Video
        /// </summary>
        /// <returns>The video was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_DeleteVideoAsync(long libraryId, string videoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Video
        /// </summary>
        /// <returns>The video was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_DeleteVideoAsync(long libraryId, string videoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload Video
        /// </summary>
        /// <returns>The video was successfuly uploaded</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_UploadVideoAsync(long libraryId, string videoId, string enabledResolutions);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload Video
        /// </summary>
        /// <returns>The video was successfuly uploaded</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_UploadVideoAsync(long libraryId, string videoId, string enabledResolutions, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Video Heatmap
        /// </summary>
        /// <returns>The heatmap details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoHeatmapModel> Video_GetVideoHeatmapAsync(long libraryId, string videoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Video Heatmap
        /// </summary>
        /// <returns>The heatmap details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoHeatmapModel> Video_GetVideoHeatmapAsync(long libraryId, string videoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Video Statistics
        /// </summary>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <param name="videoGuid">(Optional) The GUID of the video for which the statistics will be returned</param>
        /// <returns>The heatmap details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoStatisticsModel> Video_GetVideoStatisticsAsync(long libraryId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly, string videoGuid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Video Statistics
        /// </summary>
        /// <param name="dateFrom">(Optional) The start date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="dateTo">(Optional) The end date of the statistics. If no value is passed, the last 30 days will be returned.</param>
        /// <param name="hourly">(Optional) If true, the statistics data will be returned in hourly groupping.</param>
        /// <param name="videoGuid">(Optional) The GUID of the video for which the statistics will be returned</param>
        /// <returns>The heatmap details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoStatisticsModel> Video_GetVideoStatisticsAsync(long libraryId, System.DateTimeOffset? dateFrom, System.DateTimeOffset? dateTo, bool? hourly, string videoGuid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reencode Video
        /// </summary>
        /// <returns>The details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_ReencodeVideoAsync(long libraryId, string videoId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reencode Video
        /// </summary>
        /// <returns>The details of the requested video</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_ReencodeVideoAsync(long libraryId, string videoId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// List Videos
        /// </summary>
        /// <returns>The list of videos for the current parameters</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListOfVideoModel> Video_ListAsync(long libraryId, int? page, int? itemsPerPage, string search, string collection, string orderBy);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List Videos
        /// </summary>
        /// <returns>The list of videos for the current parameters</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PaginationListOfVideoModel> Video_ListAsync(long libraryId, int? page, int? itemsPerPage, string search, string collection, string orderBy, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Video
        /// </summary>
        /// <returns>The video was successfuly created and returned as the response.</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_CreateVideoAsync(long libraryId, CreateVideoModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Video
        /// </summary>
        /// <returns>The video was successfuly created and returned as the response.</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VideoModel> Video_CreateVideoAsync(long libraryId, CreateVideoModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set Thumbnail
        /// </summary>
        /// <returns>The thumbnail was successfuly set</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_SetThumbnailAsync(long libraryId, string videoId, string thumbnailUrl);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set Thumbnail
        /// </summary>
        /// <returns>The thumbnail was successfuly set</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_SetThumbnailAsync(long libraryId, string videoId, string thumbnailUrl, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Fetch Video
        /// </summary>
        /// <param name="thumbnailTime">(Optional) Video time in ms to extract the main video thumbnail.</param>
        /// <returns>The video was successfuly fetched</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_FetchNewVideoAsync(long libraryId, string collectionId, int? thumbnailTime, FetchVideoRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fetch Video
        /// </summary>
        /// <param name="thumbnailTime">(Optional) Video time in ms to extract the main video thumbnail.</param>
        /// <returns>The video was successfuly fetched</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_FetchNewVideoAsync(long libraryId, string collectionId, int? thumbnailTime, FetchVideoRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Add Caption
        /// </summary>
        /// <returns>The caption was successfuly uploaded</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_AddCaptionAsync(long libraryId, string videoId, string srclang, CaptionModelAdd body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add Caption
        /// </summary>
        /// <returns>The caption was successfuly uploaded</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_AddCaptionAsync(long libraryId, string videoId, string srclang, CaptionModelAdd body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Caption
        /// </summary>
        /// <returns>The caption was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_DeleteCaptionAsync(long libraryId, string videoId, string srclang);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Caption
        /// </summary>
        /// <returns>The caption was successfuly deleted</returns>
        /// <exception cref="BunnyNetStreamApiApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusModel> Video_DeleteCaptionAsync(long libraryId, string videoId, string srclang, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollectionModel
    {
        /// <summary>
        /// The video library ID that contains the collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoLibraryId", Required = Newtonsoft.Json.Required.Always)]
        public long VideoLibraryId { get; set; }

        /// <summary>
        /// The unique ID of the collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        /// <summary>
        /// The name of the collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of videos that the collection contains
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoCount", Required = Newtonsoft.Json.Required.Always)]
        public long VideoCount { get; set; }

        /// <summary>
        /// The total storage size of the collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalSize", Required = Newtonsoft.Json.Required.Always)]
        public long TotalSize { get; set; }

        /// <summary>
        /// The IDs of videos to be used as preview icons
        /// </summary>
        [Newtonsoft.Json.JsonProperty("previewVideoIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviewVideoIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListOfCollectionModel
    {
        /// <summary>
        /// The total number of items that can be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
        public long TotalItems { get; set; }

        /// <summary>
        /// The current page of the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Always)]
        public long CurrentPage { get; set; }

        /// <summary>
        /// The number of items returned per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Always)]
        public int ItemsPerPage { get; set; }

        /// <summary>
        /// The result items on the current result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollectionModel> Items { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateCollectionModel
    {
        /// <summary>
        /// The name of the collection
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StatusModel
    {
        /// <summary>
        /// Determines if the request was successful
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Always)]
        public bool Success { get; set; }

        /// <summary>
        /// Response message description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The response status code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoModel
    {
        /// <summary>
        /// The ID of the video library that the video belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("videoLibraryId", Required = Newtonsoft.Json.Required.Always)]
        public long VideoLibraryId { get; set; }

        /// <summary>
        /// The unique ID of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }

        /// <summary>
        /// The title of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The date when the video was uploaded
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateUploaded", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset DateUploaded { get; set; }

        /// <summary>
        /// The number of views the video received
        /// </summary>
        [Newtonsoft.Json.JsonProperty("views", Required = Newtonsoft.Json.Required.Always)]
        public long Views { get; set; }

        /// <summary>
        /// Determines if the video is publically accessible
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPublic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsPublic { get; set; }

        /// <summary>
        /// The duration of the video in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Always)]
        public int Length { get; set; }

        /// <summary>
        /// The status of the video. Created = 0, Uploaded = 1, Processing = 2, Transcoding = 3, Finished = 4, Error = 5, UploadFailed = 6
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public VideoModelStatus Status { get; set; }

        /// <summary>
        /// The framerate of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("framerate", Required = Newtonsoft.Json.Required.Always)]
        public double Framerate { get; set; }

        /// <summary>
        /// The rotation of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rotation { get; set; }

        /// <summary>
        /// The width of the original video file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Always)]
        public int Width { get; set; }

        /// <summary>
        /// The height of the original video file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.Always)]
        public int Height { get; set; }

        /// <summary>
        /// The available resolutions of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableResolutions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvailableResolutions { get; set; }

        /// <summary>
        /// The number of thumbnails generated for this video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnailCount", Required = Newtonsoft.Json.Required.Always)]
        public int ThumbnailCount { get; set; }

        /// <summary>
        /// The current encode progress of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodeProgress", Required = Newtonsoft.Json.Required.Always)]
        public int EncodeProgress { get; set; }

        /// <summary>
        /// The amount of storage used by this video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("storageSize", Required = Newtonsoft.Json.Required.Always)]
        public long StorageSize { get; set; }

        /// <summary>
        /// The list of captions available for the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("captions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CaptionModel> Captions { get; set; }

        /// <summary>
        /// Determines if the video has MP4 fallback files generated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasMP4Fallback", Required = Newtonsoft.Json.Required.Always)]
        public bool HasMP4Fallback { get; set; }

        /// <summary>
        /// The ID of the collection where the video belongs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// The file name of the thumbnail inside of the storage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnailFileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbnailFileName { get; set; }

        /// <summary>
        /// The average watch time of the video in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("averageWatchTime", Required = Newtonsoft.Json.Required.Always)]
        public long AverageWatchTime { get; set; }

        /// <summary>
        /// The total video watch time in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalWatchTime", Required = Newtonsoft.Json.Required.Always)]
        public long TotalWatchTime { get; set; }

        /// <summary>
        /// The automatically detected category of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// The list of chapters available for the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chapters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChapterModel> Chapters { get; set; }

        /// <summary>
        /// The list of moments available for the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MomentModel> Moments { get; set; }

        /// <summary>
        /// The list of meta tags that have been added to the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetaTagModel> MetaTags { get; set; }

        /// <summary>
        /// The list of transcoding messages that describe potential issues while the video was transcoding
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transcodingMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TranscodingMessageModel> TranscodingMessages { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Created
    /// <br/>1 = Uploaded
    /// <br/>2 = Processing
    /// <br/>3 = Transcoding
    /// <br/>4 = Finished
    /// <br/>5 = Error
    /// <br/>6 = UploadFailed
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VideoModelStatus
    {

        Created = 0,

        Uploaded = 1,

        Processing = 2,

        Transcoding = 3,

        Finished = 4,

        Error = 5,

        UploadFailed = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaptionModel
    {
        /// <summary>
        /// The unique srclang shortcode for the caption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srclang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Srclang { get; set; }

        /// <summary>
        /// The text description label for the caption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChapterModel
    {
        /// <summary>
        /// The title of the chapter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Title { get; set; }

        /// <summary>
        /// The start time of the chapter in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.Always)]
        public int Start { get; set; }

        /// <summary>
        /// The end time of the chapter in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.Always)]
        public int End { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MomentModel
    {
        /// <summary>
        /// The text description label for the chapter
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; }

        /// <summary>
        /// The timestamp of the moment in seconds
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        public int Timestamp { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MetaTagModel
    {
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Property { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TranscodingMessageModel
    {
        [Newtonsoft.Json.JsonProperty("timeStamp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset TimeStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Always)]
        public Severity Level { get; set; }

        [Newtonsoft.Json.JsonProperty("issueCode", Required = Newtonsoft.Json.Required.Always)]
        public IssueCodes IssueCode { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// 0 = Undefined
    /// <br/>1 = Information
    /// <br/>2 = Warning
    /// <br/>3 = Error
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Severity
    {

        Undefined = 0,

        Information = 1,

        Warning = 2,

        Error = 3,

    }

    /// <summary>
    /// 0 = Undefined
    /// <br/>1 = StreamLengthsDifference
    /// <br/>2 = TranscodingWarnings
    /// <br/>3 = IncompatibleResolution
    /// <br/>4 = InvalidFramerate
    /// <br/>5 = VideoExceededMaxDuration
    /// <br/>6 = AudioExceededMaxDuration
    /// <br/>7 = OriginalCorrupted
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IssueCodes
    {

        Undefined = 0,

        StreamLengthsDifference = 1,

        TranscodingWarnings = 2,

        IncompatibleResolution = 3,

        InvalidFramerate = 4,

        VideoExceededMaxDuration = 5,

        AudioExceededMaxDuration = 6,

        OriginalCorrupted = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoHeatmapModel
    {
        /// <summary>
        /// The heatmap of the video. 100 is the highest percentage of watch time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("heatmap", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> Heatmap { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VideoStatisticsModel
    {
        /// <summary>
        /// The constructed chart of checked requests threats
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewsChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> ViewsChart { get; set; }

        /// <summary>
        /// The constructed chart of the total watch time
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchTimeChart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> WatchTimeChart { get; set; }

        /// <summary>
        /// The country view count constructed chart
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryViewCounts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> CountryViewCounts { get; set; }

        /// <summary>
        /// The country watch time constructed chart
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryWatchTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, long> CountryWatchTime { get; set; }

        [Newtonsoft.Json.JsonProperty("engagementScore", Required = Newtonsoft.Json.Required.Always)]
        public int EngagementScore { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginationListOfVideoModel
    {
        /// <summary>
        /// The total number of items that can be returned
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalItems", Required = Newtonsoft.Json.Required.Always)]
        public long TotalItems { get; set; }

        /// <summary>
        /// The current page of the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentPage", Required = Newtonsoft.Json.Required.Always)]
        public long CurrentPage { get; set; }

        /// <summary>
        /// The number of items returned per page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemsPerPage", Required = Newtonsoft.Json.Required.Always)]
        public int ItemsPerPage { get; set; }

        /// <summary>
        /// The result items on the current result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VideoModel> Items { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateVideoModel
    {
        /// <summary>
        /// The title of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Title { get; set; }

        /// <summary>
        /// The ID of the collection where the video will be put
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// Video time in ms to extract the main video thumbnail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnailTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ThumbnailTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateVideoModel
    {
        /// <summary>
        /// The title of the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The ID of the collection where the video belongs
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collectionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CollectionId { get; set; }

        /// <summary>
        /// The list of chapters available for the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("chapters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChapterModel> Chapters { get; set; }

        /// <summary>
        /// The list of moments available for the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MomentModel> Moments { get; set; }

        /// <summary>
        /// The meta tags added to the video
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metaTags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MetaTagModel> MetaTags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FetchVideoRequest
    {
        /// <summary>
        /// The URL from which the video will be fetched from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Url { get; set; }

        /// <summary>
        /// The headers that will be sent along with the fetch request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Headers { get; set; }

        /// <summary>
        /// The title that will be set to video.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CaptionModelAdd
    {
        /// <summary>
        /// The unique srclang shortcode for the caption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("srclang", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Srclang { get; set; }

        /// <summary>
        /// The text description label for the caption
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// Base64 encoded captions file
        /// </summary>
        [Newtonsoft.Json.JsonProperty("captionsFile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CaptionsFile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BunnyNetStreamApiApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BunnyNetStreamApiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BunnyNetStreamApiApiException<TResult> : BunnyNetStreamApiApiException
    {
        public TResult Result { get; private set; }

        public BunnyNetStreamApiApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625